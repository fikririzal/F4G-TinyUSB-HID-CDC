
F4G-TinyUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008910  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08008a98  08008a98  00009a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e38  08008e38  0000a080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e38  08008e38  00009e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e40  08008e40  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e44  08008e44  00009e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008e48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a080  2**0
                  CONTENTS
 10 .bss          000008f4  20000080  20000080  0000a080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000974  20000974  0000a080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168a3  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003daa  00000000  00000000  00020953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00024700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be4  00000000  00000000  000255f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265b4  00000000  00000000  000261dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001385a  00000000  00000000  0004c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c00  00000000  00000000  0005ffea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144bea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d80  00000000  00000000  00144c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001489b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a80 	.word	0x08008a80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08008a80 	.word	0x08008a80

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fd37 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f81f 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8b5 	bl	8000680 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000516:	f000 f885 	bl	8000624 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	board_led_write(false);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fc0e 	bl	8000d3c <board_led_write>
	tusb_rhport_init_t dev_init = {
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <main+0x48>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	80bb      	strh	r3, [r7, #4]
			.role = TUSB_ROLE_DEVICE,
			.speed = TUSB_SPEED_AUTO };
	tusb_init(BOARD_TUD_RHPORT, &dev_init);
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4619      	mov	r1, r3
 800052a:	2000      	movs	r0, #0
 800052c:	f008 f8d0 	bl	80086d0 <tusb_rhport_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000530:	2100      	movs	r1, #0
 8000532:	f04f 30ff 	mov.w	r0, #4294967295
 8000536:	f004 fb5d 	bl	8004bf4 <tud_task_ext>
}
 800053a:	bf00      	nop
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tud_task(); // tinyusb device task
		cdc_task();
 800053c:	f000 f966 	bl	800080c <cdc_task>
		hid_task();
 8000540:	f000 f9b2 	bl	80008a8 <hid_task>
		led_blinking_task();
 8000544:	f000 fab8 	bl	8000ab8 <led_blinking_task>
		tud_task(); // tinyusb device task
 8000548:	bf00      	nop
 800054a:	e7f1      	b.n	8000530 <main+0x2c>
 800054c:	08008a98 	.word	0x08008a98

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	@ 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	@ 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f008 fa53 	bl	8008a0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	@ (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	@ (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	@ 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	@ (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	@ (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c4:	23a8      	movs	r3, #168	@ 0xa8
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 f955 	bl	8001884 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 fa96 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fbb6 	bl	8001d74 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060e:	f000 fa7f 	bl	8000b10 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	@ 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800062a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800062e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000632:	2204      	movs	r2, #4
 8000634:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000638:	2202      	movs	r2, #2
 800063a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000644:	2202      	movs	r2, #2
 8000646:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800064a:	2201      	movs	r2, #1
 800064c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000668:	f000 fffd 	bl	8001666 <HAL_PCD_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000672:	f000 fa4d 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000009c 	.word	0x2000009c

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <MX_GPIO_Init+0x94>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a1d      	ldr	r2, [pc, #116]	@ (8000714 <MX_GPIO_Init+0x94>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_GPIO_Init+0x94>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_GPIO_Init+0x94>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <MX_GPIO_Init+0x94>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_GPIO_Init+0x94>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserLED_GPIO_Port, UserLED_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2102      	movs	r1, #2
 80006d2:	4811      	ldr	r0, [pc, #68]	@ (8000718 <MX_GPIO_Init+0x98>)
 80006d4:	f000 ffae 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserBTN_Pin */
  GPIO_InitStruct.Pin = UserBTN_Pin;
 80006d8:	2301      	movs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserBTN_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	480b      	ldr	r0, [pc, #44]	@ (8000718 <MX_GPIO_Init+0x98>)
 80006ec:	f000 fdee 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : UserLED_Pin */
  GPIO_InitStruct.Pin = UserLED_Pin;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UserLED_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0x98>)
 8000708:	f000 fde0 	bl	80012cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000

0800071c <echo_serial_port>:

/* USER CODE BEGIN 4 */
// echo to either Serial0 or Serial1
// with Serial0 as all lower case, Serial1 as all upper case
static void echo_serial_port(uint8_t itf, uint8_t buf[], uint32_t count) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
	uint8_t const case_diff = 'a' - 'A';
 800072a:	2320      	movs	r3, #32
 800072c:	74fb      	strb	r3, [r7, #19]

	for (uint32_t i = 0; i < count; i++) {
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	e043      	b.n	80007bc <echo_serial_port+0xa0>
		if (itf == 0) {
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d117      	bne.n	800076a <echo_serial_port+0x4e>
			// echo back 1st port as lower case
			if (isupper(buf[i]))
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a23      	ldr	r2, [pc, #140]	@ (80007d4 <echo_serial_port+0xb8>)
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f003 0303 	and.w	r3, r3, #3
 800074e:	2b01      	cmp	r3, #1
 8000750:	d122      	bne.n	8000798 <echo_serial_port+0x7c>
				buf[i] += case_diff;
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	4413      	add	r3, r2
 8000758:	7819      	ldrb	r1, [r3, #0]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	4413      	add	r3, r2
 8000760:	7cfa      	ldrb	r2, [r7, #19]
 8000762:	440a      	add	r2, r1
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e016      	b.n	8000798 <echo_serial_port+0x7c>
		} else {
			// echo back 2nd port as upper case
			if (islower(buf[i]))
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <echo_serial_port+0xb8>)
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	f003 0303 	and.w	r3, r3, #3
 800077e:	2b02      	cmp	r3, #2
 8000780:	d10a      	bne.n	8000798 <echo_serial_port+0x7c>
				buf[i] -= case_diff;
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	4413      	add	r3, r2
 8000788:	7819      	ldrb	r1, [r3, #0]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	4413      	add	r3, r2
 8000790:	7cfa      	ldrb	r2, [r7, #19]
 8000792:	1a8a      	subs	r2, r1, r2
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	701a      	strb	r2, [r3, #0]
		}

		tud_cdc_n_write_char(itf, buf[i]);
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	4413      	add	r3, r2
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	74bb      	strb	r3, [r7, #18]
 80007a4:	4613      	mov	r3, r2
 80007a6:	747b      	strb	r3, [r7, #17]
// Write bytes to TX FIFO, data may remain in the FIFO for a while
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize);

// Write a byte
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch) {
  return tud_cdc_n_write(itf, &ch, 1);
 80007a8:	f107 0111 	add.w	r1, r7, #17
 80007ac:	7cbb      	ldrb	r3, [r7, #18]
 80007ae:	2201      	movs	r2, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 f8fb 	bl	80029ac <tud_cdc_n_write>
	for (uint32_t i = 0; i < count; i++) {
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3b7      	bcc.n	8000734 <echo_serial_port+0x18>
	}
	tud_cdc_n_write_flush(itf);
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 f924 	bl	8002a14 <tud_cdc_n_write_flush>
}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	08008d34 	.word	0x08008d34

080007d8 <tud_mount_cb>:

// Invoked when device is mounted
void tud_mount_cb(void) {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <tud_mount_cb+0x18>)
 80007de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000040 	.word	0x20000040

080007f4 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_NOT_MOUNTED;
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <tud_umount_cb+0x14>)
 80007fa:	22fa      	movs	r2, #250	@ 0xfa
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	20000040 	.word	0x20000040

0800080c <cdc_task>:

//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
static void cdc_task(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
//	for (uint8_t itf = 0; itf < CFG_TUD_CDC; itf++) {
		// connected() check for DTR bit
		// Most but not all terminal client set this when making connection
//		 if ( tud_cdc_n_connected(ITF_NUM_CDC_0) )
		{
			if (tud_cdc_n_available(0)) {
 8000812:	2000      	movs	r0, #0
 8000814:	f002 f888 	bl	8002928 <tud_cdc_n_available>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00c      	beq.n	8000838 <cdc_task+0x2c>
				uint8_t buf[64];
				uint32_t count = tud_cdc_n_read(0, buf, sizeof(buf));
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2240      	movs	r2, #64	@ 0x40
 8000822:	4619      	mov	r1, r3
 8000824:	2000      	movs	r0, #0
 8000826:	f002 f895 	bl	8002954 <tud_cdc_n_read>
 800082a:	64f8      	str	r0, [r7, #76]	@ 0x4c

				// echo back to both serial ports
				echo_serial_port(0, buf, count);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000830:	4619      	mov	r1, r3
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff ff72 	bl	800071c <echo_serial_port>
			}

			// Press on-board button to send Uart status notification
			static uint32_t btn_prev = 0;
			static cdc_notify_uart_state_t uart_state = { .value = 0 };
			const uint32_t btn = board_button_read();
 8000838:	f000 fa9c 	bl	8000d74 <board_button_read>
 800083c:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (!btn_prev && btn) {
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <cdc_task+0x74>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d115      	bne.n	8000872 <cdc_task+0x66>
 8000846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000848:	2b00      	cmp	r3, #0
 800084a:	d012      	beq.n	8000872 <cdc_task+0x66>
				uart_state.dsr ^= 1;
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <cdc_task+0x78>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f083 0301 	eor.w	r3, r3, #1
 800085a:	b2d9      	uxtb	r1, r3
 800085c:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <cdc_task+0x78>)
 800085e:	7813      	ldrb	r3, [r2, #0]
 8000860:	f361 0341 	bfi	r3, r1, #1, #1
 8000864:	7013      	strb	r3, [r2, #0]
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <cdc_task+0x78>)
 8000868:	647b      	str	r3, [r7, #68]	@ 0x44

// Send connection speed change notification
bool tud_cdc_n_notify_conn_speed_change(uint8_t itf, const cdc_notify_conn_speed_change_t* conn_speed_change);

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_notify_uart_state(const cdc_notify_uart_state_t* state) {
 return tud_cdc_n_notify_uart_state(0, state);
 800086a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800086c:	2000      	movs	r0, #0
 800086e:	f001 ffe7 	bl	8002840 <tud_cdc_n_notify_uart_state>
				tud_cdc_notify_uart_state(&uart_state);
			}
			btn_prev = btn;
 8000872:	4a03      	ldr	r2, [pc, #12]	@ (8000880 <cdc_task+0x74>)
 8000874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000876:	6013      	str	r3, [r2, #0]
		}
//	}
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	@ 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000580 	.word	0x20000580
 8000884:	20000584 	.word	0x20000584

08000888 <tud_cdc_line_state_cb>:

// Invoked when cdc when line state changed e.g connected/disconnected
// Use to reset to DFU when disconnect with 1200 bps
void tud_cdc_line_state_cb(uint8_t instance, bool dtr, bool rts) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	460b      	mov	r3, r1
 8000894:	71bb      	strb	r3, [r7, #6]
 8000896:	4613      	mov	r3, r2
 8000898:	717b      	strb	r3, [r7, #5]
//					board_reset_to_bootloader();
//				}
//			}
//		}
//	}
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <hid_task>:
// USB HID
//--------------------------------------------------------------------+

// Every 10ms, we will sent 1 report for each HID profile (keyboard, mouse etc ..)
// tud_hid_report_complete_cb() is used to send the next report after previous one is complete
void hid_task(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
	// Poll every 10ms
	const uint32_t interval_ms = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
	static uint32_t start_ms = 0;

	if (board_millis() - start_ms < interval_ms)
 80008b2:	f000 fa9f 	bl	8000df4 <board_millis>
 80008b6:	4602      	mov	r2, r0
 80008b8:	4b49      	ldr	r3, [pc, #292]	@ (80009e0 <hid_task+0x138>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f200 8089 	bhi.w	80009d8 <hid_task+0x130>
		return; // not enough time
	start_ms += interval_ms;
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <hid_task+0x138>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a44      	ldr	r2, [pc, #272]	@ (80009e0 <hid_task+0x138>)
 80008d0:	6013      	str	r3, [r2, #0]

	uint32_t const btn = board_button_read();
 80008d2:	f000 fa4f 	bl	8000d74 <board_button_read>
 80008d6:	6178      	str	r0, [r7, #20]
//  uint8_t debug = tud_hid_n_ready(ITF_NUM_KEYBOARD);

	if (tud_suspended() && btn) {
 80008d8:	f003 ffe6 	bl	80048a8 <tud_suspended>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d005      	beq.n	80008ee <hid_task+0x46>
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d002      	beq.n	80008ee <hid_task+0x46>
		// Wake up host if we are in suspend mode
		// and REMOTE_WAKEUP feature is enabled by host
		tud_remote_wakeup();
 80008e8:	f003 fff2 	bl	80048d0 <tud_remote_wakeup>
 80008ec:	e075      	b.n	80009da <hid_task+0x132>
	} else {
		// keyboard interface
		if (tud_hid_n_ready(0)) {
 80008ee:	2000      	movs	r0, #0
 80008f0:	f002 fccc 	bl	800328c <tud_hid_n_ready>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d06f      	beq.n	80009da <hid_task+0x132>
			static bool has_keyboard_key = false;
			static bool typing = false;
			static uint32_t index = 0;
			static uint32_t textLen = 0;

			uint8_t const report_id = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	74fb      	strb	r3, [r7, #19]
			uint8_t modifier = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	77fb      	strb	r3, [r7, #31]
			uint8_t empty_key[6] = {0};
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	809a      	strh	r2, [r3, #4]
			uint8_t keycode[6] = { 0 };
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	809a      	strh	r2, [r3, #4]
//					tud_hid_n_keyboard_report(0, report_id, modifier,
//					NULL);
//				has_keyboard_key = false;
//			}

			if (btn) {
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <hid_task+0x84>
				typing = true;
 800091a:	4b32      	ldr	r3, [pc, #200]	@ (80009e4 <hid_task+0x13c>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
				textLen = strlen(text);
 8000920:	4831      	ldr	r0, [pc, #196]	@ (80009e8 <hid_task+0x140>)
 8000922:	f7ff fc51 	bl	80001c8 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	4a30      	ldr	r2, [pc, #192]	@ (80009ec <hid_task+0x144>)
 800092a:	6013      	str	r3, [r2, #0]
			}

			if (typing) {
 800092c:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <hid_task+0x13c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d040      	beq.n	80009b6 <hid_task+0x10e>
				if (has_keyboard_key) {
 8000934:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <hid_task+0x148>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00c      	beq.n	8000956 <hid_task+0xae>
					modifier = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	77fb      	strb	r3, [r7, #31]
					tud_hid_n_keyboard_report(ITF_NUM_KEYBOARD, report_id, modifier,
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	7ffa      	ldrb	r2, [r7, #31]
 8000946:	7cf9      	ldrb	r1, [r7, #19]
 8000948:	2000      	movs	r0, #0
 800094a:	f002 fd67 	bl	800341c <tud_hid_n_keyboard_report>
							empty_key);
					has_keyboard_key = false;
 800094e:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <hid_task+0x148>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e041      	b.n	80009da <hid_task+0x132>
				} else {
					modifier = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	77fb      	strb	r3, [r7, #31]
					uint8_t chr = text[index];
 800095a:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <hid_task+0x14c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a22      	ldr	r2, [pc, #136]	@ (80009e8 <hid_task+0x140>)
 8000960:	5cd3      	ldrb	r3, [r2, r3]
 8000962:	74bb      	strb	r3, [r7, #18]

					if ( conv_table[chr][0] ) modifier = KEYBOARD_MODIFIER_LEFTSHIFT;
 8000964:	7cbb      	ldrb	r3, [r7, #18]
 8000966:	4a24      	ldr	r2, [pc, #144]	@ (80009f8 <hid_task+0x150>)
 8000968:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <hid_task+0xcc>
 8000970:	2302      	movs	r3, #2
 8000972:	77fb      	strb	r3, [r7, #31]
					keycode[0] = conv_table[chr][1];
 8000974:	7cbb      	ldrb	r3, [r7, #18]
 8000976:	4a20      	ldr	r2, [pc, #128]	@ (80009f8 <hid_task+0x150>)
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	713b      	strb	r3, [r7, #4]
					tud_hid_n_keyboard_report(ITF_NUM_KEYBOARD, report_id, modifier, keycode);
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	7ffa      	ldrb	r2, [r7, #31]
 8000984:	7cf9      	ldrb	r1, [r7, #19]
 8000986:	2000      	movs	r0, #0
 8000988:	f002 fd48 	bl	800341c <tud_hid_n_keyboard_report>
					has_keyboard_key = true;
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <hid_task+0x148>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
					index++;
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <hid_task+0x14c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a16      	ldr	r2, [pc, #88]	@ (80009f4 <hid_task+0x14c>)
 800099a:	6013      	str	r3, [r2, #0]
					if (index >= textLen) {
 800099c:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <hid_task+0x14c>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <hid_task+0x144>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d318      	bcc.n	80009da <hid_task+0x132>
						typing = false;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <hid_task+0x13c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
						index = 0;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <hid_task+0x14c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	e011      	b.n	80009da <hid_task+0x132>
					}
				}
			} else {
				if (has_keyboard_key) {
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <hid_task+0x148>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <hid_task+0x128>
					modifier = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	77fb      	strb	r3, [r7, #31]
					tud_hid_n_keyboard_report(ITF_NUM_KEYBOARD, report_id, modifier,
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	7ffa      	ldrb	r2, [r7, #31]
 80009c8:	7cf9      	ldrb	r1, [r7, #19]
 80009ca:	2000      	movs	r0, #0
 80009cc:	f002 fd26 	bl	800341c <tud_hid_n_keyboard_report>
							empty_key);
				}
				has_keyboard_key = false;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <hid_task+0x148>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e000      	b.n	80009da <hid_task+0x132>
		return; // not enough time
 80009d8:	bf00      	nop
			}
		}
	}
}
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000588 	.word	0x20000588
 80009e4:	2000058c 	.word	0x2000058c
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000590 	.word	0x20000590
 80009f0:	20000594 	.word	0x20000594
 80009f4:	20000598 	.word	0x20000598
 80009f8:	08008adc 	.word	0x08008adc

080009fc <tud_hid_set_protocol_cb>:

// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TODO set a indicator for user
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <tud_hid_report_complete_cb>:

// Invoked when sent REPORT successfully to host
// Application can use this to send the next report
// Note: For composite reports, report[0] is report ID
void tud_hid_report_complete_cb(uint8_t instance, uint8_t const* report, uint16_t len)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report;
  (void) len;

  // nothing to do
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	460b      	mov	r3, r1
 8000a42:	71bb      	strb	r3, [r7, #6]
 8000a44:	4613      	mov	r3, r2
 8000a46:	717b      	strb	r3, [r7, #5]
  (void) report_id;
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	460b      	mov	r3, r1
 8000a66:	71bb      	strb	r3, [r7, #6]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	717b      	strb	r3, [r7, #5]
  (void) report_id;

  // keyboard interface
//  if (instance == ITF_NUM_KEYBOARD)
	  if (instance == 0)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d11d      	bne.n	8000aae <tud_hid_set_report_cb+0x56>
  {
    // Set keyboard LED e.g Capslock, Numlock etc...
    if (report_type == HID_REPORT_TYPE_OUTPUT)
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d11a      	bne.n	8000aae <tud_hid_set_report_cb+0x56>
    {
      // bufsize should be (at least) 1
      if ( bufsize < 1 ) return;
 8000a78:	8b3b      	ldrh	r3, [r7, #24]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d016      	beq.n	8000aac <tud_hid_set_report_cb+0x54>

      uint8_t const kbd_leds = buffer[0];
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	73fb      	strb	r3, [r7, #15]

      if (kbd_leds & KEYBOARD_LED_CAPSLOCK)
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <tud_hid_set_report_cb+0x44>
      {
        // Capslock On: disable blink, turn led on
        blink_interval_ms = 0;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <tud_hid_set_report_cb+0x5c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
        board_led_write(true);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 f951 	bl	8000d3c <board_led_write>
 8000a9a:	e008      	b.n	8000aae <tud_hid_set_report_cb+0x56>
      }else
      {
        // Caplocks Off: back to normal blink
        board_led_write(false);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f94d 	bl	8000d3c <board_led_write>
        blink_interval_ms = BLINK_MOUNTED;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <tud_hid_set_report_cb+0x5c>)
 8000aa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e000      	b.n	8000aae <tud_hid_set_report_cb+0x56>
      if ( bufsize < 1 ) return;
 8000aac:	bf00      	nop
      }
    }
  }
}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000040 	.word	0x20000040

08000ab8 <led_blinking_task>:

//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	static uint32_t start_ms = 0;
	static bool led_state = false;

	// Blink every interval ms
	if (board_millis() - start_ms < blink_interval_ms)
 8000abc:	f000 f99a 	bl	8000df4 <board_millis>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <led_blinking_task+0x4c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1ad2      	subs	r2, r2, r3
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <led_blinking_task+0x50>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d317      	bcc.n	8000b00 <led_blinking_task+0x48>
		return; // not enough time
	start_ms += blink_interval_ms;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <led_blinking_task+0x4c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <led_blinking_task+0x50>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <led_blinking_task+0x4c>)
 8000adc:	6013      	str	r3, [r2, #0]

	board_led_write(led_state);
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <led_blinking_task+0x54>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f92a 	bl	8000d3c <board_led_write>
	led_state = 1 - led_state; // toggle
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <led_blinking_task+0x54>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	f1c3 0301 	rsb	r3, r3, #1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <led_blinking_task+0x54>)
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e000      	b.n	8000b02 <led_blinking_task+0x4a>
		return; // not enough time
 8000b00:	bf00      	nop
}
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000059c 	.word	0x2000059c
 8000b08:	20000040 	.word	0x20000040
 8000b0c:	200005a0 	.word	0x200005a0

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b8c:	d13a      	bne.n	8000c04 <HAL_PCD_MspInit+0x98>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <HAL_PCD_MspInit+0xa0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a1d      	ldr	r2, [pc, #116]	@ (8000c0c <HAL_PCD_MspInit+0xa0>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_PCD_MspInit+0xa0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000baa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <HAL_PCD_MspInit+0xa4>)
 8000bc8:	f000 fb80 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <HAL_PCD_MspInit+0xa0>)
 8000bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <HAL_PCD_MspInit+0xa0>)
 8000bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_PCD_MspInit+0xa0>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_PCD_MspInit+0xa0>)
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <HAL_PCD_MspInit+0xa0>)
 8000bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2043      	movs	r0, #67	@ 0x43
 8000bfa:	f000 fb30 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000bfe:	2043      	movs	r0, #67	@ 0x43
 8000c00:	f000 fb49 	bl	8001296 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	@ 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <OTG_FS_IRQHandler>:
//#include "board.h"

//--------------------------------------------------------------------+
// Forward USB interrupt events to TinyUSB IRQ Handler
//--------------------------------------------------------------------+
void OTG_FS_IRQHandler(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  tusb_int_handler(0, true);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f007 fd60 	bl	8008750 <tusb_int_handler>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <myboard_usb_get_serial>:
// Board porting API
//--------------------------------------------------------------------+

// Get USB Serial number string from unique ID if available. Return number of character.
// Input is string descriptor from index 1 (index 0 is type + len)
size_t myboard_usb_get_serial(uint16_t desc_str1[], size_t max_chars) {
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b08f      	sub	sp, #60	@ 0x3c
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint8_t uid[16] TU_ATTR_ALIGNED(4);
  size_t uid_len;

  if ( 1 ) {
    uid_len = board_get_unique_id(uid, sizeof(uid));
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f871 	bl	8000d8c <board_get_unique_id>
 8000caa:	6378      	str	r0, [r7, #52]	@ 0x34
    uid32[0] = 0x67452301;
    uid32[1] = 0xEFCDAB89;
    uid_len = 8;
  }

  if ( uid_len > max_chars / 2 ) uid_len = max_chars / 2;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	085b      	lsrs	r3, r3, #1
 8000cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d902      	bls.n	8000cbc <myboard_usb_get_serial+0x28>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	085b      	lsrs	r3, r3, #1
 8000cba:	637b      	str	r3, [r7, #52]	@ 0x34

  for ( size_t i = 0; i < uid_len; i++ ) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8000cc0:	e030      	b.n	8000d24 <myboard_usb_get_serial+0x90>
    for ( size_t j = 0; j < 2; j++ ) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cc6:	e027      	b.n	8000d18 <myboard_usb_get_serial+0x84>
      const char nibble_to_hex[16] = {
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <myboard_usb_get_serial+0xa4>)
 8000cca:	f107 0408 	add.w	r4, r7, #8
 8000cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
      };
      uint8_t const nibble = (uid[i] >> (j * 4)) & 0xf;
 8000cd4:	f107 0218 	add.w	r2, r7, #24
 8000cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	fa42 f303 	asr.w	r3, r2, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      desc_str1[i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 8000cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000cf6:	3338      	adds	r3, #56	@ 0x38
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 1c30 	ldrb.w	r1, [r3, #-48]
 8000cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d00:	005a      	lsls	r2, r3, #1
 8000d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	3301      	adds	r3, #1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	460a      	mov	r2, r1
 8000d10:	801a      	strh	r2, [r3, #0]
    for ( size_t j = 0; j < 2; j++ ) {
 8000d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d14:	3301      	adds	r3, #1
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d9d4      	bls.n	8000cc8 <myboard_usb_get_serial+0x34>
  for ( size_t i = 0; i < uid_len; i++ ) {
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d20:	3301      	adds	r3, #1
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d3ca      	bcc.n	8000cc2 <myboard_usb_get_serial+0x2e>
    }
  }

  return 2 * uid_len;
 8000d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d2e:	005b      	lsls	r3, r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	373c      	adds	r7, #60	@ 0x3c
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	08008a9c 	.word	0x08008a9c

08000d3c <board_led_write>:

void board_led_write(bool state) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  board_pindef_t* pindef = &board_pindef[PINID_LED];
  GPIO_PinState pin_state = state == pindef->active_state ? GPIO_PIN_SET : GPIO_PIN_RESET;
  HAL_GPIO_WritePin(pindef->port, pindef->pin_init.Pin, pin_state);
#else
  static GPIO_PinState last_pin_state = GPIO_PIN_RESET;
  GPIO_PinState pin_state = state == last_pin_state ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <board_led_write+0x30>)
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	bf0c      	ite	eq
 8000d50:	2301      	moveq	r3, #1
 8000d52:	2300      	movne	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(UserLED_GPIO_Port, UserLED_Pin, pin_state);
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <board_led_write+0x34>)
 8000d60:	f000 fc68 	bl	8001634 <HAL_GPIO_WritePin>
#endif
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200005a8 	.word	0x200005a8
 8000d70:	40020000 	.word	0x40020000

08000d74 <board_button_read>:

uint32_t board_button_read(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
#ifdef PINID_BUTTON
  board_pindef_t* pindef = &board_pindef[PINID_BUTTON];
  return pindef->active_state == HAL_GPIO_ReadPin(pindef->port, pindef->pin_init.Pin);
#else
  return HAL_GPIO_ReadPin(UserBTN_GPIO_Port, UserBTN_Pin);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <board_button_read+0x14>)
 8000d7c:	f000 fc42 	bl	8001604 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
#endif
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40020000 	.word	0x40020000

08000d8c <board_get_unique_id>:

size_t board_get_unique_id(uint8_t id[], size_t max_len) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  (void) max_len;
  volatile uint32_t *stm32_uuid = (volatile uint32_t *) UID_BASE;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <board_get_unique_id+0x48>)
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t *id32 = (uint32_t *) (uintptr_t) id;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	613b      	str	r3, [r7, #16]
  uint8_t const len = 12;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	73fb      	strb	r3, [r7, #15]

  id32[0] = stm32_uuid[0];
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	601a      	str	r2, [r3, #0]
  id32[1] = stm32_uuid[1];
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	1d1a      	adds	r2, r3, #4
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	3304      	adds	r3, #4
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	601a      	str	r2, [r3, #0]
  id32[2] = stm32_uuid[2];
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f103 0208 	add.w	r2, r3, #8
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	601a      	str	r2, [r3, #0]

  return len;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	371c      	adds	r7, #28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	1fff7a10 	.word	0x1fff7a10

08000dd8 <SysTick_Handler>:

#if CFG_TUSB_OS == OPT_OS_NONE
volatile uint32_t system_ticks = 0;

void SysTick_Handler(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000ddc:	f000 f920 	bl	8001020 <HAL_IncTick>
  system_ticks++;
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <SysTick_Handler+0x18>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a02      	ldr	r2, [pc, #8]	@ (8000df0 <SysTick_Handler+0x18>)
 8000de8:	6013      	str	r3, [r2, #0]
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200005a4 	.word	0x200005a4

08000df4 <board_millis>:

uint32_t board_millis(void) {
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return system_ticks;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <board_millis+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200005a4 	.word	0x200005a4

08000e0c <HardFault_Handler>:

#endif

void HardFault_Handler(void) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  __asm("BKPT #0\n");
 8000e10:	be00      	bkpt	0x0000
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <tud_descriptor_device_cb>:
    .bNumConfigurations = 0x01
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const *tud_descriptor_device_cb(void) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8000e20:	4b02      	ldr	r3, [pc, #8]	@ (8000e2c <tud_descriptor_device_cb+0x10>)
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	08008bec 	.word	0x08008bec

08000e30 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
//  return (instance == ITF_NUM_KEYBOARD) ? desc_hid_keyboard_report : 0;
	return desc_hid_keyboard_report;
 8000e3a:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <tud_hid_descriptor_report_cb+0x18>)
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	08008c00 	.word	0x08008c00

08000e4c <tud_descriptor_configuration_cb>:
#endif// highspeed

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ? desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 8000e56:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	08008c44 	.word	0x08008c44

08000e68 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <tud_descriptor_string_cb+0x1c>
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d009      	beq.n	8000e96 <tud_descriptor_string_cb+0x2e>
 8000e82:	e00f      	b.n	8000ea4 <tud_descriptor_string_cb+0x3c>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000e84:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <tud_descriptor_string_cb+0xb4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <tud_descriptor_string_cb+0xb8>)
 8000e8e:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
      break;
 8000e94:	e031      	b.n	8000efa <tud_descriptor_string_cb+0x92>

    case STRID_SERIAL:
      chr_count = myboard_usb_get_serial(_desc_str + 1, 32);
 8000e96:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <tud_descriptor_string_cb+0xbc>)
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fefa 	bl	8000c94 <myboard_usb_get_serial>
 8000ea0:	6178      	str	r0, [r7, #20]
      break;
 8000ea2:	e02a      	b.n	8000efa <tud_descriptor_string_cb+0x92>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) { return NULL; }
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d901      	bls.n	8000eae <tud_descriptor_string_cb+0x46>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e031      	b.n	8000f12 <tud_descriptor_string_cb+0xaa>

      const char *str = string_desc_arr[index];
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f1c <tud_descriptor_string_cb+0xb4>)
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	60fb      	str	r3, [r7, #12]

      // Cap at max char
      chr_count = strlen(str);
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff f985 	bl	80001c8 <strlen>
 8000ebe:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) { chr_count = max_count; }
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d901      	bls.n	8000ed0 <tud_descriptor_string_cb+0x68>
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	e00c      	b.n	8000ef0 <tud_descriptor_string_cb+0x88>
        _desc_str[1 + i] = str[i];
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4413      	add	r3, r2
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <tud_descriptor_string_cb+0xb8>)
 8000ee6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	3301      	adds	r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3ee      	bcc.n	8000ed6 <tud_descriptor_string_cb+0x6e>
      }
      break;
 8000ef8:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	3301      	adds	r3, #1
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <tud_descriptor_string_cb+0xb8>)
 8000f0e:	801a      	strh	r2, [r3, #0]
  return _desc_str;
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <tud_descriptor_string_cb+0xb8>)
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000048 	.word	0x20000048
 8000f20:	200005ac 	.word	0x200005ac
 8000f24:	200005ae 	.word	0x200005ae

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f2c:	f7ff fe98 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480c      	ldr	r0, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f32:	490d      	ldr	r1, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f48:	4c0a      	ldr	r4, [pc, #40]	@ (8000f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f007 fd61 	bl	8008a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fad3 	bl	8000504 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f6c:	08008e48 	.word	0x08008e48
  ldr r2, =_sbss
 8000f70:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f74:	20000974 	.word	0x20000974

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f94f 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fdb4 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f967 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f92f 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000044 	.word	0x20000044
 8001018:	20000064 	.word	0x20000064
 800101c:	20000060 	.word	0x20000060

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000064 	.word	0x20000064
 8001044:	200005f0 	.word	0x200005f0

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200005f0 	.word	0x200005f0

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000064 	.word	0x20000064

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	@ (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	@ (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	@ (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e16b      	b.n	80015c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 815a 	bne.w	80015ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80b4 	beq.w	80015ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b60      	ldr	r3, [pc, #384]	@ (80015d8 <HAL_GPIO_Init+0x30c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	4a5f      	ldr	r2, [pc, #380]	@ (80015d8 <HAL_GPIO_Init+0x30c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001460:	6453      	str	r3, [r2, #68]	@ 0x44
 8001462:	4b5d      	ldr	r3, [pc, #372]	@ (80015d8 <HAL_GPIO_Init+0x30c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a5b      	ldr	r2, [pc, #364]	@ (80015dc <HAL_GPIO_Init+0x310>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	@ (80015e0 <HAL_GPIO_Init+0x314>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d02b      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a51      	ldr	r2, [pc, #324]	@ (80015e4 <HAL_GPIO_Init+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a50      	ldr	r2, [pc, #320]	@ (80015e8 <HAL_GPIO_Init+0x31c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4f      	ldr	r2, [pc, #316]	@ (80015ec <HAL_GPIO_Init+0x320>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4e      	ldr	r2, [pc, #312]	@ (80015f0 <HAL_GPIO_Init+0x324>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4d      	ldr	r2, [pc, #308]	@ (80015f4 <HAL_GPIO_Init+0x328>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4c      	ldr	r2, [pc, #304]	@ (80015f8 <HAL_GPIO_Init+0x32c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4b      	ldr	r2, [pc, #300]	@ (80015fc <HAL_GPIO_Init+0x330>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e00e      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	@ (80015dc <HAL_GPIO_Init+0x310>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <HAL_GPIO_Init+0x334>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	@ (8001600 <HAL_GPIO_Init+0x334>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <HAL_GPIO_Init+0x334>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae90 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	@ 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af02      	add	r7, sp, #8
 800166c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e101      	b.n	800187c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fa6a 	bl	8000b6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2203      	movs	r2, #3
 800169c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016a6:	d102      	bne.n	80016ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fdae 	bl	8002214 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7c1a      	ldrb	r2, [r3, #16]
 80016c0:	f88d 2000 	strb.w	r2, [sp]
 80016c4:	3304      	adds	r3, #4
 80016c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c8:	f000 fd40 	bl	800214c <USB_CoreInit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2202      	movs	r2, #2
 80016d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0ce      	b.n	800187c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fda6 	bl	8002236 <USB_SetCurrentMode>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0bf      	b.n	800187c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e04a      	b.n	8001798 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3315      	adds	r3, #21
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3314      	adds	r3, #20
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	b298      	uxth	r0, r3
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	332e      	adds	r3, #46	@ 0x2e
 800173e:	4602      	mov	r2, r0
 8001740:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3318      	adds	r3, #24
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	331c      	adds	r3, #28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	3320      	adds	r3, #32
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3324      	adds	r3, #36	@ 0x24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	3301      	adds	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	791b      	ldrb	r3, [r3, #4]
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3af      	bcc.n	8001702 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e044      	b.n	8001832 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	3301      	adds	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	791b      	ldrb	r3, [r3, #4]
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	429a      	cmp	r2, r3
 800183a:	d3b5      	bcc.n	80017a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7c1a      	ldrb	r2, [r3, #16]
 8001844:	f88d 2000 	strb.w	r2, [sp]
 8001848:	3304      	adds	r3, #4
 800184a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184c:	f000 fd40 	bl	80022d0 <USB_DevInit>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00c      	b.n	800187c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f000 ff08 	bl	800268a <USB_DevDisconnect>

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e267      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d075      	beq.n	800198e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018a2:	4b88      	ldr	r3, [pc, #544]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d00c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ae:	4b85      	ldr	r3, [pc, #532]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d112      	bne.n	80018e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ba:	4b82      	ldr	r3, [pc, #520]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018c6:	d10b      	bne.n	80018e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d05b      	beq.n	800198c <HAL_RCC_OscConfig+0x108>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d157      	bne.n	800198c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e242      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0x74>
 80018ea:	4b76      	ldr	r3, [pc, #472]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a75      	ldr	r2, [pc, #468]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e01d      	b.n	8001934 <HAL_RCC_OscConfig+0xb0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x98>
 8001902:	4b70      	ldr	r3, [pc, #448]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6f      	ldr	r2, [pc, #444]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a6c      	ldr	r2, [pc, #432]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0xb0>
 800191c:	4b69      	ldr	r3, [pc, #420]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a68      	ldr	r2, [pc, #416]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b66      	ldr	r3, [pc, #408]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a65      	ldr	r2, [pc, #404]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 800192e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fb84 	bl	8001048 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff fb80 	bl	8001048 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	@ 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e207      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b5b      	ldr	r3, [pc, #364]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0xc0>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fb70 	bl	8001048 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fb6c 	bl	8001048 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	@ 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1f3      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	4b51      	ldr	r3, [pc, #324]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0xe8>
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800199a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d11c      	bne.n	80019ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b44      	ldr	r3, [pc, #272]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d116      	bne.n	80019ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x152>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e1c7      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4937      	ldr	r1, [pc, #220]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	e03a      	b.n	8001a62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f4:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_RCC_OscConfig+0x244>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fb25 	bl	8001048 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fb21 	bl	8001048 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1a8      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4925      	ldr	r1, [pc, #148]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <HAL_RCC_OscConfig+0x244>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fb04 	bl	8001048 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff fb00 	bl	8001048 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e187      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d036      	beq.n	8001adc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d016      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_RCC_OscConfig+0x248>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fae4 	bl	8001048 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff fae0 	bl	8001048 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e167      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_RCC_OscConfig+0x240>)
 8001a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x200>
 8001aa2:	e01b      	b.n	8001adc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_RCC_OscConfig+0x248>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff facd 	bl	8001048 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	e00e      	b.n	8001ad0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fac9 	bl	8001048 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d907      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e150      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	42470000 	.word	0x42470000
 8001acc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b88      	ldr	r3, [pc, #544]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ea      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8097 	beq.w	8001c18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b81      	ldr	r3, [pc, #516]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b7d      	ldr	r3, [pc, #500]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	4a7c      	ldr	r2, [pc, #496]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b77      	ldr	r3, [pc, #476]	@ (8001cf8 <HAL_RCC_OscConfig+0x474>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b74      	ldr	r3, [pc, #464]	@ (8001cf8 <HAL_RCC_OscConfig+0x474>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a73      	ldr	r2, [pc, #460]	@ (8001cf8 <HAL_RCC_OscConfig+0x474>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fa89 	bl	8001048 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff fa85 	bl	8001048 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e10c      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf8 <HAL_RCC_OscConfig+0x474>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2ea>
 8001b60:	4b64      	ldr	r3, [pc, #400]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b64:	4a63      	ldr	r2, [pc, #396]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b6c:	e01c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x324>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x30c>
 8001b76:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b82:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b86:	4a5b      	ldr	r2, [pc, #364]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x324>
 8001b90:	4b58      	ldr	r3, [pc, #352]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b94:	4a57      	ldr	r2, [pc, #348]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9c:	4b55      	ldr	r3, [pc, #340]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba0:	4a54      	ldr	r2, [pc, #336]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	f023 0304 	bic.w	r3, r3, #4
 8001ba6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d015      	beq.n	8001bdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff fa4a 	bl	8001048 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fa46 	bl	8001048 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e0cb      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	4b49      	ldr	r3, [pc, #292]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0ee      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x334>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fa34 	bl	8001048 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff fa30 	bl	8001048 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e0b5      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ee      	bne.n	8001be4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4b39      	ldr	r3, [pc, #228]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	4a38      	ldr	r2, [pc, #224]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80a1 	beq.w	8001d64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c22:	4b34      	ldr	r3, [pc, #208]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d05c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d141      	bne.n	8001cba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b31      	ldr	r3, [pc, #196]	@ (8001cfc <HAL_RCC_OscConfig+0x478>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fa04 	bl	8001048 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff fa00 	bl	8001048 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e087      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	4b27      	ldr	r3, [pc, #156]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	019b      	lsls	r3, r3, #6
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c84:	061b      	lsls	r3, r3, #24
 8001c86:	491b      	ldr	r1, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCC_OscConfig+0x478>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff f9d9 	bl	8001048 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff f9d5 	bl	8001048 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e05c      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x416>
 8001cb8:	e054      	b.n	8001d64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_RCC_OscConfig+0x478>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f9c2 	bl	8001048 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f9be 	bl	8001048 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e045      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x444>
 8001ce6:	e03d      	b.n	8001d64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e038      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x4ec>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d028      	beq.n	8001d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d121      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d11a      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d111      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0cc      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b68      	ldr	r3, [pc, #416]	@ (8001f2c <HAL_RCC_ClockConfig+0x1b8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d90c      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b65      	ldr	r3, [pc, #404]	@ (8001f2c <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b63      	ldr	r3, [pc, #396]	@ (8001f2c <HAL_RCC_ClockConfig+0x1b8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b8      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc8:	4b59      	ldr	r3, [pc, #356]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de0:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a52      	ldr	r2, [pc, #328]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b50      	ldr	r3, [pc, #320]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	494d      	ldr	r1, [pc, #308]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d044      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b47      	ldr	r3, [pc, #284]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d119      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b3f      	ldr	r3, [pc, #252]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e06f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b3b      	ldr	r3, [pc, #236]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e067      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b37      	ldr	r3, [pc, #220]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4934      	ldr	r1, [pc, #208]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e64:	f7ff f8f0 	bl	8001048 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff f8ec 	bl	8001048 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e04f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <HAL_RCC_ClockConfig+0x1b8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d20c      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e032      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4916      	ldr	r1, [pc, #88]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	490e      	ldr	r1, [pc, #56]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001efa:	f000 f821 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	490a      	ldr	r1, [pc, #40]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f850 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00
 8001f30:	40023800 	.word	0x40023800
 8001f34:	08008bdc 	.word	0x08008bdc
 8001f38:	20000044 	.word	0x20000044
 8001f3c:	20000060 	.word	0x20000060

08001f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f44:	b094      	sub	sp, #80	@ 0x50
 8001f46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f58:	4b79      	ldr	r3, [pc, #484]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d00d      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x40>
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	f200 80e1 	bhi.w	800212c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x34>
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d003      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f72:	e0db      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f74:	4b73      	ldr	r3, [pc, #460]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f78:	e0db      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f7a:	4b73      	ldr	r3, [pc, #460]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f7e:	e0d8      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f80:	4b6f      	ldr	r3, [pc, #444]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f96:	4b6a      	ldr	r3, [pc, #424]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	099b      	lsrs	r3, r3, #6
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	462b      	mov	r3, r5
 8001fb6:	f04f 0000 	mov.w	r0, #0
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	0159      	lsls	r1, r3, #5
 8001fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc4:	0150      	lsls	r0, r2, #5
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4621      	mov	r1, r4
 8001fcc:	1a51      	subs	r1, r2, r1
 8001fce:	6139      	str	r1, [r7, #16]
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	018b      	lsls	r3, r1, #6
 8001fe8:	4651      	mov	r1, sl
 8001fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fee:	4651      	mov	r1, sl
 8001ff0:	018a      	lsls	r2, r1, #6
 8001ff2:	4651      	mov	r1, sl
 8001ff4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ff8:	4659      	mov	r1, fp
 8001ffa:	eb63 0901 	sbc.w	r9, r3, r1
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800200a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800200e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002012:	4690      	mov	r8, r2
 8002014:	4699      	mov	r9, r3
 8002016:	4623      	mov	r3, r4
 8002018:	eb18 0303 	adds.w	r3, r8, r3
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	462b      	mov	r3, r5
 8002020:	eb49 0303 	adc.w	r3, r9, r3
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002032:	4629      	mov	r1, r5
 8002034:	024b      	lsls	r3, r1, #9
 8002036:	4621      	mov	r1, r4
 8002038:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800203c:	4621      	mov	r1, r4
 800203e:	024a      	lsls	r2, r1, #9
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002046:	2200      	movs	r2, #0
 8002048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800204a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800204c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002050:	f7fe f8c2 	bl	80001d8 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4613      	mov	r3, r2
 800205a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800205c:	e058      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205e:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x200>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	099b      	lsrs	r3, r3, #6
 8002064:	2200      	movs	r2, #0
 8002066:	4618      	mov	r0, r3
 8002068:	4611      	mov	r1, r2
 800206a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
 8002074:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002078:	4642      	mov	r2, r8
 800207a:	464b      	mov	r3, r9
 800207c:	f04f 0000 	mov.w	r0, #0
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	0159      	lsls	r1, r3, #5
 8002086:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800208a:	0150      	lsls	r0, r2, #5
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4641      	mov	r1, r8
 8002092:	ebb2 0a01 	subs.w	sl, r2, r1
 8002096:	4649      	mov	r1, r9
 8002098:	eb63 0b01 	sbc.w	fp, r3, r1
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020b0:	ebb2 040a 	subs.w	r4, r2, sl
 80020b4:	eb63 050b 	sbc.w	r5, r3, fp
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	00eb      	lsls	r3, r5, #3
 80020c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020c6:	00e2      	lsls	r2, r4, #3
 80020c8:	4614      	mov	r4, r2
 80020ca:	461d      	mov	r5, r3
 80020cc:	4643      	mov	r3, r8
 80020ce:	18e3      	adds	r3, r4, r3
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	464b      	mov	r3, r9
 80020d4:	eb45 0303 	adc.w	r3, r5, r3
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020e6:	4629      	mov	r1, r5
 80020e8:	028b      	lsls	r3, r1, #10
 80020ea:	4621      	mov	r1, r4
 80020ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f0:	4621      	mov	r1, r4
 80020f2:	028a      	lsls	r2, r1, #10
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020fa:	2200      	movs	r2, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	61fa      	str	r2, [r7, #28]
 8002100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002104:	f7fe f868 	bl	80001d8 <__aeabi_uldivmod>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4613      	mov	r3, r2
 800210e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x200>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	3301      	adds	r3, #1
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002120:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002124:	fbb2 f3f3 	udiv	r3, r2, r3
 8002128:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800212a:	e002      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x204>)
 800212e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002134:	4618      	mov	r0, r3
 8002136:	3750      	adds	r7, #80	@ 0x50
 8002138:	46bd      	mov	sp, r7
 800213a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	00f42400 	.word	0x00f42400
 8002148:	007a1200 	.word	0x007a1200

0800214c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800214c:	b084      	sub	sp, #16
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	f107 001c 	add.w	r0, r7, #28
 800215a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800215e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002162:	2b01      	cmp	r3, #1
 8002164:	d123      	bne.n	80021ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800217a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800218e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 faa0 	bl	80026e8 <USB_CoreReset>
 80021a8:	4603      	mov	r3, r0
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e01b      	b.n	80021e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa94 	bl	80026e8 <USB_CoreReset>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80021c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80021d8:	e005      	b.n	80021e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80021e6:	7fbb      	ldrb	r3, [r7, #30]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10b      	bne.n	8002204 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f043 0206 	orr.w	r2, r3, #6
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002210:	b004      	add	sp, #16
 8002212:	4770      	bx	lr

08002214 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 0201 	bic.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d115      	bne.n	8002284 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002264:	200a      	movs	r0, #10
 8002266:	f7fe fefb 	bl	8001060 <HAL_Delay>
      ms += 10U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	330a      	adds	r3, #10
 800226e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fa2b 	bl	80026cc <USB_GetMode>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	d01e      	beq.n	80022ba <USB_SetCurrentMode+0x84>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002280:	d9f0      	bls.n	8002264 <USB_SetCurrentMode+0x2e>
 8002282:	e01a      	b.n	80022ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d115      	bne.n	80022b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002296:	200a      	movs	r0, #10
 8002298:	f7fe fee2 	bl	8001060 <HAL_Delay>
      ms += 10U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	330a      	adds	r3, #10
 80022a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fa12 	bl	80026cc <USB_GetMode>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <USB_SetCurrentMode+0x84>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80022b2:	d9f0      	bls.n	8002296 <USB_SetCurrentMode+0x60>
 80022b4:	e001      	b.n	80022ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e005      	b.n	80022c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80022be:	d101      	bne.n	80022c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80022d0:	b084      	sub	sp, #16
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80022de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	e009      	b.n	8002304 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	3340      	adds	r3, #64	@ 0x40
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	3301      	adds	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b0e      	cmp	r3, #14
 8002308:	d9f2      	bls.n	80022f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800230a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11c      	bne.n	800234c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002336:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	639a      	str	r2, [r3, #56]	@ 0x38
 800234a:	e00b      	b.n	8002364 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800236a:	461a      	mov	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002370:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002374:	2b01      	cmp	r3, #1
 8002376:	d10d      	bne.n	8002394 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002380:	2100      	movs	r1, #0
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f968 	bl	8002658 <USB_SetDevSpeed>
 8002388:	e008      	b.n	800239c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800238a:	2101      	movs	r1, #1
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f963 	bl	8002658 <USB_SetDevSpeed>
 8002392:	e003      	b.n	800239c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002394:	2103      	movs	r1, #3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f95e 	bl	8002658 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800239c:	2110      	movs	r1, #16
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8fa 	bl	8002598 <USB_FlushTxFifo>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f924 	bl	80025fc <USB_FlushRxFifo>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c4:	461a      	mov	r2, r3
 80023c6:	2300      	movs	r3, #0
 80023c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023d0:	461a      	mov	r2, r3
 80023d2:	2300      	movs	r3, #0
 80023d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023dc:	461a      	mov	r2, r3
 80023de:	2300      	movs	r3, #0
 80023e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e043      	b.n	8002470 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023fe:	d118      	bne.n	8002432 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002412:	461a      	mov	r2, r3
 8002414:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e013      	b.n	8002444 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002428:	461a      	mov	r2, r3
 800242a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e008      	b.n	8002444 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800243e:	461a      	mov	r2, r3
 8002440:	2300      	movs	r3, #0
 8002442:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002450:	461a      	mov	r2, r3
 8002452:	2300      	movs	r3, #0
 8002454:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002462:	461a      	mov	r2, r3
 8002464:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002468:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	3301      	adds	r3, #1
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002474:	461a      	mov	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4293      	cmp	r3, r2
 800247a:	d3b5      	bcc.n	80023e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e043      	b.n	800250a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002494:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002498:	d118      	bne.n	80024cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ac:	461a      	mov	r2, r3
 80024ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e013      	b.n	80024de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e008      	b.n	80024de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	2300      	movs	r3, #0
 80024dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ea:	461a      	mov	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002502:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	3301      	adds	r3, #1
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800250e:	461a      	mov	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4293      	cmp	r3, r2
 8002514:	d3b5      	bcc.n	8002482 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002528:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002536:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002538:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f043 0210 	orr.w	r2, r3, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <USB_DevInit+0x2c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002558:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f043 0208 	orr.w	r2, r3, #8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800256c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002584:	7dfb      	ldrb	r3, [r7, #23]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002590:	b004      	add	sp, #16
 8002592:	4770      	bx	lr
 8002594:	803c3800 	.word	0x803c3800

08002598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80025b2:	d901      	bls.n	80025b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e01b      	b.n	80025f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	daf2      	bge.n	80025a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	019b      	lsls	r3, r3, #6
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3301      	adds	r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80025dc:	d901      	bls.n	80025e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e006      	b.n	80025f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d0f0      	beq.n	80025d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002614:	d901      	bls.n	800261a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e018      	b.n	800264c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	daf2      	bge.n	8002608 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2210      	movs	r2, #16
 800262a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002638:	d901      	bls.n	800263e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e006      	b.n	800264c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b10      	cmp	r3, #16
 8002648:	d0f0      	beq.n	800262c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80026a4:	f023 0303 	bic.w	r3, r3, #3
 80026a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0301 	and.w	r3, r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002700:	d901      	bls.n	8002706 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e022      	b.n	800274c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	daf2      	bge.n	80026f4 <USB_CoreReset+0xc>

  count = 10U;
 800270e:	230a      	movs	r3, #10
 8002710:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8002712:	e002      	b.n	800271a <USB_CoreReset+0x32>
  {
    count--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3b01      	subs	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3301      	adds	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002738:	d901      	bls.n	800273e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e006      	b.n	800274c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d0f0      	beq.n	800272c <USB_CoreReset+0x44>

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	22a8      	movs	r2, #168	@ 0xa8
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	4a32      	ldr	r2, [pc, #200]	@ (8002838 <_prep_out_transaction+0xe0>)
 8002770:	4413      	add	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8002774:	79fa      	ldrb	r2, [r7, #7]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4a2f      	ldr	r2, [pc, #188]	@ (800283c <_prep_out_transaction+0xe4>)
 8002780:	4413      	add	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8002784:	f002 f87e 	bl	8004884 <tud_mounted>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <_prep_out_transaction+0x4a>
 800278e:	f002 f88b 	bl	80048a8 <tud_suspended>
 8002792:	4603      	mov	r3, r0
 8002794:	f083 0301 	eor.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <_prep_out_transaction+0x4a>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <_prep_out_transaction+0x4c>
 80027a2:	2300      	movs	r3, #0
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d103      	bne.n	80027bc <_prep_out_transaction+0x64>
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	78db      	ldrb	r3, [r3, #3]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <_prep_out_transaction+0x68>
 80027bc:	2300      	movs	r3, #0
 80027be:	e037      	b.n	8002830 <_prep_out_transaction+0xd8>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	3310      	adds	r3, #16
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 fee6 	bl	8004596 <tu_fifo_remaining>
 80027ca:	4603      	mov	r3, r0
 80027cc:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80027d2:	d801      	bhi.n	80027d8 <_prep_out_transaction+0x80>
 80027d4:	2300      	movs	r3, #0
 80027d6:	e02b      	b.n	8002830 <_prep_out_transaction+0xd8>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(p_cdc->rhport, p_cdc->ep_out));
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	78db      	ldrb	r3, [r3, #3]
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f003 fc88 	bl	80060f8 <usbd_edpt_claim>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <_prep_out_transaction+0xa0>
 80027f4:	2300      	movs	r3, #0
 80027f6:	e01b      	b.n	8002830 <_prep_out_transaction+0xd8>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	3310      	adds	r3, #16
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 feca 	bl	8004596 <tu_fifo_remaining>
 8002802:	4603      	mov	r3, r0
 8002804:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8002806:	897b      	ldrh	r3, [r7, #10]
 8002808:	2b3f      	cmp	r3, #63	@ 0x3f
 800280a:	d908      	bls.n	800281e <_prep_out_transaction+0xc6>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	78d9      	ldrb	r1, [r3, #3]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	7df8      	ldrb	r0, [r7, #23]
 8002814:	2340      	movs	r3, #64	@ 0x40
 8002816:	f003 fcbf 	bl	8006198 <usbd_edpt_xfer>
 800281a:	4603      	mov	r3, r0
 800281c:	e008      	b.n	8002830 <_prep_out_transaction+0xd8>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(p_cdc->rhport, p_cdc->ep_out);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	78db      	ldrb	r3, [r3, #3]
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f003 fc8d 	bl	8006148 <usbd_edpt_release>
    return false;
 800282e:	2300      	movs	r3, #0
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200005f4 	.word	0x200005f4
 800283c:	2000069c 	.word	0x2000069c

08002840 <tud_cdc_n_notify_uart_state>:
void tud_cdc_n_get_line_coding(uint8_t itf, cdc_line_coding_t* coding) {
  (*coding) = _cdcd_itf[itf].line_coding;
}

#if CFG_TUD_CDC_NOTIFY
bool tud_cdc_n_notify_uart_state (uint8_t itf, const cdc_notify_uart_state_t *state) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	22a8      	movs	r2, #168	@ 0xa8
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	4a32      	ldr	r2, [pc, #200]	@ (8002920 <tud_cdc_n_notify_uart_state+0xe0>)
 8002856:	4413      	add	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	4a2f      	ldr	r2, [pc, #188]	@ (8002924 <tud_cdc_n_notify_uart_state+0xe4>)
 8002866:	4413      	add	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	f002 f80b 	bl	8004884 <tud_mounted>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d009      	beq.n	8002888 <tud_cdc_n_notify_uart_state+0x48>
 8002874:	f002 f818 	bl	80048a8 <tud_suspended>
 8002878:	4603      	mov	r3, r0
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <tud_cdc_n_notify_uart_state+0x48>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <tud_cdc_n_notify_uart_state+0x4a>
 8002888:	2300      	movs	r3, #0
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
  TU_VERIFY(tud_ready() && p_cdc->ep_notify != 0);
 8002890:	f083 0301 	eor.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <tud_cdc_n_notify_uart_state+0x62>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	791b      	ldrb	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <tud_cdc_n_notify_uart_state+0x66>
 80028a2:	2300      	movs	r3, #0
 80028a4:	e037      	b.n	8002916 <tud_cdc_n_notify_uart_state+0xd6>
  TU_VERIFY(usbd_edpt_claim(p_cdc->rhport, p_cdc->ep_notify));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	791b      	ldrb	r3, [r3, #4]
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f003 fc21 	bl	80060f8 <usbd_edpt_claim>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <tud_cdc_n_notify_uart_state+0x86>
 80028c2:	2300      	movs	r3, #0
 80028c4:	e027      	b.n	8002916 <tud_cdc_n_notify_uart_state+0xd6>

  cdc_notify_msg_t* notify_msg = &p_epbuf->epnotify;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	3380      	adds	r3, #128	@ 0x80
 80028ca:	60fb      	str	r3, [r7, #12]
  notify_msg->request.bmRequestType = CDC_REQ_TYPE_NOTIF;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	22a1      	movs	r2, #161	@ 0xa1
 80028d0:	701a      	strb	r2, [r3, #0]
  notify_msg->request.bRequest = CDC_NOTIF_SERIAL_STATE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	705a      	strb	r2, [r3, #1]
  notify_msg->request.wValue = 0;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	709a      	strb	r2, [r3, #2]
 80028de:	2200      	movs	r2, #0
 80028e0:	70da      	strb	r2, [r3, #3]
  notify_msg->request.wIndex = p_cdc->itf_num;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	809a      	strh	r2, [r3, #4]
  notify_msg->request.wLength = sizeof(cdc_notify_uart_state_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f042 0202 	orr.w	r2, r2, #2
 80028f4:	719a      	strb	r2, [r3, #6]
 80028f6:	2200      	movs	r2, #0
 80028f8:	71da      	strb	r2, [r3, #7]
  notify_msg->serial_state = *state;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	3308      	adds	r3, #8
 8002900:	8812      	ldrh	r2, [r2, #0]
 8002902:	801a      	strh	r2, [r3, #0]

  return usbd_edpt_xfer(p_cdc->rhport, p_cdc->ep_notify, (uint8_t *)notify_msg, 8 + sizeof(cdc_notify_uart_state_t));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	7818      	ldrb	r0, [r3, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	7919      	ldrb	r1, [r3, #4]
 800290c:	230a      	movs	r3, #10
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f003 fc42 	bl	8006198 <usbd_edpt_xfer>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200005f4 	.word	0x200005f4
 8002924:	2000069c 	.word	0x2000069c

08002928 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	22a8      	movs	r2, #168	@ 0xa8
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	3310      	adds	r3, #16
 800293c:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <tud_cdc_n_available+0x28>)
 800293e:	4413      	add	r3, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fdb3 	bl	80044ac <tu_fifo_count>
 8002946:	4603      	mov	r3, r0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200005f4 	.word	0x200005f4

08002954 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	22a8      	movs	r2, #168	@ 0xa8
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	4a0f      	ldr	r2, [pc, #60]	@ (80029a8 <tud_cdc_n_read+0x54>)
 800296c:	4413      	add	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f103 0010 	add.w	r0, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800297c:	4293      	cmp	r3, r2
 800297e:	d802      	bhi.n	8002986 <tud_cdc_n_read+0x32>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	b29b      	uxth	r3, r3
 8002984:	e001      	b.n	800298a <tud_cdc_n_read+0x36>
 8002986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800298a:	461a      	mov	r2, r3
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	f001 fe5e 	bl	800464e <tu_fifo_read_n>
 8002992:	4603      	mov	r3, r0
 8002994:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fedd 	bl	8002758 <_prep_out_transaction>
  return num_read;
 800299e:	693b      	ldr	r3, [r7, #16]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	200005f4 	.word	0x200005f4

080029ac <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	22a8      	movs	r2, #168	@ 0xa8
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <tud_cdc_n_write+0x64>)
 80029c4:	4413      	add	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f103 001c 	add.w	r0, r3, #28
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d802      	bhi.n	80029de <tud_cdc_n_write+0x32>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	e001      	b.n	80029e2 <tud_cdc_n_write+0x36>
 80029de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029e2:	461a      	mov	r2, r3
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	f001 fe99 	bl	800471c <tu_fifo_write_n>
 80029ea:	4603      	mov	r3, r0
 80029ec:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	331c      	adds	r3, #28
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 fd5a 	bl	80044ac <tu_fifo_count>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80029fc:	d903      	bls.n	8002a06 <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f807 	bl	8002a14 <tud_cdc_n_write_flush>
  }

  return wr_count;
 8002a06:	8a7b      	ldrh	r3, [r7, #18]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200005f4 	.word	0x200005f4

08002a14 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	22a8      	movs	r2, #168	@ 0xa8
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	4a3b      	ldr	r2, [pc, #236]	@ (8002b14 <tud_cdc_n_write_flush+0x100>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8002a2c:	79fa      	ldrb	r2, [r7, #7]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4a38      	ldr	r2, [pc, #224]	@ (8002b18 <tud_cdc_n_write_flush+0x104>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	f001 ff22 	bl	8004884 <tud_mounted>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <tud_cdc_n_write_flush+0x46>
 8002a46:	f001 ff2f 	bl	80048a8 <tud_suspended>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f083 0301 	eor.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <tud_cdc_n_write_flush+0x46>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <tud_cdc_n_write_flush+0x48>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
  TU_VERIFY(tud_ready(), 0); // Skip if usb is not ready yet
 8002a62:	f083 0301 	eor.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <tud_cdc_n_write_flush+0x5c>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e04d      	b.n	8002b0c <tud_cdc_n_write_flush+0xf8>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	331c      	adds	r3, #28
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 fd19 	bl	80044ac <tu_fifo_count>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <tud_cdc_n_write_flush+0x70>
    return 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e043      	b.n	8002b0c <tud_cdc_n_write_flush+0xf8>
  }

  TU_VERIFY(usbd_edpt_claim(p_cdc->rhport, p_cdc->ep_in), 0); // Claim the endpoint
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	789b      	ldrb	r3, [r3, #2]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f003 fb32 	bl	80060f8 <usbd_edpt_claim>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f083 0301 	eor.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <tud_cdc_n_write_flush+0x90>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e033      	b.n	8002b0c <tud_cdc_n_write_flush+0xf8>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f103 001c 	add.w	r0, r3, #28
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	3340      	adds	r3, #64	@ 0x40
 8002aae:	2240      	movs	r2, #64	@ 0x40
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f001 fdcc 	bl	800464e <tu_fifo_read_n>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	81fb      	strh	r3, [r7, #14]

  if (count) {
 8002aba:	89fb      	ldrh	r3, [r7, #14]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01c      	beq.n	8002afa <tud_cdc_n_write_flush+0xe6>
    TU_ASSERT(usbd_edpt_xfer(p_cdc->rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	7818      	ldrb	r0, [r3, #0]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	7899      	ldrb	r1, [r3, #2]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	f003 fb62 	bl	8006198 <usbd_edpt_xfer>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f083 0301 	eor.w	r3, r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <tud_cdc_n_write_flush+0xe2>
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <tud_cdc_n_write_flush+0x108>)
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d000      	beq.n	8002af2 <tud_cdc_n_write_flush+0xde>
 8002af0:	be00      	bkpt	0x0000
 8002af2:	2300      	movs	r3, #0
 8002af4:	e00a      	b.n	8002b0c <tud_cdc_n_write_flush+0xf8>
    return count;
 8002af6:	89fb      	ldrh	r3, [r7, #14]
 8002af8:	e008      	b.n	8002b0c <tud_cdc_n_write_flush+0xf8>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(p_cdc->rhport, p_cdc->ep_in);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	789b      	ldrb	r3, [r3, #2]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f003 fb1f 	bl	8006148 <usbd_edpt_release>
    return 0;
 8002b0a:	2300      	movs	r3, #0
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200005f4 	.word	0x200005f4
 8002b18:	2000069c 	.word	0x2000069c
 8002b1c:	e000edf0 	.word	0xe000edf0

08002b20 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8002b26:	22a8      	movs	r2, #168	@ 0xa8
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4824      	ldr	r0, [pc, #144]	@ (8002bbc <cdcd_init+0x9c>)
 8002b2c:	f005 ff6d 	bl	8008a0a <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8002b30:	2300      	movs	r3, #0
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	e03a      	b.n	8002bac <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	22a8      	movs	r2, #168	@ 0xa8
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bbc <cdcd_init+0x9c>)
 8002b40:	4413      	add	r3, r2
 8002b42:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	22ff      	movs	r2, #255	@ 0xff
 8002b48:	719a      	strb	r2, [r3, #6]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b50:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2208      	movs	r2, #8
 8002b62:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f103 0010 	add.w	r0, r3, #16
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002b70:	2300      	movs	r3, #0
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2301      	movs	r3, #1
 8002b76:	2240      	movs	r2, #64	@ 0x40
 8002b78:	f001 f806 	bl	8003b88 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f103 001c 	add.w	r0, r3, #28
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8002b88:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <cdcd_init+0xa0>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	2240      	movs	r2, #64	@ 0x40
 8002ba2:	f000 fff1 	bl	8003b88 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	71fb      	strb	r3, [r7, #7]
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0c1      	beq.n	8002b36 <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200005f4 	.word	0x200005f4
 8002bc0:	20000068 	.word	0x20000068

08002bc4 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8002bc8:	2301      	movs	r3, #1
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e037      	b.n	8002c54 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	22a8      	movs	r2, #168	@ 0xa8
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	4a1d      	ldr	r2, [pc, #116]	@ (8002c64 <cdcd_reset+0x90>)
 8002bee:	4413      	add	r3, r2
 8002bf0:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8002bf2:	2206      	movs	r2, #6
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	68b8      	ldr	r0, [r7, #8]
 8002bf8:	f005 ff07 	bl	8008a0a <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <cdcd_reset+0x94>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3310      	adds	r3, #16
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fda8 	bl	8004764 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8002c14:	4b14      	ldr	r3, [pc, #80]	@ (8002c68 <cdcd_reset+0x94>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d104      	bne.n	8002c2c <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	331c      	adds	r3, #28
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fd9c 	bl	8004764 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f103 021c 	add.w	r2, r3, #28
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <cdcd_reset+0x94>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f001 fd9c 	bl	8004786 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	3301      	adds	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0c4      	beq.n	8002be4 <cdcd_reset+0x10>
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200005f4 	.word	0x200005f4
 8002c68:	20000068 	.word	0x20000068

08002c6c <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b09a      	sub	sp, #104	@ 0x68
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	795b      	ldrb	r3, [r3, #5]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d103      	bne.n	8002c8c <cdcd_open+0x20>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	799b      	ldrb	r3, [r3, #6]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d001      	beq.n	8002c90 <cdcd_open+0x24>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e0dd      	b.n	8002e4c <cdcd_open+0x1e0>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8002c96:	e010      	b.n	8002cba <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8002c98:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002c9c:	22a8      	movs	r2, #168	@ 0xa8
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	4a6c      	ldr	r2, [pc, #432]	@ (8002e54 <cdcd_open+0x1e8>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8002ca8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002caa:	789b      	ldrb	r3, [r3, #2]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8002cb0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8002cba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ea      	beq.n	8002c98 <cdcd_open+0x2c>
 8002cc2:	e000      	b.n	8002cc6 <cdcd_open+0x5a>
      break;
 8002cc4:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8002cc6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <cdcd_open+0x78>
 8002cce:	4b62      	ldr	r3, [pc, #392]	@ (8002e58 <cdcd_open+0x1ec>)
 8002cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d000      	beq.n	8002ce0 <cdcd_open+0x74>
 8002cde:	be00      	bkpt	0x0000
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e0b3      	b.n	8002e4c <cdcd_open+0x1e0>

  //------------- Control Interface -------------//
  p_cdc->rhport = rhport;
 8002ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ce6:	79fa      	ldrb	r2, [r7, #7]
 8002ce8:	701a      	strb	r2, [r3, #0]
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	789a      	ldrb	r2, [r3, #2]
 8002cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cf0:	705a      	strb	r2, [r3, #1]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8002cf2:	2309      	movs	r3, #9
 8002cf4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d08:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8002d0a:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8002d0c:	e013      	b.n	8002d36 <cdcd_open+0xca>
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d10:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8002d16:	461a      	mov	r2, r3
 8002d18:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d32:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8002d34:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8002d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8002d40:	2b24      	cmp	r3, #36	@ 0x24
 8002d42:	d104      	bne.n	8002d4e <cdcd_open+0xe2>
 8002d44:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8002d48:	88bb      	ldrh	r3, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d9df      	bls.n	8002d0e <cdcd_open+0xa2>
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d54:	3301      	adds	r3, #1
 8002d56:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d12f      	bne.n	8002dbc <cdcd_open+0x150>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5e:	653b      	str	r3, [r7, #80]	@ 0x50
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f981 	bl	800606c <usbd_edpt_open>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f083 0301 	eor.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <cdcd_open+0x120>
 8002d76:	4b38      	ldr	r3, [pc, #224]	@ (8002e58 <cdcd_open+0x1ec>)
 8002d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d000      	beq.n	8002d88 <cdcd_open+0x11c>
 8002d86:	be00      	bkpt	0x0000
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e05f      	b.n	8002e4c <cdcd_open+0x1e0>
    p_cdc->ep_notify = desc_ep->bEndpointAddress;
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d8e:	789a      	ldrb	r2, [r3, #2]
 8002d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d92:	711a      	strb	r2, [r3, #4]
 8002d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d96:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002da2:	4413      	add	r3, r2
 8002da4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8002dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbe:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d139      	bne.n	8002e3e <cdcd_open+0x1d2>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8002dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dcc:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8002dce:	2b0a      	cmp	r3, #10
 8002dd0:	d135      	bne.n	8002e3e <cdcd_open+0x1d2>
 8002dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd4:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002de0:	4413      	add	r3, r2
 8002de2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de8:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8002df8:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dfc:	3303      	adds	r3, #3
 8002dfe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002e00:	3202      	adds	r2, #2
 8002e02:	79f8      	ldrb	r0, [r7, #7]
 8002e04:	9201      	str	r2, [sp, #4]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2302      	movs	r3, #2
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e0e:	f003 f8c5 	bl	8005f9c <usbd_open_edpt_pair>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <cdcd_open+0x1c8>
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <cdcd_open+0x1ec>)
 8002e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d000      	beq.n	8002e30 <cdcd_open+0x1c4>
 8002e2e:	be00      	bkpt	0x0000
 8002e30:	2300      	movs	r3, #0
 8002e32:	e00b      	b.n	8002e4c <cdcd_open+0x1e0>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8002e34:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002e38:	330e      	adds	r3, #14
 8002e3a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8002e3e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fc88 	bl	8002758 <_prep_out_transaction>

  return drv_len;
 8002e48:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3760      	adds	r7, #96	@ 0x60
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200005f4 	.word	0x200005f4
 8002e58:	e000edf0 	.word	0xe000edf0

08002e5c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	@ 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	603a      	str	r2, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d001      	beq.n	8002e7e <cdcd_control_xfer_cb+0x22>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e0e6      	b.n	800304c <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002e84:	e014      	b.n	8002eb0 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8002e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e8a:	22a8      	movs	r2, #168	@ 0xa8
 8002e8c:	fb02 f303 	mul.w	r3, r2, r3
 8002e90:	4a70      	ldr	r2, [pc, #448]	@ (8003054 <cdcd_control_xfer_cb+0x1f8>)
 8002e92:	4413      	add	r3, r2
 8002e94:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	889b      	ldrh	r3, [r3, #4]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d009      	beq.n	8002eba <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8002ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0e6      	beq.n	8002e86 <cdcd_control_xfer_cb+0x2a>
 8002eb8:	e000      	b.n	8002ebc <cdcd_control_xfer_cb+0x60>
      break;
 8002eba:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8002ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <cdcd_control_xfer_cb+0x6c>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e0c1      	b.n	800304c <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	3b20      	subs	r3, #32
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	f200 80b2 	bhi.w	8003038 <cdcd_control_xfer_cb+0x1dc>
 8002ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <cdcd_control_xfer_cb+0x80>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002eed 	.word	0x08002eed
 8002ee0:	08002f29 	.word	0x08002f29
 8002ee4:	08002f43 	.word	0x08002f43
 8002ee8:	08003007 	.word	0x08003007
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8002eec:	79bb      	ldrb	r3, [r7, #6]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d108      	bne.n	8002f04 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f103 0208 	add.w	r2, r3, #8
 8002ef8:	79f8      	ldrb	r0, [r7, #7]
 8002efa:	2307      	movs	r3, #7
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	f003 fb33 	bl	8006568 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8002f02:	e09b      	b.n	800303c <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8002f04:	79bb      	ldrb	r3, [r7, #6]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	f040 8098 	bne.w	800303c <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8002f0c:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <cdcd_control_xfer_cb+0x1fc>)
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8094 	beq.w	800303c <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f103 0208 	add.w	r2, r3, #8
 8002f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f3af 8000 	nop.w
      break;
 8002f26:	e089      	b.n	800303c <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8002f28:	79bb      	ldrb	r3, [r7, #6]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f040 8088 	bne.w	8003040 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f103 0208 	add.w	r2, r3, #8
 8002f36:	79f8      	ldrb	r0, [r7, #7]
 8002f38:	2307      	movs	r3, #7
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	f003 fb14 	bl	8006568 <tud_control_xfer>
      }
      break;
 8002f40:	e07e      	b.n	8003040 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 8002f42:	79bb      	ldrb	r3, [r7, #6]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fa99 	bl	8006484 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 8002f52:	e077      	b.n	8003044 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8002f54:	79bb      	ldrb	r3, [r7, #6]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d174      	bne.n	8003044 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	885b      	ldrh	r3, [r3, #2]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	885b      	ldrh	r3, [r3, #2]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	885b      	ldrh	r3, [r3, #2]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	715a      	strb	r2, [r3, #5]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 8002fae:	4b2b      	ldr	r3, [pc, #172]	@ (800305c <cdcd_control_xfer_cb+0x200>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f103 021c 	add.w	r2, r3, #28
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f083 0301 	eor.w	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f001 fbd2 	bl	8004786 <tu_fifo_set_overwritable>
 8002fe2:	e005      	b.n	8002ff0 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	331c      	adds	r3, #28
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fbcb 	bl	8004786 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <cdcd_control_xfer_cb+0x204>)
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d026      	beq.n	8003044 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8002ff6:	7fba      	ldrb	r2, [r7, #30]
 8002ff8:	7ff9      	ldrb	r1, [r7, #31]
 8002ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fc42 	bl	8000888 <tud_cdc_line_state_cb>
      break;
 8003004:	e01e      	b.n	8003044 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8003006:	79bb      	ldrb	r3, [r7, #6]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	6839      	ldr	r1, [r7, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f003 fa37 	bl	8006484 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8003016:	e017      	b.n	8003048 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 8003018:	79bb      	ldrb	r3, [r7, #6]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d114      	bne.n	8003048 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 800301e:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <cdcd_control_xfer_cb+0x208>)
 8003020:	2b00      	cmp	r3, #0
 8003022:	d011      	beq.n	8003048 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	885b      	ldrh	r3, [r3, #2]
 8003028:	b29a      	uxth	r2, r3
 800302a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f3af 8000 	nop.w
      break;
 8003036:	e007      	b.n	8003048 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 8003038:	2300      	movs	r3, #0
 800303a:	e007      	b.n	800304c <cdcd_control_xfer_cb+0x1f0>
      break;
 800303c:	bf00      	nop
 800303e:	e004      	b.n	800304a <cdcd_control_xfer_cb+0x1ee>
      break;
 8003040:	bf00      	nop
 8003042:	e002      	b.n	800304a <cdcd_control_xfer_cb+0x1ee>
      break;
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <cdcd_control_xfer_cb+0x1ee>
      break;
 8003048:	bf00      	nop
  }

  return true;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	3728      	adds	r7, #40	@ 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	200005f4 	.word	0x200005f4
 8003058:	00000000 	.word	0x00000000
 800305c:	20000068 	.word	0x20000068
 8003060:	08000889 	.word	0x08000889
 8003064:	00000000 	.word	0x00000000

08003068 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4603      	mov	r3, r0
 8003072:	71fb      	strb	r3, [r7, #7]
 8003074:	460b      	mov	r3, r1
 8003076:	71bb      	strb	r3, [r7, #6]
 8003078:	4613      	mov	r3, r2
 800307a:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e018      	b.n	80030b4 <cdcd_xfer_cb+0x4c>
    p_cdc = &_cdcd_itf[itf];
 8003082:	7ffb      	ldrb	r3, [r7, #31]
 8003084:	22a8      	movs	r2, #168	@ 0xa8
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	4a69      	ldr	r2, [pc, #420]	@ (8003230 <cdcd_xfer_cb+0x1c8>)
 800308c:	4413      	add	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in) || (ep_addr == p_cdc->ep_notify)) {
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	78db      	ldrb	r3, [r3, #3]
 8003094:	79ba      	ldrb	r2, [r7, #6]
 8003096:	429a      	cmp	r2, r3
 8003098:	d00f      	beq.n	80030ba <cdcd_xfer_cb+0x52>
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	789b      	ldrb	r3, [r3, #2]
 800309e:	79ba      	ldrb	r2, [r7, #6]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d00a      	beq.n	80030ba <cdcd_xfer_cb+0x52>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	79ba      	ldrb	r2, [r7, #6]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d005      	beq.n	80030ba <cdcd_xfer_cb+0x52>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	3301      	adds	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	7ffb      	ldrb	r3, [r7, #31]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0e3      	beq.n	8003082 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 80030ba:	7ffb      	ldrb	r3, [r7, #31]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <cdcd_xfer_cb+0x6e>
 80030c0:	4b5c      	ldr	r3, [pc, #368]	@ (8003234 <cdcd_xfer_cb+0x1cc>)
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d000      	beq.n	80030d2 <cdcd_xfer_cb+0x6a>
 80030d0:	be00      	bkpt	0x0000
 80030d2:	2300      	movs	r3, #0
 80030d4:	e0a7      	b.n	8003226 <cdcd_xfer_cb+0x1be>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80030d6:	7ffa      	ldrb	r2, [r7, #31]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	4a55      	ldr	r2, [pc, #340]	@ (8003238 <cdcd_xfer_cb+0x1d0>)
 80030e2:	4413      	add	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	78db      	ldrb	r3, [r3, #3]
 80030ea:	79ba      	ldrb	r2, [r7, #6]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d148      	bne.n	8003182 <cdcd_xfer_cb+0x11a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	3310      	adds	r3, #16
 80030f4:	6939      	ldr	r1, [r7, #16]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	b292      	uxth	r2, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fb0e 	bl	800471c <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8003100:	4b4e      	ldr	r3, [pc, #312]	@ (800323c <cdcd_xfer_cb+0x1d4>)
 8003102:	2b00      	cmp	r3, #0
 8003104:	d027      	beq.n	8003156 <cdcd_xfer_cb+0xee>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	799b      	ldrb	r3, [r3, #6]
 800310a:	2bff      	cmp	r3, #255	@ 0xff
 800310c:	d023      	beq.n	8003156 <cdcd_xfer_cb+0xee>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e01c      	b.n	800314e <cdcd_xfer_cb+0xe6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	799a      	ldrb	r2, [r3, #6]
 8003118:	6939      	ldr	r1, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	440b      	add	r3, r1
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d111      	bne.n	8003148 <cdcd_xfer_cb+0xe0>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	3310      	adds	r3, #16
 8003128:	4618      	mov	r0, r3
 800312a:	f001 f9f1 	bl	8004510 <tu_fifo_empty>
 800312e:	4603      	mov	r3, r0
 8003130:	f083 0301 	eor.w	r3, r3, #1
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <cdcd_xfer_cb+0xe0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	799a      	ldrb	r2, [r3, #6]
 800313e:	7ffb      	ldrb	r3, [r7, #31]
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3de      	bcc.n	8003114 <cdcd_xfer_cb+0xac>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8003156:	4b3a      	ldr	r3, [pc, #232]	@ (8003240 <cdcd_xfer_cb+0x1d8>)
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <cdcd_xfer_cb+0x112>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	3310      	adds	r3, #16
 8003160:	4618      	mov	r0, r3
 8003162:	f001 f9d5 	bl	8004510 <tu_fifo_empty>
 8003166:	4603      	mov	r3, r0
 8003168:	f083 0301 	eor.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <cdcd_xfer_cb+0x112>
      tud_cdc_rx_cb(itf);
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	4618      	mov	r0, r3
 8003176:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 800317a:	7ffb      	ldrb	r3, [r7, #31]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff faeb 	bl	8002758 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	789b      	ldrb	r3, [r3, #2]
 8003186:	79ba      	ldrb	r2, [r7, #6]
 8003188:	429a      	cmp	r2, r3
 800318a:	d13f      	bne.n	800320c <cdcd_xfer_cb+0x1a4>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 800318c:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <cdcd_xfer_cb+0x1dc>)
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <cdcd_xfer_cb+0x132>
      tud_cdc_tx_complete_cb(itf);
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	4618      	mov	r0, r3
 8003196:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 800319a:	7ffb      	ldrb	r3, [r7, #31]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fc39 	bl	8002a14 <tud_cdc_n_write_flush>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d131      	bne.n	800320c <cdcd_xfer_cb+0x1a4>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	331c      	adds	r3, #28
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 f97d 	bl	80044ac <tu_fifo_count>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d129      	bne.n	800320c <cdcd_xfer_cb+0x1a4>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d026      	beq.n	800320c <cdcd_xfer_cb+0x1a4>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d121      	bne.n	800320c <cdcd_xfer_cb+0x1a4>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	789a      	ldrb	r2, [r3, #2]
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 ff91 	bl	80060f8 <usbd_edpt_claim>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d017      	beq.n	800320c <cdcd_xfer_cb+0x1a4>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	7899      	ldrb	r1, [r3, #2]
 80031e0:	79f8      	ldrb	r0, [r7, #7]
 80031e2:	2300      	movs	r3, #0
 80031e4:	2200      	movs	r2, #0
 80031e6:	f002 ffd7 	bl	8006198 <usbd_edpt_xfer>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f083 0301 	eor.w	r3, r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <cdcd_xfer_cb+0x1a4>
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <cdcd_xfer_cb+0x1cc>)
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d000      	beq.n	8003208 <cdcd_xfer_cb+0x1a0>
 8003206:	be00      	bkpt	0x0000
 8003208:	2300      	movs	r3, #0
 800320a:	e00c      	b.n	8003226 <cdcd_xfer_cb+0x1be>
      }
    }
  }

  // Sent notification to host
  if (ep_addr == p_cdc->ep_notify) {
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	791b      	ldrb	r3, [r3, #4]
 8003210:	79ba      	ldrb	r2, [r7, #6]
 8003212:	429a      	cmp	r2, r3
 8003214:	d106      	bne.n	8003224 <cdcd_xfer_cb+0x1bc>
    if (tud_cdc_notify_complete_cb) {
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <cdcd_xfer_cb+0x1e0>)
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <cdcd_xfer_cb+0x1bc>
      tud_cdc_notify_complete_cb(itf);
 800321c:	7ffb      	ldrb	r3, [r7, #31]
 800321e:	4618      	mov	r0, r3
 8003220:	f3af 8000 	nop.w
    }
  }

  return true;
 8003224:	2301      	movs	r3, #1
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200005f4 	.word	0x200005f4
 8003234:	e000edf0 	.word	0xe000edf0
 8003238:	2000069c 	.word	0x2000069c
	...

0800324c <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	460a      	mov	r2, r1
 8003256:	71fb      	strb	r3, [r7, #7]
 8003258:	4613      	mov	r3, r2
 800325a:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 800325c:	2301      	movs	r3, #1
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	603a      	str	r2, [r7, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	4603      	mov	r3, r0
 8003276:	71fb      	strb	r3, [r7, #7]
 8003278:	460b      	mov	r3, r1
 800327a:	71bb      	strb	r3, [r7, #6]
 800327c:	4613      	mov	r3, r2
 800327e:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 800329a:	79fa      	ldrb	r2, [r7, #7]
 800329c:	491b      	ldr	r1, [pc, #108]	@ (800330c <tud_hid_n_ready+0x80>)
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3301      	adds	r3, #1
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	73bb      	strb	r3, [r7, #14]
 80032ae:	f001 fae9 	bl	8004884 <tud_mounted>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <tud_hid_n_ready+0x40>
 80032b8:	f001 faf6 	bl	80048a8 <tud_suspended>
 80032bc:	4603      	mov	r3, r0
 80032be:	f083 0301 	eor.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <tud_hid_n_ready+0x40>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <tud_hid_n_ready+0x42>
 80032cc:	2300      	movs	r3, #0
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d010      	beq.n	80032fa <tud_hid_n_ready+0x6e>
 80032d8:	7bbb      	ldrb	r3, [r7, #14]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <tud_hid_n_ready+0x6e>
 80032de:	7bba      	ldrb	r2, [r7, #14]
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f002 ffcd 	bl	8006284 <usbd_edpt_busy>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <tud_hid_n_ready+0x6e>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <tud_hid_n_ready+0x70>
 80032fa:	2300      	movs	r3, #0
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000072c 	.word	0x2000072c

08003310 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b08e      	sub	sp, #56	@ 0x38
 8003314:	af00      	add	r7, sp, #0
 8003316:	603a      	str	r2, [r7, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
 800331e:	460b      	mov	r3, r1
 8003320:	71bb      	strb	r3, [r7, #6]
 8003322:	4613      	mov	r3, r2
 8003324:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <tud_hid_n_report+0x20>
 800332c:	2300      	movs	r3, #0
 800332e:	e06d      	b.n	800340c <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8003336:	79fa      	ldrb	r2, [r7, #7]
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4a34      	ldr	r2, [pc, #208]	@ (8003414 <tud_hid_n_report+0x104>)
 8003342:	4413      	add	r3, r2
 8003344:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8003346:	79fa      	ldrb	r2, [r7, #7]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4a31      	ldr	r2, [pc, #196]	@ (8003418 <tud_hid_n_report+0x108>)
 8003352:	4413      	add	r3, r2
 8003354:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8003356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003358:	785a      	ldrb	r2, [r3, #1]
 800335a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f002 fec9 	bl	80060f8 <usbd_edpt_claim>
 8003366:	4603      	mov	r3, r0
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <tud_hid_n_report+0x66>
 8003372:	2300      	movs	r3, #0
 8003374:	e04a      	b.n	800340c <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 8003376:	79bb      	ldrb	r3, [r7, #6]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d021      	beq.n	80033c0 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 800337c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337e:	79ba      	ldrb	r2, [r7, #6]
 8003380:	721a      	strb	r2, [r3, #8]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8003382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003384:	3308      	adds	r3, #8
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	88bb      	ldrh	r3, [r7, #4]
 800338a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800338c:	2207      	movs	r2, #7
 800338e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	623a      	str	r2, [r7, #32]
 8003394:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8003396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d202      	bcs.n	80033a4 <tud_hid_n_report+0x94>
    return -1;
 800339e:	f04f 33ff 	mov.w	r3, #4294967295
 80033a2:	e005      	b.n	80033b0 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	6a39      	ldr	r1, [r7, #32]
 80033a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033aa:	f005 fb5b 	bl	8008a64 <memcpy>
  return 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <tud_hid_n_report+0xa8>
 80033b4:	2300      	movs	r3, #0
 80033b6:	e029      	b.n	800340c <tud_hid_n_report+0xfc>
    len++;
 80033b8:	88bb      	ldrh	r3, [r7, #4]
 80033ba:	3301      	adds	r3, #1
 80033bc:	80bb      	strh	r3, [r7, #4]
 80033be:	e01a      	b.n	80033f6 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 80033c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c2:	f103 0208 	add.w	r2, r3, #8
 80033c6:	88bb      	ldrh	r3, [r7, #4]
 80033c8:	61ba      	str	r2, [r7, #24]
 80033ca:	2208      	movs	r2, #8
 80033cc:	617a      	str	r2, [r7, #20]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	613a      	str	r2, [r7, #16]
 80033d2:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d202      	bcs.n	80033e2 <tud_hid_n_report+0xd2>
    return -1;
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
 80033e0:	e005      	b.n	80033ee <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	6939      	ldr	r1, [r7, #16]
 80033e6:	69b8      	ldr	r0, [r7, #24]
 80033e8:	f005 fb3c 	bl	8008a64 <memcpy>
  return 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <tud_hid_n_report+0xe6>
 80033f2:	2300      	movs	r3, #0
 80033f4:	e00a      	b.n	800340c <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	7859      	ldrb	r1, [r3, #1]
 80033fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fc:	f103 0208 	add.w	r2, r3, #8
 8003400:	88bb      	ldrh	r3, [r7, #4]
 8003402:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8003406:	f002 fec7 	bl	8006198 <usbd_edpt_xfer>
 800340a:	4603      	mov	r3, r0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3738      	adds	r7, #56	@ 0x38
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	2000072c 	.word	0x2000072c
 8003418:	20000738 	.word	0x20000738

0800341c <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4603      	mov	r3, r0
 8003426:	71fb      	strb	r3, [r7, #7]
 8003428:	460b      	mov	r3, r1
 800342a:	71bb      	strb	r3, [r7, #6]
 800342c:	4613      	mov	r3, r2
 800342e:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8003430:	797b      	ldrb	r3, [r7, #5]
 8003432:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d007      	beq.n	800344e <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	f107 030a 	add.w	r3, r7, #10
 8003444:	6811      	ldr	r1, [r2, #0]
 8003446:	6019      	str	r1, [r3, #0]
 8003448:	8892      	ldrh	r2, [r2, #4]
 800344a:	809a      	strh	r2, [r3, #4]
 800344c:	e007      	b.n	800345e <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 800344e:	f107 0308 	add.w	r3, r7, #8
 8003452:	3302      	adds	r3, #2
 8003454:	2206      	movs	r2, #6
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f005 fad6 	bl	8008a0a <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 800345e:	f107 0208 	add.w	r2, r7, #8
 8003462:	79b9      	ldrb	r1, [r7, #6]
 8003464:	79f8      	ldrb	r0, [r7, #7]
 8003466:	2308      	movs	r3, #8
 8003468:	f7ff ff52 	bl	8003310 <tud_hid_n_report>
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8003476:	b580      	push	{r7, lr}
 8003478:	af00      	add	r7, sp, #0
  hidd_reset(0);
 800347a:	2000      	movs	r0, #0
 800347c:	f000 f80a 	bl	8003494 <hidd_reset>
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}

08003484 <hidd_deinit>:

bool hidd_deinit(void) {
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return true;
 8003488:	2301      	movs	r3, #1
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 800349e:	220c      	movs	r2, #12
 80034a0:	2100      	movs	r1, #0
 80034a2:	4803      	ldr	r0, [pc, #12]	@ (80034b0 <hidd_reset+0x1c>)
 80034a4:	f005 fab1 	bl	8008a0a <memset>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	2000072c 	.word	0x2000072c

080034b4 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b094      	sub	sp, #80	@ 0x50
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	4613      	mov	r3, r2
 80034c2:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	795b      	ldrb	r3, [r3, #5]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d001      	beq.n	80034d0 <hidd_open+0x1c>
 80034cc:	2300      	movs	r3, #0
 80034ce:	e0ce      	b.n	800366e <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	791b      	ldrb	r3, [r3, #4]
 80034d4:	461a      	mov	r2, r3
 80034d6:	00d2      	lsls	r2, r2, #3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 80034dc:	3312      	adds	r3, #18
 80034de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 80034e2:	88ba      	ldrh	r2, [r7, #4]
 80034e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d20a      	bcs.n	8003502 <hidd_open+0x4e>
 80034ec:	4b62      	ldr	r3, [pc, #392]	@ (8003678 <hidd_open+0x1c4>)
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d000      	beq.n	80034fe <hidd_open+0x4a>
 80034fc:	be00      	bkpt	0x0000
 80034fe:	2300      	movs	r3, #0
 8003500:	e0b5      	b.n	800366e <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8003502:	2300      	movs	r3, #0
 8003504:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003508:	e011      	b.n	800352e <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 800350a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a59      	ldr	r2, [pc, #356]	@ (800367c <hidd_open+0x1c8>)
 8003518:	4413      	add	r3, r2
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 800351c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8003524:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003528:	3301      	adds	r3, #1
 800352a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800352e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0e9      	beq.n	800350a <hidd_open+0x56>
 8003536:	e000      	b.n	800353a <hidd_open+0x86>
      break;
 8003538:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 800353a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <hidd_open+0xa4>
 8003542:	4b4d      	ldr	r3, [pc, #308]	@ (8003678 <hidd_open+0x1c4>)
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d000      	beq.n	8003554 <hidd_open+0xa0>
 8003552:	be00      	bkpt	0x0000
 8003554:	2300      	movs	r3, #0
 8003556:	e08a      	b.n	800366e <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8003558:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4a46      	ldr	r2, [pc, #280]	@ (8003680 <hidd_open+0x1cc>)
 8003566:	4413      	add	r3, r2
 8003568:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800356e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003570:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8003580:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	3301      	adds	r3, #1
 800358a:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 800358c:	2b21      	cmp	r3, #33	@ 0x21
 800358e:	d00a      	beq.n	80035a6 <hidd_open+0xf2>
 8003590:	4b39      	ldr	r3, [pc, #228]	@ (8003678 <hidd_open+0x1c4>)
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d000      	beq.n	80035a2 <hidd_open+0xee>
 80035a0:	be00      	bkpt	0x0000
 80035a2:	2300      	movs	r3, #0
 80035a4:	e063      	b.n	800366e <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80035a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ae:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80035be:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	7919      	ldrb	r1, [r3, #4]
 80035c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c6:	3302      	adds	r3, #2
 80035c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ca:	3201      	adds	r2, #1
 80035cc:	79f8      	ldrb	r0, [r7, #7]
 80035ce:	9201      	str	r2, [sp, #4]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2303      	movs	r3, #3
 80035d4:	460a      	mov	r2, r1
 80035d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035d8:	f002 fce0 	bl	8005f9c <usbd_open_edpt_pair>
 80035dc:	4603      	mov	r3, r0
 80035de:	f083 0301 	eor.w	r3, r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <hidd_open+0x14a>
 80035e8:	4b23      	ldr	r3, [pc, #140]	@ (8003678 <hidd_open+0x1c4>)
 80035ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d000      	beq.n	80035fa <hidd_open+0x146>
 80035f8:	be00      	bkpt	0x0000
 80035fa:	2300      	movs	r3, #0
 80035fc:	e037      	b.n	800366e <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	799b      	ldrb	r3, [r3, #6]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d103      	bne.n	800360e <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	79da      	ldrb	r2, [r3, #7]
 800360a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800360c:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 800360e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003610:	2201      	movs	r2, #1
 8003612:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	789a      	ldrb	r2, [r3, #2]
 8003618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361a:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 800361c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	3307      	adds	r3, #7
 8003622:	60fb      	str	r3, [r7, #12]
  return *((uint16_t const *) mem);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362a:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 800362c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362e:	789b      	ldrb	r3, [r3, #2]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01a      	beq.n	800366a <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8003634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003636:	7899      	ldrb	r1, [r3, #2]
 8003638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800363a:	f103 0210 	add.w	r2, r3, #16
 800363e:	79f8      	ldrb	r0, [r7, #7]
 8003640:	2308      	movs	r3, #8
 8003642:	f002 fda9 	bl	8006198 <usbd_edpt_xfer>
 8003646:	4603      	mov	r3, r0
 8003648:	f083 0301 	eor.w	r3, r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <hidd_open+0x1b6>
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <hidd_open+0x1c4>)
 8003654:	637b      	str	r3, [r7, #52]	@ 0x34
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d000      	beq.n	8003664 <hidd_open+0x1b0>
 8003662:	be00      	bkpt	0x0000
 8003664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003668:	e001      	b.n	800366e <hidd_open+0x1ba>
  }

  return drv_len;
 800366a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 800366e:	4618      	mov	r0, r3
 8003670:	3748      	adds	r7, #72	@ 0x48
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e000edf0 	.word	0xe000edf0
 800367c:	2000072c 	.word	0x2000072c
 8003680:	20000738 	.word	0x20000738

08003684 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b094      	sub	sp, #80	@ 0x50
 8003688:	af02      	add	r7, sp, #8
 800368a:	4603      	mov	r3, r0
 800368c:	603a      	str	r2, [r7, #0]
 800368e:	71fb      	strb	r3, [r7, #7]
 8003690:	460b      	mov	r3, r1
 8003692:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <hidd_control_xfer_cb+0x22>
 80036a2:	2300      	movs	r3, #0
 80036a4:	e1d6      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	889b      	ldrh	r3, [r3, #4]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80036b0:	2300      	movs	r3, #0
 80036b2:	77bb      	strb	r3, [r7, #30]
 80036b4:	e00f      	b.n	80036d6 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 80036b6:	7fba      	ldrb	r2, [r7, #30]
 80036b8:	498f      	ldr	r1, [pc, #572]	@ (80038f8 <hidd_control_xfer_cb+0x274>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	7ffa      	ldrb	r2, [r7, #31]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d101      	bne.n	80036d0 <hidd_control_xfer_cb+0x4c>
      return i;
 80036cc:	7fbb      	ldrb	r3, [r7, #30]
 80036ce:	e006      	b.n	80036de <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80036d0:	7fbb      	ldrb	r3, [r7, #30]
 80036d2:	3301      	adds	r3, #1
 80036d4:	77bb      	strb	r3, [r7, #30]
 80036d6:	7fbb      	ldrb	r3, [r7, #30]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ec      	beq.n	80036b6 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 80036dc:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80036de:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 80036e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <hidd_control_xfer_cb+0x6a>
 80036ea:	2300      	movs	r3, #0
 80036ec:	e1b2      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 80036ee:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4a7f      	ldr	r2, [pc, #508]	@ (80038f8 <hidd_control_xfer_cb+0x274>)
 80036fc:	4413      	add	r3, r2
 80036fe:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8003700:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4a7b      	ldr	r2, [pc, #492]	@ (80038fc <hidd_control_xfer_cb+0x278>)
 800370e:	4413      	add	r3, r2
 8003710:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d145      	bne.n	80037ac <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8003720:	79bb      	ldrb	r3, [r7, #6]
 8003722:	2b01      	cmp	r3, #1
 8003724:	f040 8195 	bne.w	8003a52 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	885b      	ldrh	r3, [r3, #2]
 800372c:	b29b      	uxth	r3, r3
 800372e:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003730:	8bbb      	ldrh	r3, [r7, #28]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b29b      	uxth	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d11b      	bne.n	800377c <hidd_control_xfer_cb+0xf8>
 8003744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003748:	2b21      	cmp	r3, #33	@ 0x21
 800374a:	d117      	bne.n	800377c <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 800374c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <hidd_control_xfer_cb+0xd4>
 8003754:	2300      	movs	r3, #0
 8003756:	e17d      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	79f8      	ldrb	r0, [r7, #7]
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	f002 feff 	bl	8006568 <tud_control_xfer>
 800376a:	4603      	mov	r3, r0
 800376c:	f083 0301 	eor.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 816d 	beq.w	8003a52 <hidd_control_xfer_cb+0x3ce>
 8003778:	2300      	movs	r3, #0
 800377a:	e16b      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	785b      	ldrb	r3, [r3, #1]
 8003780:	2b06      	cmp	r3, #6
 8003782:	d111      	bne.n	80037a8 <hidd_control_xfer_cb+0x124>
 8003784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003788:	2b22      	cmp	r3, #34	@ 0x22
 800378a:	d10d      	bne.n	80037a8 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 800378c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003790:	4618      	mov	r0, r3
 8003792:	f7fd fb4d 	bl	8000e30 <tud_hid_descriptor_report_cb>
 8003796:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8003798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379a:	889b      	ldrh	r3, [r3, #4]
 800379c:	79f8      	ldrb	r0, [r7, #7]
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	f002 fee1 	bl	8006568 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80037a6:	e154      	b.n	8003a52 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 80037a8:	2300      	movs	r3, #0
 80037aa:	e153      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	f040 813e 	bne.w	8003a38 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	2b0a      	cmp	r3, #10
 80037c4:	f200 8136 	bhi.w	8003a34 <hidd_control_xfer_cb+0x3b0>
 80037c8:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <hidd_control_xfer_cb+0x14c>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037fd 	.word	0x080037fd
 80037d4:	080039d3 	.word	0x080039d3
 80037d8:	080039e9 	.word	0x080039e9
 80037dc:	08003a35 	.word	0x08003a35
 80037e0:	08003a35 	.word	0x08003a35
 80037e4:	08003a35 	.word	0x08003a35
 80037e8:	08003a35 	.word	0x08003a35
 80037ec:	08003a35 	.word	0x08003a35
 80037f0:	080038d3 	.word	0x080038d3
 80037f4:	0800398d 	.word	0x0800398d
 80037f8:	080039ff 	.word	0x080039ff
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 80037fc:	79bb      	ldrb	r3, [r7, #6]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	f040 811c 	bne.w	8003a3c <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	885b      	ldrh	r3, [r3, #2]
 8003808:	b29b      	uxth	r3, r3
 800380a:	82bb      	strh	r3, [r7, #20]
 800380c:	8abb      	ldrh	r3, [r7, #20]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b29b      	uxth	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	885b      	ldrh	r3, [r3, #2]
 800381c:	b29b      	uxth	r3, r3
 800381e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003820:	8afb      	ldrh	r3, [r7, #22]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	88db      	ldrh	r3, [r3, #6]
 8003830:	b29b      	uxth	r3, r3
 8003832:	837b      	strh	r3, [r7, #26]
 8003834:	2308      	movs	r3, #8
 8003836:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003838:	8b7a      	ldrh	r2, [r7, #26]
 800383a:	8b3b      	ldrh	r3, [r7, #24]
 800383c:	4293      	cmp	r3, r2
 800383e:	bf28      	it	cs
 8003840:	4613      	movcs	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 800384e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d013      	beq.n	800387e <hidd_control_xfer_cb+0x1fa>
 8003856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800385a:	2b01      	cmp	r3, #1
 800385c:	d90f      	bls.n	800387e <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 800385e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	647a      	str	r2, [r7, #68]	@ 0x44
 8003864:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003868:	701a      	strb	r2, [r3, #0]
            req_len--;
 800386a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800386e:	3b01      	subs	r3, #1
 8003870:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8003874:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003878:	3301      	adds	r3, #1
 800387a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 800387e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003882:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003886:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800388a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003892:	f7fd f8cf 	bl	8000a34 <tud_hid_get_report_cb>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800389e:	4413      	add	r3, r2
 80038a0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 80038a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <hidd_control_xfer_cb+0x23e>
 80038ac:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <hidd_control_xfer_cb+0x27c>)
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d000      	beq.n	80038be <hidd_control_xfer_cb+0x23a>
 80038bc:	be00      	bkpt	0x0000
 80038be:	2300      	movs	r3, #0
 80038c0:	e0c8      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 80038c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80038c8:	79f8      	ldrb	r0, [r7, #7]
 80038ca:	6839      	ldr	r1, [r7, #0]
 80038cc:	f002 fe4c 	bl	8006568 <tud_control_xfer>
        }
        break;
 80038d0:	e0b4      	b.n	8003a3c <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 80038d2:	79bb      	ldrb	r3, [r7, #6]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d115      	bne.n	8003904 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	88db      	ldrh	r3, [r3, #6]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d901      	bls.n	80038e6 <hidd_control_xfer_cb+0x262>
 80038e2:	2300      	movs	r3, #0
 80038e4:	e0b6      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 80038e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	88db      	ldrh	r3, [r3, #6]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	79f8      	ldrb	r0, [r7, #7]
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	f002 fe39 	bl	8006568 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 80038f6:	e0a3      	b.n	8003a40 <hidd_control_xfer_cb+0x3bc>
 80038f8:	2000072c 	.word	0x2000072c
 80038fc:	20000738 	.word	0x20000738
 8003900:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8003904:	79bb      	ldrb	r3, [r7, #6]
 8003906:	2b03      	cmp	r3, #3
 8003908:	f040 809a 	bne.w	8003a40 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	885b      	ldrh	r3, [r3, #2]
 8003910:	b29b      	uxth	r3, r3
 8003912:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003914:	89bb      	ldrh	r3, [r7, #12]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	b29b      	uxth	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	885b      	ldrh	r3, [r3, #2]
 8003924:	b29b      	uxth	r3, r3
 8003926:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003928:	89fb      	ldrh	r3, [r7, #14]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	88db      	ldrh	r3, [r3, #6]
 8003938:	b29b      	uxth	r3, r3
 800393a:	827b      	strh	r3, [r7, #18]
 800393c:	2308      	movs	r3, #8
 800393e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003940:	8a7a      	ldrh	r2, [r7, #18]
 8003942:	8a3b      	ldrh	r3, [r7, #16]
 8003944:	4293      	cmp	r3, r2
 8003946:	bf28      	it	cs
 8003948:	4613      	movcs	r3, r2
 800394a:	b29b      	uxth	r3, r3
 800394c:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 800394e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <hidd_control_xfer_cb+0x2f0>
 8003956:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003958:	2b01      	cmp	r3, #1
 800395a:	d90b      	bls.n	8003974 <hidd_control_xfer_cb+0x2f0>
 800395c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8003964:	429a      	cmp	r2, r3
 8003966:	d105      	bne.n	8003974 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8003968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396a:	3301      	adds	r3, #1
 800396c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 800396e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003970:	3b01      	subs	r3, #1
 8003972:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8003974:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003978:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800397c:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8003980:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003986:	f7fd f867 	bl	8000a58 <tud_hid_set_report_cb>
        break;
 800398a:	e059      	b.n	8003a40 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 800398c:	79bb      	ldrb	r3, [r7, #6]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d158      	bne.n	8003a44 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	885b      	ldrh	r3, [r3, #2]
 8003996:	b29b      	uxth	r3, r3
 8003998:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800399a:	897b      	ldrh	r3, [r7, #10]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	b29b      	uxth	r3, r3
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a4:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 80039a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a8:	79da      	ldrb	r2, [r3, #7]
 80039aa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fc4b 	bl	800324c <tud_hid_set_idle_cb>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f083 0301 	eor.w	r3, r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <hidd_control_xfer_cb+0x342>
 80039c2:	2300      	movs	r3, #0
 80039c4:	e046      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f002 fd5a 	bl	8006484 <tud_control_status>
        }
        break;
 80039d0:	e038      	b.n	8003a44 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 80039d2:	79bb      	ldrb	r3, [r7, #6]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d137      	bne.n	8003a48 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 80039d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039da:	1dda      	adds	r2, r3, #7
 80039dc:	79f8      	ldrb	r0, [r7, #7]
 80039de:	2301      	movs	r3, #1
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	f002 fdc1 	bl	8006568 <tud_control_xfer>
        }
        break;
 80039e6:	e02f      	b.n	8003a48 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 80039e8:	79bb      	ldrb	r3, [r7, #6]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d12e      	bne.n	8003a4c <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 80039ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f0:	1d9a      	adds	r2, r3, #6
 80039f2:	79f8      	ldrb	r0, [r7, #7]
 80039f4:	2301      	movs	r3, #1
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	f002 fdb6 	bl	8006568 <tud_control_xfer>
        }
        break;
 80039fc:	e026      	b.n	8003a4c <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 80039fe:	79bb      	ldrb	r3, [r7, #6]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	6839      	ldr	r1, [r7, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f002 fd3b 	bl	8006484 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8003a0e:	e01f      	b.n	8003a50 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8003a10:	79bb      	ldrb	r3, [r7, #6]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d11c      	bne.n	8003a50 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	885b      	ldrh	r3, [r3, #2]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	799a      	ldrb	r2, [r3, #6]
 8003a26:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fc ffe5 	bl	80009fc <tud_hid_set_protocol_cb>
        break;
 8003a32:	e00d      	b.n	8003a50 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8003a34:	2300      	movs	r3, #0
 8003a36:	e00d      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e00b      	b.n	8003a54 <hidd_control_xfer_cb+0x3d0>
        break;
 8003a3c:	bf00      	nop
 8003a3e:	e008      	b.n	8003a52 <hidd_control_xfer_cb+0x3ce>
        break;
 8003a40:	bf00      	nop
 8003a42:	e006      	b.n	8003a52 <hidd_control_xfer_cb+0x3ce>
        break;
 8003a44:	bf00      	nop
 8003a46:	e004      	b.n	8003a52 <hidd_control_xfer_cb+0x3ce>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e002      	b.n	8003a52 <hidd_control_xfer_cb+0x3ce>
        break;
 8003a4c:	bf00      	nop
 8003a4e:	e000      	b.n	8003a52 <hidd_control_xfer_cb+0x3ce>
        break;
 8003a50:	bf00      	nop
  }

  return true;
 8003a52:	2301      	movs	r3, #1
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3748      	adds	r7, #72	@ 0x48
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	@ 0x28
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4603      	mov	r3, r0
 8003a66:	71fb      	strb	r3, [r7, #7]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	71bb      	strb	r3, [r7, #6]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e014      	b.n	8003aa0 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8003a76:	7ffa      	ldrb	r2, [r7, #31]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4a3e      	ldr	r2, [pc, #248]	@ (8003b7c <hidd_xfer_cb+0x120>)
 8003a82:	4413      	add	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	789b      	ldrb	r3, [r3, #2]
 8003a8a:	79ba      	ldrb	r2, [r7, #6]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d00a      	beq.n	8003aa6 <hidd_xfer_cb+0x4a>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	785b      	ldrb	r3, [r3, #1]
 8003a94:	79ba      	ldrb	r2, [r7, #6]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d005      	beq.n	8003aa6 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8003a9a:	7ffb      	ldrb	r3, [r7, #31]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	7ffb      	ldrb	r3, [r7, #31]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0e7      	beq.n	8003a76 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8003aa6:	7ffb      	ldrb	r3, [r7, #31]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <hidd_xfer_cb+0x66>
 8003aac:	4b34      	ldr	r3, [pc, #208]	@ (8003b80 <hidd_xfer_cb+0x124>)
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d000      	beq.n	8003abe <hidd_xfer_cb+0x62>
 8003abc:	be00      	bkpt	0x0000
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e057      	b.n	8003b72 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8003ac2:	7ffa      	ldrb	r2, [r7, #31]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <hidd_xfer_cb+0x128>)
 8003ace:	4413      	add	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	79ba      	ldrb	r2, [r7, #6]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d116      	bne.n	8003b0a <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8003adc:	797b      	ldrb	r3, [r7, #5]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f103 0108 	add.w	r1, r3, #8
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	7ffb      	ldrb	r3, [r7, #31]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc ff92 	bl	8000a18 <tud_hid_report_complete_cb>
 8003af4:	e03c      	b.n	8003b70 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f103 0208 	add.w	r2, r3, #8
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	7ff8      	ldrb	r0, [r7, #31]
 8003b02:	2101      	movs	r1, #1
 8003b04:	f7ff fbb1 	bl	800326a <tud_hid_report_failed_cb>
 8003b08:	e032      	b.n	8003b70 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8003b0a:	797b      	ldrb	r3, [r7, #5]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10c      	bne.n	8003b2a <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f103 0210 	add.w	r2, r3, #16
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	7ff8      	ldrb	r0, [r7, #31]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	2202      	movs	r2, #2
 8003b22:	2100      	movs	r1, #0
 8003b24:	f7fc ff98 	bl	8000a58 <tud_hid_set_report_cb>
 8003b28:	e008      	b.n	8003b3c <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f103 0210 	add.w	r2, r3, #16
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	7ff8      	ldrb	r0, [r7, #31]
 8003b36:	2102      	movs	r1, #2
 8003b38:	f7ff fb97 	bl	800326a <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	7899      	ldrb	r1, [r3, #2]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f103 0210 	add.w	r2, r3, #16
 8003b46:	79f8      	ldrb	r0, [r7, #7]
 8003b48:	2308      	movs	r3, #8
 8003b4a:	f002 fb25 	bl	8006198 <usbd_edpt_xfer>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f083 0301 	eor.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <hidd_xfer_cb+0x114>
 8003b5a:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <hidd_xfer_cb+0x124>)
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d000      	beq.n	8003b6c <hidd_xfer_cb+0x110>
 8003b6a:	be00      	bkpt	0x0000
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <hidd_xfer_cb+0x116>
  }

  return true;
 8003b70:	2301      	movs	r3, #1
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000072c 	.word	0x2000072c
 8003b80:	e000edf0 	.word	0xe000edf0
 8003b84:	20000738 	.word	0x20000738

08003b88 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	460b      	mov	r3, r1
 8003b98:	80fb      	strh	r3, [r7, #6]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba4:	d901      	bls.n	8003baa <tu_fifo_config+0x22>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e01b      	b.n	8003be2 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8003bb6:	88bb      	ldrh	r3, [r7, #4]
 8003bb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003bbc:	b299      	uxth	r1, r3
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	88d3      	ldrh	r3, [r2, #6]
 8003bc2:	f361 030e 	bfi	r3, r1, #0, #15
 8003bc6:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	79d3      	ldrb	r3, [r2, #7]
 8003bcc:	7e39      	ldrb	r1, [r7, #24]
 8003bce:	f361 13c7 	bfi	r3, r1, #7, #1
 8003bd2:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8003be0:	2301      	movs	r3, #1
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b08a      	sub	sp, #40	@ 0x28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8003c06:	e00b      	b.n	8003c20 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	61ba      	str	r2, [r7, #24]
 8003c10:	617b      	str	r3, [r7, #20]
  *((uint32_t *) mem) = value;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	601a      	str	r2, [r3, #0]
}
 8003c18:	bf00      	nop
    ff_buf += 4;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8003c20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003c22:	1e5a      	subs	r2, r3, #1
 8003c24:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ee      	bne.n	8003c08 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8003c34:	7ffb      	ldrb	r3, [r7, #31]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8003c40:	7ffa      	ldrb	r2, [r7, #31]
 8003c42:	f107 0310 	add.w	r3, r7, #16
 8003c46:	4619      	mov	r1, r3
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f004 ff0b 	bl	8008a64 <memcpy>
  }
}
 8003c4e:	bf00      	nop
 8003c50:	3728      	adds	r7, #40	@ 0x28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08a      	sub	sp, #40	@ 0x28
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	4613      	mov	r3, r2
 8003c62:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8003c6e:	e008      	b.n	8003c82 <_ff_pull_const_addr+0x2c>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8003c82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f1      	bne.n	8003c70 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8003c96:	7ffb      	ldrb	r3, [r7, #31]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8003ca0:	7ffa      	ldrb	r2, [r7, #31]
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f004 fedb 	bl	8008a64 <memcpy>

    *reg_tx = tmp32;
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	601a      	str	r2, [r3, #0]
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3728      	adds	r7, #40	@ 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	68f9      	ldr	r1, [r7, #12]
 8003cd2:	88c9      	ldrh	r1, [r1, #6]
 8003cd4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003cd8:	b289      	uxth	r1, r1
 8003cda:	fb01 f202 	mul.w	r2, r1, r2
 8003cde:	1898      	adds	r0, r3, r2
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88db      	ldrh	r3, [r3, #6]
 8003ce4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	f004 feb9 	bl	8008a64 <memcpy>
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b08e      	sub	sp, #56	@ 0x38
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	4611      	mov	r1, r2
 8003d06:	461a      	mov	r2, r3
 8003d08:	460b      	mov	r3, r1
 8003d0a:	80fb      	strh	r3, [r7, #6]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	889a      	ldrh	r2, [r3, #4]
 8003d14:	88bb      	ldrh	r3, [r7, #4]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	88db      	ldrh	r3, [r3, #6]
 8003d26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003d30:	fb13 f302 	smulbb	r3, r3, r2
 8003d34:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	88db      	ldrh	r3, [r3, #6]
 8003d3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d44:	fb13 f302 	smulbb	r3, r3, r2
 8003d48:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	88ba      	ldrh	r2, [r7, #4]
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	88c9      	ldrh	r1, [r1, #6]
 8003d54:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003d58:	b289      	uxth	r1, r1
 8003d5a:	fb01 f202 	mul.w	r2, r1, r2
 8003d5e:	4413      	add	r3, r2
 8003d60:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8003d62:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <_ff_push_n+0x76>
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d022      	beq.n	8003db4 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8003d6e:	e09e      	b.n	8003eae <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8003d70:	88fa      	ldrh	r2, [r7, #6]
 8003d72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d80d      	bhi.n	8003d94 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	88d2      	ldrh	r2, [r2, #6]
 8003d7e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003d82:	b292      	uxth	r2, r2
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d8e:	f004 fe69 	bl	8008a64 <memcpy>
      break;
 8003d92:	e08c      	b.n	8003eae <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8003d94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d96:	461a      	mov	r2, r3
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d9c:	f004 fe62 	bl	8008a64 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003dac:	4619      	mov	r1, r3
 8003dae:	f004 fe59 	bl	8008a64 <memcpy>
      break;
 8003db2:	e07c      	b.n	8003eae <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d80f      	bhi.n	8003ddc <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88db      	ldrh	r3, [r3, #6]
 8003dc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	fb13 f302 	smulbb	r3, r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dd6:	f7ff ff0a 	bl	8003bee <_ff_push_const_addr>
      break;
 8003dda:	e067      	b.n	8003eac <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8003ddc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8003de4:	8c3b      	ldrh	r3, [r7, #32]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dec:	f7ff feff 	bl	8003bee <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8003df0:	8c3b      	ldrh	r3, [r7, #32]
 8003df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df4:	4413      	add	r3, r2
 8003df6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8003df8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8003e04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d043      	beq.n	8003e94 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8003e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f1c3 0304 	rsb	r3, r3, #4
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e1e:	837b      	strh	r3, [r7, #26]
 8003e20:	4613      	mov	r3, r2
 8003e22:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003e24:	8b7a      	ldrh	r2, [r7, #26]
 8003e26:	8b3b      	ldrh	r3, [r7, #24]
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bf28      	it	cs
 8003e2c:	4613      	movcs	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8003e34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8003e46:	f107 0314 	add.w	r3, r7, #20
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8003e4c:	e007      	b.n	8003e5e <_ff_push_n+0x164>
 8003e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e50:	1c53      	adds	r3, r2, #1
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e5a:	7812      	ldrb	r2, [r2, #0]
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e62:	1e5a      	subs	r2, r3, #1
 8003e64:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8003e72:	e007      	b.n	8003e84 <_ff_push_n+0x18a>
 8003e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e76:	1c53      	adds	r3, r2, #1
 8003e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	1c59      	adds	r1, r3, #1
 8003e7e:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e88:	1e5a      	subs	r2, r3, #1
 8003e8a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <_ff_push_n+0x17a>
 8003e92:	e002      	b.n	8003e9a <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8003e9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <_ff_push_n+0x1b2>
 8003ea0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ea8:	f7ff fea1 	bl	8003bee <_ff_push_const_addr>
      break;
 8003eac:	bf00      	nop
  }
}
 8003eae:	bf00      	nop
 8003eb0:	3738      	adds	r7, #56	@ 0x38
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	88c9      	ldrh	r1, [r1, #6]
 8003ece:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003ed2:	b289      	uxth	r1, r1
 8003ed4:	fb01 f202 	mul.w	r2, r1, r2
 8003ed8:	1899      	adds	r1, r3, r2
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	88db      	ldrh	r3, [r3, #6]
 8003ede:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68b8      	ldr	r0, [r7, #8]
 8003ee8:	f004 fdbc 	bl	8008a64 <memcpy>
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08e      	sub	sp, #56	@ 0x38
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	460b      	mov	r3, r1
 8003f04:	80fb      	strh	r3, [r7, #6]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	889a      	ldrh	r2, [r3, #4]
 8003f0e:	88bb      	ldrh	r3, [r7, #4]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88db      	ldrh	r3, [r3, #6]
 8003f20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f2a:	fb13 f302 	smulbb	r3, r3, r2
 8003f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88db      	ldrh	r3, [r3, #6]
 8003f34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f3e:	fb13 f302 	smulbb	r3, r3, r2
 8003f42:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	88ba      	ldrh	r2, [r7, #4]
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	88c9      	ldrh	r1, [r1, #6]
 8003f4e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003f52:	b289      	uxth	r1, r1
 8003f54:	fb01 f202 	mul.w	r2, r1, r2
 8003f58:	4413      	add	r3, r2
 8003f5a:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8003f5c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <_ff_pull_n+0x76>
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d022      	beq.n	8003fae <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8003f68:	e0a0      	b.n	80040ac <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d80d      	bhi.n	8003f8e <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	88d2      	ldrh	r2, [r2, #6]
 8003f78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003f7c:	b292      	uxth	r2, r2
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f004 fd6c 	bl	8008a64 <memcpy>
    break;
 8003f8c:	e08e      	b.n	80040ac <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8003f8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f90:	461a      	mov	r2, r3
 8003f92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f94:	68b8      	ldr	r0, [r7, #8]
 8003f96:	f004 fd65 	bl	8008a64 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8003f9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	18d0      	adds	r0, r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f004 fd5c 	bl	8008a64 <memcpy>
    break;
 8003fac:	e07e      	b.n	80040ac <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d80f      	bhi.n	8003fd6 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	88db      	ldrh	r3, [r3, #6]
 8003fba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	fb13 f302 	smulbb	r3, r3, r2
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fce:	68b8      	ldr	r0, [r7, #8]
 8003fd0:	f7ff fe41 	bl	8003c56 <_ff_pull_const_addr>
    break;
 8003fd4:	e069      	b.n	80040aa <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8003fd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003fd8:	f023 0303 	bic.w	r3, r3, #3
 8003fdc:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8003fde:	8c3b      	ldrh	r3, [r7, #32]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fe4:	68b8      	ldr	r0, [r7, #8]
 8003fe6:	f7ff fe36 	bl	8003c56 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8003fea:	8c3b      	ldrh	r3, [r7, #32]
 8003fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fee:	4413      	add	r3, r2
 8003ff0:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8003ff2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8003ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004002:	2b00      	cmp	r3, #0
 8004004:	d045      	beq.n	8004092 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800400a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800400e:	b29b      	uxth	r3, r3
 8004010:	f1c3 0304 	rsb	r3, r3, #4
 8004014:	b29a      	uxth	r2, r3
 8004016:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004018:	837b      	strh	r3, [r7, #26]
 800401a:	4613      	mov	r3, r2
 800401c:	833b      	strh	r3, [r7, #24]
 800401e:	8b7a      	ldrh	r2, [r7, #26]
 8004020:	8b3b      	ldrh	r3, [r7, #24]
 8004022:	4293      	cmp	r3, r2
 8004024:	bf28      	it	cs
 8004026:	4613      	movcs	r3, r2
 8004028:	b29b      	uxth	r3, r3
 800402a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800402e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004032:	b29b      	uxth	r3, r3
 8004034:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8004044:	e007      	b.n	8004056 <_ff_pull_n+0x162>
 8004046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004048:	1c53      	adds	r3, r2, #1
 800404a:	633b      	str	r3, [r7, #48]	@ 0x30
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	1c59      	adds	r1, r3, #1
 8004050:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004052:	7812      	ldrb	r2, [r2, #0]
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800405a:	1e5a      	subs	r2, r3, #1
 800405c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800406a:	e007      	b.n	800407c <_ff_pull_n+0x188>
 800406c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406e:	1c53      	adds	r3, r2, #1
 8004070:	633b      	str	r3, [r7, #48]	@ 0x30
 8004072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004074:	1c59      	adds	r1, r3, #1
 8004076:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e002      	b.n	8004098 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8004098:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <_ff_pull_n+0x1b6>
 800409e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040a0:	461a      	mov	r2, r3
 80040a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	f7ff fdd6 	bl	8003c56 <_ff_pull_const_addr>
    break;
 80040aa:	bf00      	nop
  }
}
 80040ac:	bf00      	nop
 80040ae:	3738      	adds	r7, #56	@ 0x38
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
 80040be:	460b      	mov	r3, r1
 80040c0:	80bb      	strh	r3, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80040c6:	88ba      	ldrh	r2, [r7, #4]
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	4413      	add	r3, r2
 80040cc:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80040ce:	88ba      	ldrh	r2, [r7, #4]
 80040d0:	89fb      	ldrh	r3, [r7, #14]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d804      	bhi.n	80040e0 <advance_index+0x2c>
 80040d6:	89fa      	ldrh	r2, [r7, #14]
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	429a      	cmp	r2, r3
 80040de:	db08      	blt.n	80040f2 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	425b      	negs	r3, r3
 80040e8:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80040ea:	89fa      	ldrh	r2, [r7, #14]
 80040ec:	89bb      	ldrh	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80040f2:	89fb      	ldrh	r3, [r7, #14]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4611      	mov	r1, r2
 800410c:	461a      	mov	r2, r3
 800410e:	460b      	mov	r3, r1
 8004110:	80fb      	strh	r3, [r7, #6]
 8004112:	4613      	mov	r3, r2
 8004114:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	889b      	ldrh	r3, [r3, #4]
 800411a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	843b      	strh	r3, [r7, #32]
 8004120:	88bb      	ldrh	r3, [r7, #4]
 8004122:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8004124:	8c3a      	ldrh	r2, [r7, #32]
 8004126:	8bfb      	ldrh	r3, [r7, #30]
 8004128:	429a      	cmp	r2, r3
 800412a:	d304      	bcc.n	8004136 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800412c:	8c3a      	ldrh	r2, [r7, #32]
 800412e:	8bfb      	ldrh	r3, [r7, #30]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	e008      	b.n	8004148 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004136:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	8c39      	ldrh	r1, [r7, #32]
 800413e:	8bfb      	ldrh	r3, [r7, #30]
 8004140:	1acb      	subs	r3, r1, r3
 8004142:	b29b      	uxth	r3, r3
 8004144:	4413      	add	r3, r2
 8004146:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004148:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800414a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <_tu_fifo_peek+0x54>
 8004150:	2300      	movs	r3, #0
 8004152:	e037      	b.n	80041c4 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	889b      	ldrh	r3, [r3, #4]
 8004158:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800415a:	429a      	cmp	r2, r3
 800415c:	d91b      	bls.n	8004196 <_tu_fifo_peek+0x96>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	889b      	ldrh	r3, [r3, #4]
 800416a:	8afa      	ldrh	r2, [r7, #22]
 800416c:	429a      	cmp	r2, r3
 800416e:	d305      	bcc.n	800417c <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	889b      	ldrh	r3, [r3, #4]
 8004174:	8afa      	ldrh	r2, [r7, #22]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	82bb      	strh	r3, [r7, #20]
 800417a:	e004      	b.n	8004186 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	889a      	ldrh	r2, [r3, #4]
 8004180:	8afb      	ldrh	r3, [r7, #22]
 8004182:	4413      	add	r3, r2
 8004184:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	8aba      	ldrh	r2, [r7, #20]
 800418a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800418c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800418e:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	889b      	ldrh	r3, [r3, #4]
 8004194:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	889b      	ldrh	r3, [r3, #4]
 800419a:	827b      	strh	r3, [r7, #18]
 800419c:	88bb      	ldrh	r3, [r7, #4]
 800419e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80041a0:	e003      	b.n	80041aa <_tu_fifo_peek+0xaa>
 80041a2:	8a3a      	ldrh	r2, [r7, #16]
 80041a4:	8a7b      	ldrh	r3, [r7, #18]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	823b      	strh	r3, [r7, #16]
 80041aa:	8a7a      	ldrh	r2, [r7, #18]
 80041ac:	8a3b      	ldrh	r3, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d9f7      	bls.n	80041a2 <_tu_fifo_peek+0xa2>
  return idx;
 80041b2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80041b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80041b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041b8:	461a      	mov	r2, r3
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff fe7a 	bl	8003eb6 <_ff_pull>

  return true;
 80041c2:	2301      	movs	r3, #1
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3728      	adds	r7, #40	@ 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	@ 0x30
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	460b      	mov	r3, r1
 80041dc:	80fb      	strh	r3, [r7, #6]
 80041de:	4613      	mov	r3, r2
 80041e0:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	889b      	ldrh	r3, [r3, #4]
 80041e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80041e8:	88bb      	ldrh	r3, [r7, #4]
 80041ea:	843b      	strh	r3, [r7, #32]
 80041ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80041ee:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80041f0:	8c3a      	ldrh	r2, [r7, #32]
 80041f2:	8bfb      	ldrh	r3, [r7, #30]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d304      	bcc.n	8004202 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80041f8:	8c3a      	ldrh	r2, [r7, #32]
 80041fa:	8bfb      	ldrh	r3, [r7, #30]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	b29b      	uxth	r3, r3
 8004200:	e008      	b.n	8004214 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004202:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	8c39      	ldrh	r1, [r7, #32]
 800420a:	8bfb      	ldrh	r3, [r7, #30]
 800420c:	1acb      	subs	r3, r1, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	4413      	add	r3, r2
 8004212:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004214:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8004216:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <_tu_fifo_peek_n+0x54>
 800421c:	2300      	movs	r3, #0
 800421e:	e041      	b.n	80042a4 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	889b      	ldrh	r3, [r3, #4]
 8004224:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004226:	429a      	cmp	r2, r3
 8004228:	d91b      	bls.n	8004262 <_tu_fifo_peek_n+0x96>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	88bb      	ldrh	r3, [r7, #4]
 8004230:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	889b      	ldrh	r3, [r3, #4]
 8004236:	8afa      	ldrh	r2, [r7, #22]
 8004238:	429a      	cmp	r2, r3
 800423a:	d305      	bcc.n	8004248 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	889b      	ldrh	r3, [r3, #4]
 8004240:	8afa      	ldrh	r2, [r7, #22]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	82bb      	strh	r3, [r7, #20]
 8004246:	e004      	b.n	8004252 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	889a      	ldrh	r2, [r3, #4]
 800424c:	8afb      	ldrh	r3, [r7, #22]
 800424e:	4413      	add	r3, r2
 8004250:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	8aba      	ldrh	r2, [r7, #20]
 8004256:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8004258:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800425a:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	889b      	ldrh	r3, [r3, #4]
 8004260:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8004262:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	429a      	cmp	r2, r3
 8004268:	d201      	bcs.n	800426e <_tu_fifo_peek_n+0xa2>
 800426a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800426c:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	889b      	ldrh	r3, [r3, #4]
 8004272:	827b      	strh	r3, [r7, #18]
 8004274:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004276:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8004278:	e003      	b.n	8004282 <_tu_fifo_peek_n+0xb6>
 800427a:	8a3a      	ldrh	r2, [r7, #16]
 800427c:	8a7b      	ldrh	r3, [r7, #18]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	823b      	strh	r3, [r7, #16]
 8004282:	8a7a      	ldrh	r2, [r7, #18]
 8004284:	8a3b      	ldrh	r3, [r7, #16]
 8004286:	429a      	cmp	r2, r3
 8004288:	d9f7      	bls.n	800427a <_tu_fifo_peek_n+0xae>
  return idx;
 800428a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800428c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800428e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004290:	88fa      	ldrh	r2, [r7, #6]
 8004292:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	460b      	mov	r3, r1
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fe29 	bl	8003ef4 <_ff_pull_n>

  return n;
 80042a2:	88fb      	ldrh	r3, [r7, #6]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	@ 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b092      	sub	sp, #72	@ 0x48
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	460b      	mov	r3, r1
 80042bc:	80fb      	strh	r3, [r7, #6]
 80042be:	4613      	mov	r3, r2
 80042c0:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <_tu_fifo_write_n+0x20>
 80042c8:	2300      	movs	r3, #0
 80042ca:	e0bc      	b.n	8004446 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	891b      	ldrh	r3, [r3, #8]
 80042d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	895b      	ldrh	r3, [r3, #10]
 80042d6:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	79db      	ldrb	r3, [r3, #7]
 80042e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f083 0301 	eor.w	r3, r3, #1
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d036      	beq.n	800435e <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	889b      	ldrh	r3, [r3, #4]
 80042f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80042f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80042f8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80042fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80042fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80042fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004300:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004302:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004304:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004306:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004308:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800430a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800430c:	8c3b      	ldrh	r3, [r7, #32]
 800430e:	429a      	cmp	r2, r3
 8004310:	d304      	bcc.n	800431c <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8004312:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004314:	8c3b      	ldrh	r3, [r7, #32]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	b29b      	uxth	r3, r3
 800431a:	e008      	b.n	800432e <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800431c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8004324:	8c3b      	ldrh	r3, [r7, #32]
 8004326:	1acb      	subs	r3, r1, r3
 8004328:	b29b      	uxth	r3, r3
 800432a:	4413      	add	r3, r2
 800432c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800432e:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8004330:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004332:	8bfb      	ldrh	r3, [r7, #30]
 8004334:	429a      	cmp	r2, r3
 8004336:	d904      	bls.n	8004342 <_tu_fifo_write_n+0x96>
 8004338:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800433a:	8bfb      	ldrh	r3, [r7, #30]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	b29b      	uxth	r3, r3
 8004340:	e000      	b.n	8004344 <_tu_fifo_write_n+0x98>
 8004342:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004344:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800434a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800434c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800434e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004350:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004352:	4293      	cmp	r3, r2
 8004354:	bf28      	it	cs
 8004356:	4613      	movcs	r3, r2
 8004358:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800435a:	80fb      	strh	r3, [r7, #6]
 800435c:	e04b      	b.n	80043f6 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	889b      	ldrh	r3, [r3, #4]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	429a      	cmp	r2, r3
 8004366:	d317      	bcc.n	8004398 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8004368:	797b      	ldrb	r3, [r7, #5]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10e      	bne.n	800438c <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	8892      	ldrh	r2, [r2, #4]
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	88d2      	ldrh	r2, [r2, #6]
 800437a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800437e:	b292      	uxth	r2, r2
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	461a      	mov	r2, r3
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	4413      	add	r3, r2
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	889b      	ldrh	r3, [r3, #4]
 8004390:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8004392:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004394:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004396:	e02e      	b.n	80043f6 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	889b      	ldrh	r3, [r3, #4]
 800439c:	83bb      	strh	r3, [r7, #28]
 800439e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80043a0:	837b      	strh	r3, [r7, #26]
 80043a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043a4:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80043a6:	8b7a      	ldrh	r2, [r7, #26]
 80043a8:	8b3b      	ldrh	r3, [r7, #24]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d304      	bcc.n	80043b8 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80043ae:	8b7a      	ldrh	r2, [r7, #26]
 80043b0:	8b3b      	ldrh	r3, [r7, #24]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	e008      	b.n	80043ca <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80043b8:	8bbb      	ldrh	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	8b79      	ldrh	r1, [r7, #26]
 80043c0:	8b3b      	ldrh	r3, [r7, #24]
 80043c2:	1acb      	subs	r3, r1, r3
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80043ca:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 80043cc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	441a      	add	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	889b      	ldrh	r3, [r3, #4]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	429a      	cmp	r2, r3
 80043da:	db0c      	blt.n	80043f6 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8898      	ldrh	r0, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	889a      	ldrh	r2, [r3, #4]
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043ec:	4619      	mov	r1, r3
 80043ee:	f7ff fe61 	bl	80040b4 <advance_index>
 80043f2:	4603      	mov	r3, r0
 80043f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d023      	beq.n	8004444 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	889b      	ldrh	r3, [r3, #4]
 8004400:	82fb      	strh	r3, [r7, #22]
 8004402:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004404:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8004406:	e003      	b.n	8004410 <_tu_fifo_write_n+0x164>
 8004408:	8aba      	ldrh	r2, [r7, #20]
 800440a:	8afb      	ldrh	r3, [r7, #22]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	82bb      	strh	r3, [r7, #20]
 8004410:	8afa      	ldrh	r2, [r7, #22]
 8004412:	8abb      	ldrh	r3, [r7, #20]
 8004414:	429a      	cmp	r2, r3
 8004416:	d9f7      	bls.n	8004408 <_tu_fifo_write_n+0x15c>
  return idx;
 8004418:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800441a:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 800441c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	797b      	ldrb	r3, [r7, #5]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	460b      	mov	r3, r1
 8004426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fc66 	bl	8003cfa <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	889b      	ldrh	r3, [r3, #4]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fe3c 	bl	80040b4 <advance_index>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8004444:	88fb      	ldrh	r3, [r7, #6]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3740      	adds	r7, #64	@ 0x40
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af02      	add	r7, sp, #8
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	4611      	mov	r1, r2
 800445a:	461a      	mov	r2, r3
 800445c:	460b      	mov	r3, r1
 800445e:	80fb      	strh	r3, [r7, #6]
 8004460:	4613      	mov	r3, r2
 8004462:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	891b      	ldrh	r3, [r3, #8]
 8004468:	b298      	uxth	r0, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	895b      	ldrh	r3, [r3, #10]
 800446e:	b29b      	uxth	r3, r3
 8004470:	88f9      	ldrh	r1, [r7, #6]
 8004472:	797a      	ldrb	r2, [r7, #5]
 8004474:	9201      	str	r2, [sp, #4]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	4603      	mov	r3, r0
 800447a:	460a      	mov	r2, r1
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff fea4 	bl	80041cc <_tu_fifo_peek_n>
 8004484:	4603      	mov	r3, r0
 8004486:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8898      	ldrh	r0, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	895b      	ldrh	r3, [r3, #10]
 8004490:	b29b      	uxth	r3, r3
 8004492:	88fa      	ldrh	r2, [r7, #6]
 8004494:	4619      	mov	r1, r3
 8004496:	f7ff fe0d 	bl	80040b4 <advance_index>
 800449a:	4603      	mov	r3, r0
 800449c:	461a      	mov	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80044a2:	88fb      	ldrh	r3, [r7, #6]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8899      	ldrh	r1, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	891b      	ldrh	r3, [r3, #8]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	895b      	ldrh	r3, [r3, #10]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8279      	strh	r1, [r7, #18]
 80044c6:	823a      	strh	r2, [r7, #16]
 80044c8:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80044ca:	8a3a      	ldrh	r2, [r7, #16]
 80044cc:	89fb      	ldrh	r3, [r7, #14]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d304      	bcc.n	80044dc <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80044d2:	8a3a      	ldrh	r2, [r7, #16]
 80044d4:	89fb      	ldrh	r3, [r7, #14]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	b29b      	uxth	r3, r3
 80044da:	e008      	b.n	80044ee <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80044dc:	8a7b      	ldrh	r3, [r7, #18]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	8a39      	ldrh	r1, [r7, #16]
 80044e4:	89fb      	ldrh	r3, [r7, #14]
 80044e6:	1acb      	subs	r3, r1, r3
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	8892      	ldrh	r2, [r2, #4]
 80044f2:	82fb      	strh	r3, [r7, #22]
 80044f4:	4613      	mov	r3, r2
 80044f6:	82bb      	strh	r3, [r7, #20]
 80044f8:	8afa      	ldrh	r2, [r7, #22]
 80044fa:	8abb      	ldrh	r3, [r7, #20]
 80044fc:	4293      	cmp	r3, r2
 80044fe:	bf28      	it	cs
 8004500:	4613      	movcs	r3, r2
 8004502:	b29b      	uxth	r3, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	891b      	ldrh	r3, [r3, #8]
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	895b      	ldrh	r3, [r3, #10]
 8004522:	b29b      	uxth	r3, r3
 8004524:	429a      	cmp	r2, r3
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8899      	ldrh	r1, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	891b      	ldrh	r3, [r3, #8]
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	895b      	ldrh	r3, [r3, #10]
 8004550:	b29b      	uxth	r3, r3
 8004552:	81f9      	strh	r1, [r7, #14]
 8004554:	81ba      	strh	r2, [r7, #12]
 8004556:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8004558:	89ba      	ldrh	r2, [r7, #12]
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	429a      	cmp	r2, r3
 800455e:	d304      	bcc.n	800456a <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004560:	89ba      	ldrh	r2, [r7, #12]
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	e008      	b.n	800457c <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800456a:	89fb      	ldrh	r3, [r7, #14]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	89b9      	ldrh	r1, [r7, #12]
 8004572:	897b      	ldrh	r3, [r7, #10]
 8004574:	1acb      	subs	r3, r1, r3
 8004576:	b29b      	uxth	r3, r3
 8004578:	4413      	add	r3, r2
 800457a:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	8892      	ldrh	r2, [r2, #4]
 8004580:	4293      	cmp	r3, r2
 8004582:	bf2c      	ite	cs
 8004584:	2301      	movcs	r3, #1
 8004586:	2300      	movcc	r3, #0
 8004588:	b2db      	uxtb	r3, r3
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8004596:	b480      	push	{r7}
 8004598:	b087      	sub	sp, #28
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8899      	ldrh	r1, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	891b      	ldrh	r3, [r3, #8]
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	895b      	ldrh	r3, [r3, #10]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	82f9      	strh	r1, [r7, #22]
 80045b0:	82ba      	strh	r2, [r7, #20]
 80045b2:	827b      	strh	r3, [r7, #18]
 80045b4:	8afb      	ldrh	r3, [r7, #22]
 80045b6:	823b      	strh	r3, [r7, #16]
 80045b8:	8abb      	ldrh	r3, [r7, #20]
 80045ba:	81fb      	strh	r3, [r7, #14]
 80045bc:	8a7b      	ldrh	r3, [r7, #18]
 80045be:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80045c0:	89fa      	ldrh	r2, [r7, #14]
 80045c2:	89bb      	ldrh	r3, [r7, #12]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d304      	bcc.n	80045d2 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80045c8:	89fa      	ldrh	r2, [r7, #14]
 80045ca:	89bb      	ldrh	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	e008      	b.n	80045e4 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80045d2:	8a3b      	ldrh	r3, [r7, #16]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	89f9      	ldrh	r1, [r7, #14]
 80045da:	89bb      	ldrh	r3, [r7, #12]
 80045dc:	1acb      	subs	r3, r1, r3
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80045e4:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 80045e6:	8afa      	ldrh	r2, [r7, #22]
 80045e8:	897b      	ldrh	r3, [r7, #10]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d904      	bls.n	80045f8 <tu_fifo_remaining+0x62>
 80045ee:	8afa      	ldrh	r2, [r7, #22]
 80045f0:	897b      	ldrh	r3, [r7, #10]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	e000      	b.n	80045fa <tu_fifo_remaining+0x64>
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	891b      	ldrh	r3, [r3, #8]
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	895b      	ldrh	r3, [r3, #10]
 800461a:	b29b      	uxth	r3, r3
 800461c:	6839      	ldr	r1, [r7, #0]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fd6e 	bl	8004100 <_tu_fifo_peek>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8898      	ldrh	r0, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	895b      	ldrh	r3, [r3, #10]
 8004630:	b29b      	uxth	r3, r3
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	b292      	uxth	r2, r2
 8004636:	4619      	mov	r1, r3
 8004638:	f7ff fd3c 	bl	80040b4 <advance_index>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	4613      	mov	r3, r2
 800465a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 800465c:	88fa      	ldrh	r2, [r7, #6]
 800465e:	2300      	movs	r3, #0
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fef3 	bl	800444e <_tu_fifo_read_n>
 8004668:	4603      	mov	r3, r0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	4613      	mov	r3, r2
 800467e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004680:	88fa      	ldrh	r2, [r7, #6]
 8004682:	2301      	movs	r3, #1
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff fee1 	bl	800444e <_tu_fifo_read_n>
 800468c:	4603      	mov	r3, r0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	891b      	ldrh	r3, [r3, #8]
 80046a4:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ff47 	bl	800453a <tu_fifo_full>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <tu_fifo_write+0x36>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	79db      	ldrb	r3, [r3, #7]
 80046b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f083 0301 	eor.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <tu_fifo_write+0x36>
  {
    ret = false;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]
 80046ca:	e022      	b.n	8004712 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	889b      	ldrh	r3, [r3, #4]
 80046d0:	823b      	strh	r3, [r7, #16]
 80046d2:	8abb      	ldrh	r3, [r7, #20]
 80046d4:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 80046d6:	e003      	b.n	80046e0 <tu_fifo_write+0x4a>
 80046d8:	89fa      	ldrh	r2, [r7, #14]
 80046da:	8a3b      	ldrh	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	81fb      	strh	r3, [r7, #14]
 80046e0:	8a3a      	ldrh	r2, [r7, #16]
 80046e2:	89fb      	ldrh	r3, [r7, #14]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d9f7      	bls.n	80046d8 <tu_fifo_write+0x42>
  return idx;
 80046e8:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80046ea:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 80046ec:	8a7b      	ldrh	r3, [r7, #18]
 80046ee:	461a      	mov	r2, r3
 80046f0:	6839      	ldr	r1, [r7, #0]
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fae2 	bl	8003cbc <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	889b      	ldrh	r3, [r3, #4]
 80046fc:	8ab9      	ldrh	r1, [r7, #20]
 80046fe:	2201      	movs	r2, #1
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fcd7 	bl	80040b4 <advance_index>
 8004706:	4603      	mov	r3, r0
 8004708:	461a      	mov	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	811a      	strh	r2, [r3, #8]

    ret = true;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8004712:	7dfb      	ldrb	r3, [r7, #23]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 800472a:	88fa      	ldrh	r2, [r7, #6]
 800472c:	2300      	movs	r3, #0
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff fdbb 	bl	80042ac <_tu_fifo_write_n>
 8004736:	4603      	mov	r3, r0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800474e:	88fa      	ldrh	r2, [r7, #6]
 8004750:	2301      	movs	r3, #1
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff fda9 	bl	80042ac <_tu_fifo_write_n>
 800475a:	4603      	mov	r3, r0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8004778:	2301      	movs	r3, #1
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	79db      	ldrb	r3, [r3, #7]
 8004796:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d101      	bne.n	80047a6 <tu_fifo_set_overwritable+0x20>
    return true;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e006      	b.n	80047b4 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	79d3      	ldrb	r3, [r2, #7]
 80047aa:	78f9      	ldrb	r1, [r7, #3]
 80047ac:	f361 13c7 	bfi	r3, r1, #7, #1
 80047b0:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80047b2:	2301      	movs	r3, #1
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  return NULL;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return NULL;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <tud_suspend_cb>:
}

TU_ATTR_WEAK void tud_umount_cb(void) {
}

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 800483e:	b480      	push	{r7}
 8004840:	af00      	add	r7, sp, #0
}
 8004842:	bf00      	nop
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	603a      	str	r2, [r7, #0]
 8004856:	71fb      	strb	r3, [r7, #7]
 8004858:	460b      	mov	r3, r1
 800485a:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8004874:	2301      	movs	r3, #1
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8004888:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <tud_mounted+0x20>)
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf14      	ite	ne
 8004892:	2301      	movne	r3, #1
 8004894:	2300      	moveq	r3, #0
 8004896:	b2db      	uxtb	r3, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000750 	.word	0x20000750

080048a8 <tud_suspended>:

bool tud_suspended(void) {
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 80048ac:	4b07      	ldr	r3, [pc, #28]	@ (80048cc <tud_suspended+0x24>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000750 	.word	0x20000750

080048d0 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 80048d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004914 <tud_remote_wakeup+0x44>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <tud_remote_wakeup+0x2e>
 80048e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <tud_remote_wakeup+0x44>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <tud_remote_wakeup+0x2e>
 80048f0:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <tud_remote_wakeup+0x44>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <tud_remote_wakeup+0x32>
 80048fe:	2300      	movs	r3, #0
 8004900:	e005      	b.n	800490e <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8004902:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <tud_remote_wakeup+0x48>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f002 fcbc 	bl	8007284 <dcd_remote_wakeup>
  return true;
 800490c:	2301      	movs	r3, #1
}
 800490e:	4618      	mov	r0, r3
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000750 	.word	0x20000750
 8004918:	20000069 	.word	0x20000069

0800491c <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8004920:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <tud_inited+0x1c>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2bff      	cmp	r3, #255	@ 0xff
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	20000069 	.word	0x20000069

0800493c <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b08e      	sub	sp, #56	@ 0x38
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8004948:	f7ff ffe8 	bl	800491c <tud_inited>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8004952:	2301      	movs	r3, #1
 8004954:	e0b5      	b.n	8004ac2 <tud_rhport_init+0x186>
  }
  TU_ASSERT(rh_init);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <tud_rhport_init+0x36>
 800495c:	4b5b      	ldr	r3, [pc, #364]	@ (8004acc <tud_rhport_init+0x190>)
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d000      	beq.n	800496e <tud_rhport_init+0x32>
 800496c:	be00      	bkpt	0x0000
 800496e:	2300      	movs	r3, #0
 8004970:	e0a7      	b.n	8004ac2 <tud_rhport_init+0x186>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));
#endif

  tu_varclr(&_usbd_dev);
 8004972:	222c      	movs	r2, #44	@ 0x2c
 8004974:	2100      	movs	r1, #0
 8004976:	4856      	ldr	r0, [pc, #344]	@ (8004ad0 <tud_rhport_init+0x194>)
 8004978:	f004 f847 	bl	8008a0a <memset>
  _usbd_queued_setup = 0;
 800497c:	4b55      	ldr	r3, [pc, #340]	@ (8004ad4 <tud_rhport_init+0x198>)
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	4b55      	ldr	r3, [pc, #340]	@ (8004ad8 <tud_rhport_init+0x19c>)
 8004984:	617b      	str	r3, [r7, #20]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8004986:	bf00      	nop
 8004988:	4b54      	ldr	r3, [pc, #336]	@ (8004adc <tud_rhport_init+0x1a0>)
 800498a:	61bb      	str	r3, [r7, #24]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	3304      	adds	r3, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fee7 	bl	8004764 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8004996:	69bb      	ldr	r3, [r7, #24]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8004998:	4a51      	ldr	r2, [pc, #324]	@ (8004ae0 <tud_rhport_init+0x1a4>)
 800499a:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 800499c:	4b50      	ldr	r3, [pc, #320]	@ (8004ae0 <tud_rhport_init+0x1a4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <tud_rhport_init+0x7e>
 80049a4:	4b49      	ldr	r3, [pc, #292]	@ (8004acc <tud_rhport_init+0x190>)
 80049a6:	623b      	str	r3, [r7, #32]
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d000      	beq.n	80049b6 <tud_rhport_init+0x7a>
 80049b4:	be00      	bkpt	0x0000
 80049b6:	2300      	movs	r3, #0
 80049b8:	e083      	b.n	8004ac2 <tud_rhport_init+0x186>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 80049ba:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae4 <tud_rhport_init+0x1a8>)
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d014      	beq.n	80049ea <tud_rhport_init+0xae>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80049c0:	4849      	ldr	r0, [pc, #292]	@ (8004ae8 <tud_rhport_init+0x1ac>)
 80049c2:	f3af 8000 	nop.w
 80049c6:	4603      	mov	r3, r0
 80049c8:	4a48      	ldr	r2, [pc, #288]	@ (8004aec <tud_rhport_init+0x1b0>)
 80049ca:	6013      	str	r3, [r2, #0]
    TU_ASSERT(_app_driver_count + BUILTIN_DRIVER_COUNT <= UINT8_MAX);
 80049cc:	4b46      	ldr	r3, [pc, #280]	@ (8004ae8 <tud_rhport_init+0x1ac>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2bfd      	cmp	r3, #253	@ 0xfd
 80049d2:	d90a      	bls.n	80049ea <tud_rhport_init+0xae>
 80049d4:	4b3d      	ldr	r3, [pc, #244]	@ (8004acc <tud_rhport_init+0x190>)
 80049d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d000      	beq.n	80049e6 <tud_rhport_init+0xaa>
 80049e4:	be00      	bkpt	0x0000
 80049e6:	2300      	movs	r3, #0
 80049e8:	e06b      	b.n	8004ac2 <tud_rhport_init+0x186>
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80049f0:	e041      	b.n	8004a76 <tud_rhport_init+0x13a>
 80049f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80049f6:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const *driver = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
  if (drvid < _app_driver_count) {
 80049fc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae8 <tud_rhport_init+0x1ac>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	7cfa      	ldrb	r2, [r7, #19]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d209      	bcs.n	8004a1a <tud_rhport_init+0xde>
    driver = &_app_driver[drvid];
 8004a06:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <tud_rhport_init+0x1b0>)
 8004a08:	6819      	ldr	r1, [r3, #0]
 8004a0a:	7cfa      	ldrb	r2, [r7, #19]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	e011      	b.n	8004a3e <tud_rhport_init+0x102>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 8004a1a:	4b33      	ldr	r3, [pc, #204]	@ (8004ae8 <tud_rhport_init+0x1ac>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	3302      	adds	r3, #2
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	7cfa      	ldrb	r2, [r7, #19]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d20a      	bcs.n	8004a3e <tud_rhport_init+0x102>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae8 <tud_rhport_init+0x1ac>)
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	1a9a      	subs	r2, r3, r2
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <tud_rhport_init+0x1b4>)
 8004a3a:	4413      	add	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  return driver;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8004a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    TU_ASSERT(driver && driver->init);
 8004a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <tud_rhport_init+0x114>
 8004a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <tud_rhport_init+0x12a>
 8004a50:	4b1e      	ldr	r3, [pc, #120]	@ (8004acc <tud_rhport_init+0x190>)
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d000      	beq.n	8004a62 <tud_rhport_init+0x126>
 8004a60:	be00      	bkpt	0x0000
 8004a62:	2300      	movs	r3, #0
 8004a64:	e02d      	b.n	8004ac2 <tud_rhport_init+0x186>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8004a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a70:	3301      	adds	r3, #1
 8004a72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004a76:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae8 <tud_rhport_init+0x1ac>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d3b5      	bcc.n	80049f2 <tud_rhport_init+0xb6>
  }

  _usbd_rhport = rhport;
 8004a86:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <tud_rhport_init+0x1b8>)
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f002 facd 	bl	8007030 <dcd_init>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f083 0301 	eor.w	r3, r3, #1
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <tud_rhport_init+0x17c>
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <tud_rhport_init+0x190>)
 8004aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d000      	beq.n	8004ab4 <tud_rhport_init+0x178>
 8004ab2:	be00      	bkpt	0x0000
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e004      	b.n	8004ac2 <tud_rhport_init+0x186>
  dcd_int_enable(rhport);
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 fb56 	bl	800716c <dcd_int_enable>

  return true;
 8004ac0:	2301      	movs	r3, #1
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3738      	adds	r7, #56	@ 0x38
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	e000edf0 	.word	0xe000edf0
 8004ad0:	20000750 	.word	0x20000750
 8004ad4:	2000077c 	.word	0x2000077c
 8004ad8:	2000006c 	.word	0x2000006c
 8004adc:	20000070 	.word	0x20000070
 8004ae0:	20000848 	.word	0x20000848
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	20000784 	.word	0x20000784
 8004aec:	20000780 	.word	0x20000780
 8004af0:	08008cac 	.word	0x08008cac
 8004af4:	20000069 	.word	0x20000069

08004af8 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8004b02:	2300      	movs	r3, #0
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e03b      	b.n	8004b80 <configuration_reset+0x88>
 8004b08:	7ffb      	ldrb	r3, [r7, #31]
 8004b0a:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const *driver = NULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
  if (drvid < _app_driver_count) {
 8004b10:	4b29      	ldr	r3, [pc, #164]	@ (8004bb8 <configuration_reset+0xc0>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	7cfa      	ldrb	r2, [r7, #19]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d209      	bcs.n	8004b2e <configuration_reset+0x36>
    driver = &_app_driver[drvid];
 8004b1a:	4b28      	ldr	r3, [pc, #160]	@ (8004bbc <configuration_reset+0xc4>)
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	7cfa      	ldrb	r2, [r7, #19]
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e011      	b.n	8004b52 <configuration_reset+0x5a>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 8004b2e:	4b22      	ldr	r3, [pc, #136]	@ (8004bb8 <configuration_reset+0xc0>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	3302      	adds	r3, #2
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	7cfa      	ldrb	r2, [r7, #19]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d20a      	bcs.n	8004b52 <configuration_reset+0x5a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb8 <configuration_reset+0xc0>)
 8004b40:	7812      	ldrb	r2, [r2, #0]
 8004b42:	1a9a      	subs	r2, r3, r2
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc0 <configuration_reset+0xc8>)
 8004b4e:	4413      	add	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  return driver;
 8004b52:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8004b54:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <configuration_reset+0x78>
 8004b5c:	4b19      	ldr	r3, [pc, #100]	@ (8004bc4 <configuration_reset+0xcc>)
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d020      	beq.n	8004bae <configuration_reset+0xb6>
 8004b6c:	be00      	bkpt	0x0000
 8004b6e:	e01e      	b.n	8004bae <configuration_reset+0xb6>
    driver->reset(rhport);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	79fa      	ldrb	r2, [r7, #7]
 8004b76:	4610      	mov	r0, r2
 8004b78:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8004b7a:	7ffb      	ldrb	r3, [r7, #31]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <configuration_reset+0xc0>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	3302      	adds	r3, #2
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	7ffa      	ldrb	r2, [r7, #31]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d3bc      	bcc.n	8004b08 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8004b8e:	222c      	movs	r2, #44	@ 0x2c
 8004b90:	2100      	movs	r1, #0
 8004b92:	480d      	ldr	r0, [pc, #52]	@ (8004bc8 <configuration_reset+0xd0>)
 8004b94:	f003 ff39 	bl	8008a0a <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8004b98:	2210      	movs	r2, #16
 8004b9a:	21ff      	movs	r1, #255	@ 0xff
 8004b9c:	480b      	ldr	r0, [pc, #44]	@ (8004bcc <configuration_reset+0xd4>)
 8004b9e:	f003 ff34 	bl	8008a0a <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8004ba2:	220c      	movs	r2, #12
 8004ba4:	21ff      	movs	r1, #255	@ 0xff
 8004ba6:	480a      	ldr	r0, [pc, #40]	@ (8004bd0 <configuration_reset+0xd8>)
 8004ba8:	f003 ff2f 	bl	8008a0a <memset>
 8004bac:	e000      	b.n	8004bb0 <configuration_reset+0xb8>
    TU_ASSERT(driver,);
 8004bae:	bf00      	nop
}
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000784 	.word	0x20000784
 8004bbc:	20000780 	.word	0x20000780
 8004bc0:	08008cac 	.word	0x08008cac
 8004bc4:	e000edf0 	.word	0xe000edf0
 8004bc8:	20000750 	.word	0x20000750
 8004bcc:	20000754 	.word	0x20000754
 8004bd0:	20000764 	.word	0x20000764

08004bd4 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff89 	bl	8004af8 <configuration_reset>
  usbd_control_reset();
 8004be6:	f001 fd2f 	bl	8006648 <usbd_control_reset>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b093      	sub	sp, #76	@ 0x4c
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8004c00:	f7ff fe8c 	bl	800491c <tud_inited>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f083 0301 	eor.w	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 8191 	bne.w	8004f34 <tud_task_ext+0x340>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8004c12:	4bb5      	ldr	r3, [pc, #724]	@ (8004ee8 <tud_task_ext+0x2f4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8004c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2000      	movs	r0, #0
 8004c28:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fce8 	bl	8004606 <tu_fifo_read>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2001      	movs	r0, #1
 8004c42:	4798      	blx	r3

  return success;
 8004c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c48:	f083 0301 	eor.w	r3, r3, #1
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f040 8172 	bne.w	8004f38 <tud_task_ext+0x344>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8004c54:	7b7b      	ldrb	r3, [r7, #13]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	2b07      	cmp	r3, #7
 8004c5a:	f200 8153 	bhi.w	8004f04 <tud_task_ext+0x310>
 8004c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <tud_task_ext+0x70>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c85 	.word	0x08004c85
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004eb7 	.word	0x08004eb7
 8004c70:	08004e69 	.word	0x08004e69
 8004c74:	08004e93 	.word	0x08004e93
 8004c78:	08004ca3 	.word	0x08004ca3
 8004c7c:	08004d53 	.word	0x08004d53
 8004c80:	08004ea7 	.word	0x08004ea7
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8004c84:	7b3b      	ldrb	r3, [r7, #12]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ffa4 	bl	8004bd4 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8004c8c:	7c3a      	ldrb	r2, [r7, #16]
 8004c8e:	4b97      	ldr	r3, [pc, #604]	@ (8004eec <tud_task_ext+0x2f8>)
 8004c90:	709a      	strb	r2, [r3, #2]
        break;
 8004c92:	e14e      	b.n	8004f32 <tud_task_ext+0x33e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8004c94:	7b3b      	ldrb	r3, [r7, #12]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff ff9c 	bl	8004bd4 <usbd_reset>
        tud_umount_cb();
 8004c9c:	f7fb fdaa 	bl	80007f4 <tud_umount_cb>
        break;
 8004ca0:	e147      	b.n	8004f32 <tud_task_ext+0x33e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8004ca2:	4b93      	ldr	r3, [pc, #588]	@ (8004ef0 <tud_task_ext+0x2fc>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <tud_task_ext+0xce>
 8004cac:	4b91      	ldr	r3, [pc, #580]	@ (8004ef4 <tud_task_ext+0x300>)
 8004cae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 813f 	beq.w	8004f3c <tud_task_ext+0x348>
 8004cbe:	be00      	bkpt	0x0000
 8004cc0:	e13c      	b.n	8004f3c <tud_task_ext+0x348>
        _usbd_queued_setup--;
 8004cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef0 <tud_task_ext+0x2fc>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	4b88      	ldr	r3, [pc, #544]	@ (8004ef0 <tud_task_ext+0x2fc>)
 8004cce:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8004cd0:	4b87      	ldr	r3, [pc, #540]	@ (8004ef0 <tud_task_ext+0x2fc>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 811e 	bne.w	8004f18 <tud_task_ext+0x324>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8004cdc:	4a83      	ldr	r2, [pc, #524]	@ (8004eec <tud_task_ext+0x2f8>)
 8004cde:	7813      	ldrb	r3, [r2, #0]
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8004ce6:	4a81      	ldr	r2, [pc, #516]	@ (8004eec <tud_task_ext+0x2f8>)
 8004ce8:	f892 3020 	ldrb.w	r3, [r2, #32]
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8004cf4:	4a7d      	ldr	r2, [pc, #500]	@ (8004eec <tud_task_ext+0x2f8>)
 8004cf6:	f892 3020 	ldrb.w	r3, [r2, #32]
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8004d02:	4a7a      	ldr	r2, [pc, #488]	@ (8004eec <tud_task_ext+0x2f8>)
 8004d04:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8004d10:	4a76      	ldr	r2, [pc, #472]	@ (8004eec <tud_task_ext+0x2f8>)
 8004d12:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8004d16:	f023 0304 	bic.w	r3, r3, #4
 8004d1a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8004d1e:	7b3a      	ldrb	r2, [r7, #12]
 8004d20:	f107 030c 	add.w	r3, r7, #12
 8004d24:	3304      	adds	r3, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f000 f927 	bl	8004f7c <process_control_request>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f083 0301 	eor.w	r3, r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80f0 	beq.w	8004f1c <tud_task_ext+0x328>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8004d3c:	7b3b      	ldrb	r3, [r7, #12]
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f002 fc73 	bl	800762c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8004d46:	7b3b      	ldrb	r3, [r7, #12]
 8004d48:	2180      	movs	r1, #128	@ 0x80
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f002 fc6e 	bl	800762c <dcd_edpt_stall>
        }
        break;
 8004d50:	e0e4      	b.n	8004f1c <tud_task_ext+0x328>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8004d52:	7c3b      	ldrb	r3, [r7, #16]
 8004d54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004d58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004d5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
}

// Get Endpoint number from address
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_number(uint8_t addr) {
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004d60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d68:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8004d6a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8004d6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004d72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004d76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d7a:	09db      	lsrs	r3, r3, #7
 8004d7c:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8004d7e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8004d82:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8004d86:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004d8a:	4958      	ldr	r1, [pc, #352]	@ (8004eec <tud_task_ext+0x2f8>)
 8004d8c:	0052      	lsls	r2, r2, #1
 8004d8e:	440a      	add	r2, r1
 8004d90:	4413      	add	r3, r2
 8004d92:	f103 0220 	add.w	r2, r3, #32
 8004d96:	7813      	ldrb	r3, [r2, #0]
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8004d9e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8004da2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004da6:	4951      	ldr	r1, [pc, #324]	@ (8004eec <tud_task_ext+0x2f8>)
 8004da8:	0052      	lsls	r2, r2, #1
 8004daa:	440a      	add	r2, r1
 8004dac:	4413      	add	r3, r2
 8004dae:	f103 0220 	add.w	r2, r3, #32
 8004db2:	7813      	ldrb	r3, [r2, #0]
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8004dba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d107      	bne.n	8004dd2 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8004dc2:	7b38      	ldrb	r0, [r7, #12]
 8004dc4:	7c7a      	ldrb	r2, [r7, #17]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8004dcc:	f001 fc72 	bl	80066b4 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8004dd0:	e0af      	b.n	8004f32 <tud_task_ext+0x33e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8004dd2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8004dd6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004dda:	4944      	ldr	r1, [pc, #272]	@ (8004eec <tud_task_ext+0x2f8>)
 8004ddc:	0052      	lsls	r2, r2, #1
 8004dde:	440a      	add	r2, r1
 8004de0:	4413      	add	r3, r2
 8004de2:	3314      	adds	r3, #20
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const *driver = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	623b      	str	r3, [r7, #32]
  if (drvid < _app_driver_count) {
 8004dee:	4b42      	ldr	r3, [pc, #264]	@ (8004ef8 <tud_task_ext+0x304>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d20a      	bcs.n	8004e10 <tud_task_ext+0x21c>
    driver = &_app_driver[drvid];
 8004dfa:	4b40      	ldr	r3, [pc, #256]	@ (8004efc <tud_task_ext+0x308>)
 8004dfc:	6819      	ldr	r1, [r3, #0]
 8004dfe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	e013      	b.n	8004e38 <tud_task_ext+0x244>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 8004e10:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <tud_task_ext+0x304>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	3302      	adds	r3, #2
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d20b      	bcs.n	8004e38 <tud_task_ext+0x244>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004e20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e24:	4a34      	ldr	r2, [pc, #208]	@ (8004ef8 <tud_task_ext+0x304>)
 8004e26:	7812      	ldrb	r2, [r2, #0]
 8004e28:	1a9a      	subs	r2, r3, r2
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4a33      	ldr	r2, [pc, #204]	@ (8004f00 <tud_task_ext+0x30c>)
 8004e34:	4413      	add	r3, r2
 8004e36:	623b      	str	r3, [r7, #32]
  return driver;
 8004e38:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8004e3a:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8004e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <tud_task_ext+0x262>
 8004e42:	4b2c      	ldr	r3, [pc, #176]	@ (8004ef4 <tud_task_ext+0x300>)
 8004e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d076      	beq.n	8004f40 <tud_task_ext+0x34c>
 8004e52:	be00      	bkpt	0x0000
 8004e54:	e074      	b.n	8004f40 <tud_task_ext+0x34c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8004e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e58:	699c      	ldr	r4, [r3, #24]
 8004e5a:	7b38      	ldrb	r0, [r7, #12]
 8004e5c:	7c7a      	ldrb	r2, [r7, #17]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8004e64:	47a0      	blx	r4
        break;
 8004e66:	e064      	b.n	8004f32 <tud_task_ext+0x33e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8004e68:	4b20      	ldr	r3, [pc, #128]	@ (8004eec <tud_task_ext+0x2f8>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d054      	beq.n	8004f20 <tud_task_ext+0x32c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8004e76:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <tud_task_ext+0x2f8>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fccc 	bl	8004828 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8004e90:	e046      	b.n	8004f20 <tud_task_ext+0x32c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8004e92:	4b16      	ldr	r3, [pc, #88]	@ (8004eec <tud_task_ext+0x2f8>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d041      	beq.n	8004f24 <tud_task_ext+0x330>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8004ea0:	f7ff fccd 	bl	800483e <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8004ea4:	e03e      	b.n	8004f24 <tud_task_ext+0x330>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d03d      	beq.n	8004f28 <tud_task_ext+0x334>
          event.func_call.func(event.func_call.param);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4798      	blx	r3
        }
        break;
 8004eb4:	e038      	b.n	8004f28 <tud_task_ext+0x334>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <tud_task_ext+0x2f8>)
 8004eb8:	78db      	ldrb	r3, [r3, #3]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8004ec2:	7efb      	ldrb	r3, [r7, #27]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d027      	beq.n	8004f2c <tud_task_ext+0x338>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fc7c 	bl	80047dc <tud_sof_cb>
        }
      break;
 8004ee4:	e022      	b.n	8004f2c <tud_task_ext+0x338>
 8004ee6:	bf00      	nop
 8004ee8:	20000848 	.word	0x20000848
 8004eec:	20000750 	.word	0x20000750
 8004ef0:	2000077c 	.word	0x2000077c
 8004ef4:	e000edf0 	.word	0xe000edf0
 8004ef8:	20000784 	.word	0x20000784
 8004efc:	20000780 	.word	0x20000780
 8004f00:	08008cac 	.word	0x08008cac

      default:
        TU_BREAKPOINT();
 8004f04:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <tud_task_ext+0x354>)
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <tud_task_ext+0x33c>
 8004f14:	be00      	bkpt	0x0000
        break;
 8004f16:	e00b      	b.n	8004f30 <tud_task_ext+0x33c>
          break;
 8004f18:	bf00      	nop
 8004f1a:	e67a      	b.n	8004c12 <tud_task_ext+0x1e>
        break;
 8004f1c:	bf00      	nop
 8004f1e:	e678      	b.n	8004c12 <tud_task_ext+0x1e>
        break;
 8004f20:	bf00      	nop
 8004f22:	e676      	b.n	8004c12 <tud_task_ext+0x1e>
        break;
 8004f24:	bf00      	nop
 8004f26:	e674      	b.n	8004c12 <tud_task_ext+0x1e>
        break;
 8004f28:	bf00      	nop
 8004f2a:	e672      	b.n	8004c12 <tud_task_ext+0x1e>
      break;
 8004f2c:	bf00      	nop
 8004f2e:	e670      	b.n	8004c12 <tud_task_ext+0x1e>
        break;
 8004f30:	bf00      	nop
  while (1) {
 8004f32:	e66e      	b.n	8004c12 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8004f34:	bf00      	nop
 8004f36:	e004      	b.n	8004f42 <tud_task_ext+0x34e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8004f38:	bf00      	nop
 8004f3a:	e002      	b.n	8004f42 <tud_task_ext+0x34e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <tud_task_ext+0x34e>
          TU_ASSERT(driver,);
 8004f40:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8004f42:	374c      	adds	r7, #76	@ 0x4c
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd90      	pop	{r4, r7, pc}
 8004f48:	e000edf0 	.word	0xe000edf0

08004f4c <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 fb7e 	bl	8006660 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	7bf8      	ldrb	r0, [r7, #15]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	4798      	blx	r3
 8004f70:	4603      	mov	r3, r0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b09a      	sub	sp, #104	@ 0x68
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8004f88:	2000      	movs	r0, #0
 8004f8a:	f001 fb69 	bl	8006660 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b60      	cmp	r3, #96	@ 0x60
 8004f9a:	d10a      	bne.n	8004fb2 <process_control_request+0x36>
 8004f9c:	4ba8      	ldr	r3, [pc, #672]	@ (8005240 <process_control_request+0x2c4>)
 8004f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d000      	beq.n	8004fae <process_control_request+0x32>
 8004fac:	be00      	bkpt	0x0000
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e2cf      	b.n	8005552 <process_control_request+0x5d6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b40      	cmp	r3, #64	@ 0x40
 8004fbe:	d10a      	bne.n	8004fd6 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8004fc0:	48a0      	ldr	r0, [pc, #640]	@ (8005244 <process_control_request+0x2c8>)
 8004fc2:	f001 fb4d 	bl	8006660 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fc3d 	bl	800484c <tud_vendor_control_xfer_cb>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	e2bd      	b.n	8005552 <process_control_request+0x5d6>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	f000 81d7 	beq.w	8005394 <process_control_request+0x418>
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	f300 82a6 	bgt.w	8005538 <process_control_request+0x5bc>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <process_control_request+0x7c>
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	f000 8157 	beq.w	80052a4 <process_control_request+0x328>
 8004ff6:	e29f      	b.n	8005538 <process_control_request+0x5bc>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b20      	cmp	r3, #32
 8005004:	d14a      	bne.n	800509c <process_control_request+0x120>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	889b      	ldrh	r3, [r3, #4]
 800500a:	b29b      	uxth	r3, r3
 800500c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800500e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8005016:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d901      	bls.n	8005022 <process_control_request+0xa6>
 800501e:	2300      	movs	r3, #0
 8005020:	e297      	b.n	8005552 <process_control_request+0x5d6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005022:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005026:	4a88      	ldr	r2, [pc, #544]	@ (8005248 <process_control_request+0x2cc>)
 8005028:	4413      	add	r3, r2
 800502a:	791b      	ldrb	r3, [r3, #4]
 800502c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const *driver = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (drvid < _app_driver_count) {
 8005034:	4b85      	ldr	r3, [pc, #532]	@ (800524c <process_control_request+0x2d0>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800503c:	429a      	cmp	r2, r3
 800503e:	d20a      	bcs.n	8005056 <process_control_request+0xda>
    driver = &_app_driver[drvid];
 8005040:	4b83      	ldr	r3, [pc, #524]	@ (8005250 <process_control_request+0x2d4>)
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005054:	e013      	b.n	800507e <process_control_request+0x102>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 8005056:	4b7d      	ldr	r3, [pc, #500]	@ (800524c <process_control_request+0x2d0>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	3302      	adds	r3, #2
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005062:	429a      	cmp	r2, r3
 8005064:	d20b      	bcs.n	800507e <process_control_request+0x102>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005066:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800506a:	4a78      	ldr	r2, [pc, #480]	@ (800524c <process_control_request+0x2d0>)
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	1a9a      	subs	r2, r3, r2
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4a76      	ldr	r2, [pc, #472]	@ (8005254 <process_control_request+0x2d8>)
 800507a:	4413      	add	r3, r2
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005080:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8005082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <process_control_request+0x110>
 8005088:	2300      	movs	r3, #0
 800508a:	e262      	b.n	8005552 <process_control_request+0x5d6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff ff5a 	bl	8004f4c <invoke_class_control>
 8005098:	4603      	mov	r3, r0
 800509a:	e25a      	b.n	8005552 <process_control_request+0x5d6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <process_control_request+0x144>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80050aa:	4b65      	ldr	r3, [pc, #404]	@ (8005240 <process_control_request+0x2c4>)
 80050ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d000      	beq.n	80050bc <process_control_request+0x140>
 80050ba:	be00      	bkpt	0x0000
        return false;
 80050bc:	2300      	movs	r3, #0
 80050be:	e248      	b.n	8005552 <process_control_request+0x5d6>
      }

      switch ( p_request->bRequest ) {
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	f200 80e0 	bhi.w	800528a <process_control_request+0x30e>
 80050ca:	a201      	add	r2, pc, #4	@ (adr r2, 80050d0 <process_control_request+0x154>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	08005259 	.word	0x08005259
 80050d4:	0800521d 	.word	0x0800521d
 80050d8:	0800528b 	.word	0x0800528b
 80050dc:	080051f7 	.word	0x080051f7
 80050e0:	0800528b 	.word	0x0800528b
 80050e4:	080050f9 	.word	0x080050f9
 80050e8:	080051dd 	.word	0x080051dd
 80050ec:	0800528b 	.word	0x0800528b
 80050f0:	0800511d 	.word	0x0800511d
 80050f4:	08005135 	.word	0x08005135
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80050f8:	6838      	ldr	r0, [r7, #0]
 80050fa:	f001 fac1 	bl	8006680 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	885b      	ldrh	r3, [r3, #2]
 8005102:	b29b      	uxth	r3, r3
 8005104:	b2da      	uxtb	r2, r3
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f002 f87e 	bl	800720c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8005110:	4a4d      	ldr	r2, [pc, #308]	@ (8005248 <process_control_request+0x2cc>)
 8005112:	7813      	ldrb	r3, [r2, #0]
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	7013      	strb	r3, [r2, #0]
        break;
 800511a:	e0c2      	b.n	80052a2 <process_control_request+0x326>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800511c:	4b4a      	ldr	r3, [pc, #296]	@ (8005248 <process_control_request+0x2cc>)
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8005124:	f107 0213 	add.w	r2, r7, #19
 8005128:	79f8      	ldrb	r0, [r7, #7]
 800512a:	2301      	movs	r3, #1
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	f001 fa1b 	bl	8006568 <tud_control_xfer>
        }
        break;
 8005132:	e0b6      	b.n	80052a2 <process_control_request+0x326>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	885b      	ldrh	r3, [r3, #2]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800513e:	4b42      	ldr	r3, [pc, #264]	@ (8005248 <process_control_request+0x2cc>)
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005148:	429a      	cmp	r2, r3
 800514a:	d041      	beq.n	80051d0 <process_control_request+0x254>
            if ( _usbd_dev.cfg_num ) {
 800514c:	4b3e      	ldr	r3, [pc, #248]	@ (8005248 <process_control_request+0x2cc>)
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d014      	beq.n	8005180 <process_control_request+0x204>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f002 f91c 	bl	8007398 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	4618      	mov	r0, r3
 8005164:	f002 f980 	bl	8007468 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8005168:	4b37      	ldr	r3, [pc, #220]	@ (8005248 <process_control_request+0x2cc>)
 800516a:	789b      	ldrb	r3, [r3, #2]
 800516c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fcc0 	bl	8004af8 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8005178:	4a33      	ldr	r2, [pc, #204]	@ (8005248 <process_control_request+0x2cc>)
 800517a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800517e:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8005180:	4a31      	ldr	r2, [pc, #196]	@ (8005248 <process_control_request+0x2cc>)
 8005182:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005186:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8005188:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01d      	beq.n	80051cc <process_control_request+0x250>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8005190:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f9e3 	bl	8005564 <process_set_config>
 800519e:	4603      	mov	r3, r0
 80051a0:	f083 0301 	eor.w	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <process_control_request+0x24a>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80051aa:	4b25      	ldr	r3, [pc, #148]	@ (8005240 <process_control_request+0x2c4>)
 80051ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d000      	beq.n	80051bc <process_control_request+0x240>
 80051ba:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80051bc:	4b22      	ldr	r3, [pc, #136]	@ (8005248 <process_control_request+0x2cc>)
 80051be:	2200      	movs	r2, #0
 80051c0:	705a      	strb	r2, [r3, #1]
                return false;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e1c5      	b.n	8005552 <process_control_request+0x5d6>
              }
              tud_mount_cb();
 80051c6:	f7fb fb07 	bl	80007d8 <tud_mount_cb>
 80051ca:	e001      	b.n	80051d0 <process_control_request+0x254>
            } else {
              tud_umount_cb();
 80051cc:	f7fb fb12 	bl	80007f4 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f955 	bl	8006484 <tud_control_status>
        }
        break;
 80051da:	e062      	b.n	80052a2 <process_control_request+0x326>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fafd 	bl	80057e0 <process_get_descriptor>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f083 0301 	eor.w	r3, r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d056      	beq.n	80052a0 <process_control_request+0x324>
 80051f2:	2300      	movs	r3, #0
 80051f4:	e1ad      	b.n	8005552 <process_control_request+0x5d6>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	885b      	ldrh	r3, [r3, #2]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d10b      	bne.n	8005218 <process_control_request+0x29c>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8005200:	4a11      	ldr	r2, [pc, #68]	@ (8005248 <process_control_request+0x2cc>)
 8005202:	7813      	ldrb	r3, [r2, #0]
 8005204:	f043 0308 	orr.w	r3, r3, #8
 8005208:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f001 f938 	bl	8006484 <tud_control_status>
            break;
 8005214:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8005216:	e044      	b.n	80052a2 <process_control_request+0x326>
            default: return false;
 8005218:	2300      	movs	r3, #0
 800521a:	e19a      	b.n	8005552 <process_control_request+0x5d6>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	885b      	ldrh	r3, [r3, #2]
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b01      	cmp	r3, #1
 8005224:	d001      	beq.n	800522a <process_control_request+0x2ae>
 8005226:	2300      	movs	r3, #0
 8005228:	e193      	b.n	8005552 <process_control_request+0x5d6>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800522a:	4a07      	ldr	r2, [pc, #28]	@ (8005248 <process_control_request+0x2cc>)
 800522c:	7813      	ldrb	r3, [r2, #0]
 800522e:	f023 0308 	bic.w	r3, r3, #8
 8005232:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f001 f923 	bl	8006484 <tud_control_status>
        break;
 800523e:	e030      	b.n	80052a2 <process_control_request+0x326>
 8005240:	e000edf0 	.word	0xe000edf0
 8005244:	0800484d 	.word	0x0800484d
 8005248:	20000750 	.word	0x20000750
 800524c:	20000784 	.word	0x20000784
 8005250:	20000780 	.word	0x20000780
 8005254:	08008cac 	.word	0x08008cac

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8005258:	4b9b      	ldr	r3, [pc, #620]	@ (80054c8 <process_control_request+0x54c>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	4b98      	ldr	r3, [pc, #608]	@ (80054c8 <process_control_request+0x54c>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	b29b      	uxth	r3, r3
 8005274:	4313      	orrs	r3, r2
 8005276:	b29b      	uxth	r3, r3
 8005278:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 800527a:	f107 0210 	add.w	r2, r7, #16
 800527e:	79f8      	ldrb	r0, [r7, #7]
 8005280:	2302      	movs	r3, #2
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	f001 f970 	bl	8006568 <tud_control_xfer>
          break;
 8005288:	e00b      	b.n	80052a2 <process_control_request+0x326>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800528a:	4b90      	ldr	r3, [pc, #576]	@ (80054cc <process_control_request+0x550>)
 800528c:	647b      	str	r3, [r7, #68]	@ 0x44
 800528e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d000      	beq.n	800529c <process_control_request+0x320>
 800529a:	be00      	bkpt	0x0000
 800529c:	2300      	movs	r3, #0
 800529e:	e158      	b.n	8005552 <process_control_request+0x5d6>
        break;
 80052a0:	bf00      	nop
      }
    break;
 80052a2:	e155      	b.n	8005550 <process_control_request+0x5d4>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	889b      	ldrh	r3, [r3, #4]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80052ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80052b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052b8:	2b0f      	cmp	r3, #15
 80052ba:	d901      	bls.n	80052c0 <process_control_request+0x344>
 80052bc:	2300      	movs	r3, #0
 80052be:	e148      	b.n	8005552 <process_control_request+0x5d6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80052c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052c4:	4a80      	ldr	r2, [pc, #512]	@ (80054c8 <process_control_request+0x54c>)
 80052c6:	4413      	add	r3, r2
 80052c8:	791b      	ldrb	r3, [r3, #4]
 80052ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const *driver = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	623b      	str	r3, [r7, #32]
  if (drvid < _app_driver_count) {
 80052d2:	4b7f      	ldr	r3, [pc, #508]	@ (80054d0 <process_control_request+0x554>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80052da:	429a      	cmp	r2, r3
 80052dc:	d20a      	bcs.n	80052f4 <process_control_request+0x378>
    driver = &_app_driver[drvid];
 80052de:	4b7d      	ldr	r3, [pc, #500]	@ (80054d4 <process_control_request+0x558>)
 80052e0:	6819      	ldr	r1, [r3, #0]
 80052e2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80052e6:	4613      	mov	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	623b      	str	r3, [r7, #32]
 80052f2:	e013      	b.n	800531c <process_control_request+0x3a0>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 80052f4:	4b76      	ldr	r3, [pc, #472]	@ (80054d0 <process_control_request+0x554>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	3302      	adds	r3, #2
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005300:	429a      	cmp	r2, r3
 8005302:	d20b      	bcs.n	800531c <process_control_request+0x3a0>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005304:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005308:	4a71      	ldr	r2, [pc, #452]	@ (80054d0 <process_control_request+0x554>)
 800530a:	7812      	ldrb	r2, [r2, #0]
 800530c:	1a9a      	subs	r2, r3, r2
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4a70      	ldr	r2, [pc, #448]	@ (80054d8 <process_control_request+0x55c>)
 8005318:	4413      	add	r3, r2
 800531a:	623b      	str	r3, [r7, #32]
  return driver;
 800531c:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800531e:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8005320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <process_control_request+0x3ae>
 8005326:	2300      	movs	r3, #0
 8005328:	e113      	b.n	8005552 <process_control_request+0x5d6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fe0b 	bl	8004f4c <invoke_class_control>
 8005336:	4603      	mov	r3, r0
 8005338:	f083 0301 	eor.w	r3, r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8105 	beq.w	800554e <process_control_request+0x5d2>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <process_control_request+0x3da>
 8005352:	2300      	movs	r3, #0
 8005354:	e0fd      	b.n	8005552 <process_control_request+0x5d6>

        switch(p_request->bRequest) {
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	3b0a      	subs	r3, #10
 800535c:	2b01      	cmp	r3, #1
 800535e:	d816      	bhi.n	800538e <process_control_request+0x412>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8005360:	2000      	movs	r0, #0
 8005362:	f001 f97d 	bl	8006660 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	2b0a      	cmp	r3, #10
 800536c:	d109      	bne.n	8005382 <process_control_request+0x406>
              uint8_t alternate = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8005372:	f107 020f 	add.w	r2, r7, #15
 8005376:	79f8      	ldrb	r0, [r7, #7]
 8005378:	2301      	movs	r3, #1
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	f001 f8f4 	bl	8006568 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8005380:	e007      	b.n	8005392 <process_control_request+0x416>
              tud_control_status(rhport, p_request);
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f001 f87c 	bl	8006484 <tud_control_status>
          break;
 800538c:	e001      	b.n	8005392 <process_control_request+0x416>

          default: return false;
 800538e:	2300      	movs	r3, #0
 8005390:	e0df      	b.n	8005552 <process_control_request+0x5d6>
        }
      }
      break;
 8005392:	e0dc      	b.n	800554e <process_control_request+0x5d2>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	889b      	ldrh	r3, [r3, #4]
 8005398:	b29b      	uxth	r3, r3
 800539a:	83bb      	strh	r3, [r7, #28]
 800539c:	8bbb      	ldrh	r3, [r7, #28]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80053a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80053a8:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80053aa:	7fbb      	ldrb	r3, [r7, #30]
 80053ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b0:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80053b2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80053b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80053ba:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80053bc:	7ffb      	ldrb	r3, [r7, #31]
 80053be:	09db      	lsrs	r3, r3, #7
 80053c0:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80053c2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80053c6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d90a      	bls.n	80053e4 <process_control_request+0x468>
 80053ce:	4b3f      	ldr	r3, [pc, #252]	@ (80054cc <process_control_request+0x550>)
 80053d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d000      	beq.n	80053e0 <process_control_request+0x464>
 80053de:	be00      	bkpt	0x0000
 80053e0:	2300      	movs	r3, #0
 80053e2:	e0b6      	b.n	8005552 <process_control_request+0x5d6>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80053e4:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80053e8:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80053ec:	4936      	ldr	r1, [pc, #216]	@ (80054c8 <process_control_request+0x54c>)
 80053ee:	0052      	lsls	r2, r2, #1
 80053f0:	440a      	add	r2, r1
 80053f2:	4413      	add	r3, r2
 80053f4:	3314      	adds	r3, #20
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const *driver = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  if (drvid < _app_driver_count) {
 80053fe:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <process_control_request+0x554>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	7efa      	ldrb	r2, [r7, #27]
 8005404:	429a      	cmp	r2, r3
 8005406:	d209      	bcs.n	800541c <process_control_request+0x4a0>
    driver = &_app_driver[drvid];
 8005408:	4b32      	ldr	r3, [pc, #200]	@ (80054d4 <process_control_request+0x558>)
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	7efa      	ldrb	r2, [r7, #27]
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e011      	b.n	8005440 <process_control_request+0x4c4>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 800541c:	4b2c      	ldr	r3, [pc, #176]	@ (80054d0 <process_control_request+0x554>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	3302      	adds	r3, #2
 8005422:	b2db      	uxtb	r3, r3
 8005424:	7efa      	ldrb	r2, [r7, #27]
 8005426:	429a      	cmp	r2, r3
 8005428:	d20a      	bcs.n	8005440 <process_control_request+0x4c4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800542a:	7efb      	ldrb	r3, [r7, #27]
 800542c:	4a28      	ldr	r2, [pc, #160]	@ (80054d0 <process_control_request+0x554>)
 800542e:	7812      	ldrb	r2, [r2, #0]
 8005430:	1a9a      	subs	r2, r3, r2
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4a27      	ldr	r2, [pc, #156]	@ (80054d8 <process_control_request+0x55c>)
 800543c:	4413      	add	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
  return driver;
 8005440:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8005442:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <process_control_request+0x4f0>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8005452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <process_control_request+0x4e0>
 8005458:	2300      	movs	r3, #0
 800545a:	e07a      	b.n	8005552 <process_control_request+0x5d6>
        return invoke_class_control(rhport, driver, p_request);
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fd72 	bl	8004f4c <invoke_class_control>
 8005468:	4603      	mov	r3, r0
 800546a:	e072      	b.n	8005552 <process_control_request+0x5d6>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d017      	beq.n	80054a4 <process_control_request+0x528>
 8005474:	2b03      	cmp	r3, #3
 8005476:	dc52      	bgt.n	800551e <process_control_request+0x5a2>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <process_control_request+0x506>
 800547c:	2b01      	cmp	r3, #1
 800547e:	d011      	beq.n	80054a4 <process_control_request+0x528>
 8005480:	e04d      	b.n	800551e <process_control_request+0x5a2>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8005482:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f000 ffa4 	bl	80063d8 <usbd_edpt_stalled>
 8005490:	4603      	mov	r3, r0
 8005492:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8005494:	f107 020c 	add.w	r2, r7, #12
 8005498:	79f8      	ldrb	r0, [r7, #7]
 800549a:	2302      	movs	r3, #2
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	f001 f863 	bl	8006568 <tud_control_xfer>
          }
          break;
 80054a2:	e048      	b.n	8005536 <process_control_request+0x5ba>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	885b      	ldrh	r3, [r3, #2]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11d      	bne.n	80054ea <process_control_request+0x56e>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d112      	bne.n	80054dc <process_control_request+0x560>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80054b6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 ff4c 	bl	800635c <usbd_edpt_clear_stall>
 80054c4:	e011      	b.n	80054ea <process_control_request+0x56e>
 80054c6:	bf00      	nop
 80054c8:	20000750 	.word	0x20000750
 80054cc:	e000edf0 	.word	0xe000edf0
 80054d0:	20000784 	.word	0x20000784
 80054d4:	20000780 	.word	0x20000780
 80054d8:	08008cac 	.word	0x08008cac
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80054dc:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	4611      	mov	r1, r2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fefb 	bl	80062e0 <usbd_edpt_stall>
              }
            }

            if (driver) {
 80054ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d021      	beq.n	8005534 <process_control_request+0x5b8>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fd28 	bl	8004f4c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80054fc:	2000      	movs	r0, #0
 80054fe:	f001 f8af 	bl	8006660 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8005502:	4b16      	ldr	r3, [pc, #88]	@ (800555c <process_control_request+0x5e0>)
 8005504:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005508:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d110      	bne.n	8005534 <process_control_request+0x5b8>
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 ffb4 	bl	8006484 <tud_control_status>
            }
          }
          break;
 800551c:	e00a      	b.n	8005534 <process_control_request+0x5b8>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 800551e:	4b10      	ldr	r3, [pc, #64]	@ (8005560 <process_control_request+0x5e4>)
 8005520:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d000      	beq.n	8005530 <process_control_request+0x5b4>
 800552e:	be00      	bkpt	0x0000
            return false;
 8005530:	2300      	movs	r3, #0
 8005532:	e00e      	b.n	8005552 <process_control_request+0x5d6>
          break;
 8005534:	bf00      	nop
        }
      }
    }
    break;
 8005536:	e00b      	b.n	8005550 <process_control_request+0x5d4>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8005538:	4b09      	ldr	r3, [pc, #36]	@ (8005560 <process_control_request+0x5e4>)
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
 800553c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d000      	beq.n	800554a <process_control_request+0x5ce>
 8005548:	be00      	bkpt	0x0000
      return false;
 800554a:	2300      	movs	r3, #0
 800554c:	e001      	b.n	8005552 <process_control_request+0x5d6>
      break;
 800554e:	bf00      	nop
  }

  return true;
 8005550:	2301      	movs	r3, #1
}
 8005552:	4618      	mov	r0, r3
 8005554:	3768      	adds	r7, #104	@ 0x68
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000750 	.word	0x20000750
 8005560:	e000edf0 	.word	0xe000edf0

08005564 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b096      	sub	sp, #88	@ 0x58
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	460a      	mov	r2, r1
 800556e:	71fb      	strb	r3, [r7, #7]
 8005570:	4613      	mov	r3, r2
 8005572:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8005574:	79bb      	ldrb	r3, [r7, #6]
 8005576:	3b01      	subs	r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	4618      	mov	r0, r3
 800557c:	f7fb fc66 	bl	8000e4c <tud_descriptor_configuration_cb>
 8005580:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8005582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <process_set_config+0x2c>
 8005588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d00a      	beq.n	80055a6 <process_set_config+0x42>
 8005590:	4b8c      	ldr	r3, [pc, #560]	@ (80057c4 <process_set_config+0x260>)
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d000      	beq.n	80055a2 <process_set_config+0x3e>
 80055a0:	be00      	bkpt	0x0000
 80055a2:	2300      	movs	r3, #0
 80055a4:	e109      	b.n	80057ba <process_set_config+0x256>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80055a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a8:	79db      	ldrb	r3, [r3, #7]
 80055aa:	115b      	asrs	r3, r3, #5
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	b2d9      	uxtb	r1, r3
 80055b2:	4a85      	ldr	r2, [pc, #532]	@ (80057c8 <process_set_config+0x264>)
 80055b4:	7813      	ldrb	r3, [r2, #0]
 80055b6:	f361 1304 	bfi	r3, r1, #4, #1
 80055ba:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80055bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055be:	79db      	ldrb	r3, [r3, #7]
 80055c0:	119b      	asrs	r3, r3, #6
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	b2d9      	uxtb	r1, r3
 80055c8:	4a7f      	ldr	r2, [pc, #508]	@ (80057c8 <process_set_config+0x264>)
 80055ca:	7813      	ldrb	r3, [r2, #0]
 80055cc:	f361 1345 	bfi	r3, r1, #5, #1
 80055d0:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80055d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d4:	3309      	adds	r3, #9
 80055d6:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80055d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055da:	885b      	ldrh	r3, [r3, #2]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e2:	4413      	add	r3, r2
 80055e4:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 80055e6:	e0e2      	b.n	80057ae <process_set_config+0x24a>
  {
    uint8_t assoc_itf_count = 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80055ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f0:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	3301      	adds	r3, #1
 80055f6:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80055f8:	2b0b      	cmp	r3, #11
 80055fa:	d10f      	bne.n	800561c <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80055fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055fe:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8005600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8005608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800560a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800561a:	657b      	str	r3, [r7, #84]	@ 0x54
 800561c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	3301      	adds	r3, #1
 8005624:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8005626:	2b04      	cmp	r3, #4
 8005628:	d00a      	beq.n	8005640 <process_set_config+0xdc>
 800562a:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <process_set_config+0x260>)
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d000      	beq.n	800563c <process_set_config+0xd8>
 800563a:	be00      	bkpt	0x0000
 800563c:	2300      	movs	r3, #0
 800563e:	e0bc      	b.n	80057ba <process_set_config+0x256>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8005640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005642:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8005644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800564c:	2300      	movs	r3, #0
 800564e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8005652:	e090      	b.n	8005776 <process_set_config+0x212>
 8005654:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005658:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const *driver = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
  if (drvid < _app_driver_count) {
 800565e:	4b5b      	ldr	r3, [pc, #364]	@ (80057cc <process_set_config+0x268>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	7bfa      	ldrb	r2, [r7, #15]
 8005664:	429a      	cmp	r2, r3
 8005666:	d209      	bcs.n	800567c <process_set_config+0x118>
    driver = &_app_driver[drvid];
 8005668:	4b59      	ldr	r3, [pc, #356]	@ (80057d0 <process_set_config+0x26c>)
 800566a:	6819      	ldr	r1, [r3, #0]
 800566c:	7bfa      	ldrb	r2, [r7, #15]
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	e011      	b.n	80056a0 <process_set_config+0x13c>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 800567c:	4b53      	ldr	r3, [pc, #332]	@ (80057cc <process_set_config+0x268>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	3302      	adds	r3, #2
 8005682:	b2db      	uxtb	r3, r3
 8005684:	7bfa      	ldrb	r2, [r7, #15]
 8005686:	429a      	cmp	r2, r3
 8005688:	d20a      	bcs.n	80056a0 <process_set_config+0x13c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	4a4f      	ldr	r2, [pc, #316]	@ (80057cc <process_set_config+0x268>)
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	1a9a      	subs	r2, r3, r2
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4a4e      	ldr	r2, [pc, #312]	@ (80057d4 <process_set_config+0x270>)
 800569c:	4413      	add	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]
  return driver;
 80056a0:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80056a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 80056a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <process_set_config+0x15c>
 80056aa:	4b46      	ldr	r3, [pc, #280]	@ (80057c4 <process_set_config+0x260>)
 80056ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d000      	beq.n	80056bc <process_set_config+0x158>
 80056ba:	be00      	bkpt	0x0000
 80056bc:	2300      	movs	r3, #0
 80056be:	e07c      	b.n	80057ba <process_set_config+0x256>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80056c6:	79f8      	ldrb	r0, [r7, #7]
 80056c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056ca:	4798      	blx	r3
 80056cc:	4603      	mov	r3, r0
 80056ce:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80056d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d94a      	bls.n	800576c <process_set_config+0x208>
 80056d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80056d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80056da:	429a      	cmp	r2, r3
 80056dc:	d846      	bhi.n	800576c <process_set_config+0x208>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80056de:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d107      	bne.n	80056f6 <process_set_config+0x192>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80056e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	4a3b      	ldr	r2, [pc, #236]	@ (80057d8 <process_set_config+0x274>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d102      	bne.n	80056f6 <process_set_config+0x192>
 80056f0:	2302      	movs	r3, #2
 80056f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80056fc:	e024      	b.n	8005748 <process_set_config+0x1e4>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80056fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005700:	789a      	ldrb	r2, [r3, #2]
 8005702:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8005706:	4413      	add	r3, r2
 8005708:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 800570c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005710:	4a2d      	ldr	r2, [pc, #180]	@ (80057c8 <process_set_config+0x264>)
 8005712:	4413      	add	r3, r2
 8005714:	791b      	ldrb	r3, [r3, #4]
 8005716:	2bff      	cmp	r3, #255	@ 0xff
 8005718:	d00a      	beq.n	8005730 <process_set_config+0x1cc>
 800571a:	4b2a      	ldr	r3, [pc, #168]	@ (80057c4 <process_set_config+0x260>)
 800571c:	633b      	str	r3, [r7, #48]	@ 0x30
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d000      	beq.n	800572c <process_set_config+0x1c8>
 800572a:	be00      	bkpt	0x0000
 800572c:	2300      	movs	r3, #0
 800572e:	e044      	b.n	80057ba <process_set_config+0x256>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8005730:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005734:	4a24      	ldr	r2, [pc, #144]	@ (80057c8 <process_set_config+0x264>)
 8005736:	4413      	add	r3, r2
 8005738:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800573c:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800573e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8005742:	3301      	adds	r3, #1
 8005744:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8005748:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800574c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005750:	429a      	cmp	r2, r3
 8005752:	d3d4      	bcc.n	80056fe <process_set_config+0x19a>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8005754:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005758:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800575a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800575c:	481f      	ldr	r0, [pc, #124]	@ (80057dc <process_set_config+0x278>)
 800575e:	f003 f90f 	bl	8008980 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8005762:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005764:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005766:	4413      	add	r3, r2
 8005768:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 800576a:	e00d      	b.n	8005788 <process_set_config+0x224>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800576c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005770:	3301      	adds	r3, #1
 8005772:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8005776:	4b15      	ldr	r3, [pc, #84]	@ (80057cc <process_set_config+0x268>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	3302      	adds	r3, #2
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8005782:	429a      	cmp	r2, r3
 8005784:	f4ff af66 	bcc.w	8005654 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8005788:	4b10      	ldr	r3, [pc, #64]	@ (80057cc <process_set_config+0x268>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	3302      	adds	r3, #2
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8005794:	429a      	cmp	r2, r3
 8005796:	d30a      	bcc.n	80057ae <process_set_config+0x24a>
 8005798:	4b0a      	ldr	r3, [pc, #40]	@ (80057c4 <process_set_config+0x260>)
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d000      	beq.n	80057aa <process_set_config+0x246>
 80057a8:	be00      	bkpt	0x0000
 80057aa:	2300      	movs	r3, #0
 80057ac:	e005      	b.n	80057ba <process_set_config+0x256>
  while( p_desc < desc_end )
 80057ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057b2:	429a      	cmp	r2, r3
 80057b4:	f4ff af18 	bcc.w	80055e8 <process_set_config+0x84>
  }

  return true;
 80057b8:	2301      	movs	r3, #1
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3758      	adds	r7, #88	@ 0x58
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	e000edf0 	.word	0xe000edf0
 80057c8:	20000750 	.word	0x20000750
 80057cc:	20000784 	.word	0x20000784
 80057d0:	20000780 	.word	0x20000780
 80057d4:	08008cac 	.word	0x08008cac
 80057d8:	08002c6d 	.word	0x08002c6d
 80057dc:	20000764 	.word	0x20000764

080057e0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b094      	sub	sp, #80	@ 0x50
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	6039      	str	r1, [r7, #0]
 80057ea:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	885b      	ldrh	r3, [r3, #2]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80057f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	885b      	ldrh	r3, [r3, #2]
 8005804:	b29b      	uxth	r3, r3
 8005806:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005808:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8005810:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8005814:	3b01      	subs	r3, #1
 8005816:	2b0e      	cmp	r3, #14
 8005818:	f200 80b4 	bhi.w	8005984 <process_get_descriptor+0x1a4>
 800581c:	a201      	add	r2, pc, #4	@ (adr r2, 8005824 <process_get_descriptor+0x44>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005861 	.word	0x08005861
 8005828:	080058c5 	.word	0x080058c5
 800582c:	0800592b 	.word	0x0800592b
 8005830:	08005985 	.word	0x08005985
 8005834:	08005985 	.word	0x08005985
 8005838:	0800595f 	.word	0x0800595f
 800583c:	080058c5 	.word	0x080058c5
 8005840:	08005985 	.word	0x08005985
 8005844:	08005985 	.word	0x08005985
 8005848:	08005985 	.word	0x08005985
 800584c:	08005985 	.word	0x08005985
 8005850:	08005985 	.word	0x08005985
 8005854:	08005985 	.word	0x08005985
 8005858:	08005985 	.word	0x08005985
 800585c:	08005893 	.word	0x08005893
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8005860:	f7fb fadc 	bl	8000e1c <tud_descriptor_device_cb>
 8005864:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8005866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <process_get_descriptor+0xa2>
 800586c:	4b48      	ldr	r3, [pc, #288]	@ (8005990 <process_get_descriptor+0x1b0>)
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d000      	beq.n	800587e <process_get_descriptor+0x9e>
 800587c:	be00      	bkpt	0x0000
 800587e:	2300      	movs	r3, #0
 8005880:	e081      	b.n	8005986 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8005882:	79f8      	ldrb	r0, [r7, #7]
 8005884:	2312      	movs	r3, #18
 8005886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	f000 fe6d 	bl	8006568 <tud_control_xfer>
 800588e:	4603      	mov	r3, r0
 8005890:	e079      	b.n	8005986 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8005892:	f7fe ffad 	bl	80047f0 <tud_descriptor_bos_cb>
 8005896:	4603      	mov	r3, r0
 8005898:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 800589a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <process_get_descriptor+0xc4>
 80058a0:	2300      	movs	r3, #0
 80058a2:	e070      	b.n	8005986 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80058a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a6:	3302      	adds	r3, #2
 80058a8:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80058b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80058b8:	79f8      	ldrb	r0, [r7, #7]
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	f000 fe54 	bl	8006568 <tud_control_xfer>
 80058c0:	4603      	mov	r3, r0
 80058c2:	e060      	b.n	8005986 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 80058c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d114      	bne.n	80058f6 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80058cc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fb fabb 	bl	8000e4c <tud_descriptor_configuration_cb>
 80058d6:	4603      	mov	r3, r0
 80058d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 80058da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d116      	bne.n	800590e <process_get_descriptor+0x12e>
 80058e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005990 <process_get_descriptor+0x1b0>)
 80058e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d000      	beq.n	80058f2 <process_get_descriptor+0x112>
 80058f0:	be00      	bkpt	0x0000
 80058f2:	2300      	movs	r3, #0
 80058f4:	e047      	b.n	8005986 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80058f6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe ff88 	bl	8004810 <tud_descriptor_other_speed_configuration_cb>
 8005900:	4603      	mov	r3, r0
 8005902:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8005904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <process_get_descriptor+0x12e>
 800590a:	2300      	movs	r3, #0
 800590c:	e03b      	b.n	8005986 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 800590e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005910:	3302      	adds	r3, #2
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 800591a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800591c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800591e:	79f8      	ldrb	r0, [r7, #7]
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	f000 fe21 	bl	8006568 <tud_control_xfer>
 8005926:	4603      	mov	r3, r0
 8005928:	e02d      	b.n	8005986 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	889b      	ldrh	r3, [r3, #4]
 800592e:	b29a      	uxth	r2, r3
 8005930:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f7fb fa96 	bl	8000e68 <tud_descriptor_string_cb>
 800593c:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 800593e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <process_get_descriptor+0x168>
 8005944:	2300      	movs	r3, #0
 8005946:	e01e      	b.n	8005986 <process_get_descriptor+0x1a6>
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8005950:	79f8      	ldrb	r0, [r7, #7]
 8005952:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	f000 fe07 	bl	8006568 <tud_control_xfer>
 800595a:	4603      	mov	r3, r0
 800595c:	e013      	b.n	8005986 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 800595e:	f7fe ff4f 	bl	8004800 <tud_descriptor_device_qualifier_cb>
 8005962:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8005964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <process_get_descriptor+0x18e>
 800596a:	2300      	movs	r3, #0
 800596c:	e00b      	b.n	8005986 <process_get_descriptor+0x1a6>
 800596e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8005976:	79f8      	ldrb	r0, [r7, #7]
 8005978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	f000 fdf4 	bl	8006568 <tud_control_xfer>
 8005980:	4603      	mov	r3, r0
 8005982:	e000      	b.n	8005986 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8005984:	2300      	movs	r3, #0
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3750      	adds	r7, #80	@ 0x50
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	e000edf0 	.word	0xe000edf0

08005994 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b0a5      	sub	sp, #148	@ 0x94
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  switch (event->event_id) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	3b02      	subs	r3, #2
 80059ac:	2b05      	cmp	r3, #5
 80059ae:	f200 823c 	bhi.w	8005e2a <dcd_event_handler+0x496>
 80059b2:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <dcd_event_handler+0x24>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059d1 	.word	0x080059d1
 80059bc:	08005a41 	.word	0x08005a41
 80059c0:	080059fd 	.word	0x080059fd
 80059c4:	08005a1f 	.word	0x08005a1f
 80059c8:	08005ca1 	.word	0x08005ca1
 80059cc:	08005cb7 	.word	0x08005cb7
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80059d0:	4aad      	ldr	r2, [pc, #692]	@ (8005c88 <dcd_event_handler+0x2f4>)
 80059d2:	7813      	ldrb	r3, [r2, #0]
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80059da:	4aab      	ldr	r2, [pc, #684]	@ (8005c88 <dcd_event_handler+0x2f4>)
 80059dc:	7813      	ldrb	r3, [r2, #0]
 80059de:	f023 0302 	bic.w	r3, r3, #2
 80059e2:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 80059e4:	4ba8      	ldr	r3, [pc, #672]	@ (8005c88 <dcd_event_handler+0x2f4>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 80059ea:	4aa7      	ldr	r2, [pc, #668]	@ (8005c88 <dcd_event_handler+0x2f4>)
 80059ec:	7813      	ldrb	r3, [r2, #0]
 80059ee:	f023 0304 	bic.w	r3, r3, #4
 80059f2:	7013      	strb	r3, [r2, #0]
      send = true;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
      break;
 80059fa:	e221      	b.n	8005e40 <dcd_event_handler+0x4ac>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 80059fc:	4ba2      	ldr	r3, [pc, #648]	@ (8005c88 <dcd_event_handler+0x2f4>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 8213 	beq.w	8005e32 <dcd_event_handler+0x49e>
        _usbd_dev.suspended = 1;
 8005a0c:	4a9e      	ldr	r2, [pc, #632]	@ (8005c88 <dcd_event_handler+0x2f4>)
 8005a0e:	7813      	ldrb	r3, [r2, #0]
 8005a10:	f043 0304 	orr.w	r3, r3, #4
 8005a14:	7013      	strb	r3, [r2, #0]
        send = true;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
      }
      break;
 8005a1c:	e209      	b.n	8005e32 <dcd_event_handler+0x49e>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8005a1e:	4b9a      	ldr	r3, [pc, #616]	@ (8005c88 <dcd_event_handler+0x2f4>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8204 	beq.w	8005e36 <dcd_event_handler+0x4a2>
        _usbd_dev.suspended = 0;
 8005a2e:	4a96      	ldr	r2, [pc, #600]	@ (8005c88 <dcd_event_handler+0x2f4>)
 8005a30:	7813      	ldrb	r3, [r2, #0]
 8005a32:	f023 0304 	bic.w	r3, r3, #4
 8005a36:	7013      	strb	r3, [r2, #0]
        send = true;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
      }
      break;
 8005a3e:	e1fa      	b.n	8005e36 <dcd_event_handler+0x4a2>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8005a46:	e044      	b.n	8005ad2 <dcd_event_handler+0x13e>
 8005a48:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8005a4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  usbd_class_driver_t const *driver = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (drvid < _app_driver_count) {
 8005a54:	4b8d      	ldr	r3, [pc, #564]	@ (8005c8c <dcd_event_handler+0x2f8>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d20a      	bcs.n	8005a76 <dcd_event_handler+0xe2>
    driver = &_app_driver[drvid];
 8005a60:	4b8b      	ldr	r3, [pc, #556]	@ (8005c90 <dcd_event_handler+0x2fc>)
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a74:	e013      	b.n	8005a9e <dcd_event_handler+0x10a>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 8005a76:	4b85      	ldr	r3, [pc, #532]	@ (8005c8c <dcd_event_handler+0x2f8>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	3302      	adds	r3, #2
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d20b      	bcs.n	8005a9e <dcd_event_handler+0x10a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005a86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005a8a:	4a80      	ldr	r2, [pc, #512]	@ (8005c8c <dcd_event_handler+0x2f8>)
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	1a9a      	subs	r2, r3, r2
 8005a90:	4613      	mov	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4a7e      	ldr	r2, [pc, #504]	@ (8005c94 <dcd_event_handler+0x300>)
 8005a9a:	4413      	add	r3, r2
 8005a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return driver;
 8005a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
        usbd_class_driver_t const* driver = get_driver(i);
 8005aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        if (driver && driver->sof) {
 8005aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00d      	beq.n	8005ac8 <dcd_event_handler+0x134>
 8005aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d008      	beq.n	8005ac8 <dcd_event_handler+0x134>
          driver->sof(event->rhport, event->sof.frame_count);
 8005ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	7810      	ldrb	r0, [r2, #0]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6852      	ldr	r2, [r2, #4]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005ac8:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8005acc:	3301      	adds	r3, #1
 8005ace:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8005ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8005c8c <dcd_event_handler+0x2f8>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d3b2      	bcc.n	8005a48 <dcd_event_handler+0xb4>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8005ae2:	4b69      	ldr	r3, [pc, #420]	@ (8005c88 <dcd_event_handler+0x2f4>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05a      	beq.n	8005ba6 <dcd_event_handler+0x212>
        _usbd_dev.suspended = 0;
 8005af0:	4a65      	ldr	r2, [pc, #404]	@ (8005c88 <dcd_event_handler+0x2f4>)
 8005af2:	7813      	ldrb	r3, [r2, #0]
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8005afa:	f107 0314 	add.w	r3, r7, #20
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	753b      	strb	r3, [r7, #20]
 8005b0c:	2305      	movs	r3, #5
 8005b0e:	757b      	strb	r3, [r7, #21]
 8005b10:	f107 0314 	add.w	r3, r7, #20
 8005b14:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8005c98 <dcd_event_handler+0x304>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b26:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8005b2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8005b2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b32:	f083 0301 	eor.w	r3, r3, #1
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <dcd_event_handler+0x1b0>
    qhdl->interrupt_set(false);
 8005b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2000      	movs	r0, #0
 8005b42:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8005b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b46:	3304      	adds	r3, #4
 8005b48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fda3 	bl	8004696 <tu_fifo_write>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

  if (!in_isr) {
 8005b56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b5a:	f083 0301 	eor.w	r3, r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <dcd_event_handler+0x1d8>
    qhdl->interrupt_set(true);
 8005b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2001      	movs	r0, #1
 8005b6a:	4798      	blx	r3
  }

  return success;
 8005b6c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8005b70:	f083 0301 	eor.w	r3, r3, #1
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <dcd_event_handler+0x1fa>
 8005b7a:	4b48      	ldr	r3, [pc, #288]	@ (8005c9c <dcd_event_handler+0x308>)
 8005b7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00c      	beq.n	8005ba4 <dcd_event_handler+0x210>
 8005b8a:	be00      	bkpt	0x0000
 8005b8c:	e00a      	b.n	8005ba4 <dcd_event_handler+0x210>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b90:	7818      	ldrb	r0, [r3, #0]
 8005b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	4619      	mov	r1, r3
 8005b98:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f7fe fe0f 	bl	80047c0 <tud_event_hook_cb>
  return true;
 8005ba2:	e000      	b.n	8005ba6 <dcd_event_handler+0x212>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005ba4:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8005ba6:	4b38      	ldr	r3, [pc, #224]	@ (8005c88 <dcd_event_handler+0x2f4>)
 8005ba8:	78db      	ldrb	r3, [r3, #3]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8005bb4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005bb8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bf14      	ite	ne
 8005bc6:	2301      	movne	r3, #1
 8005bc8:	2300      	moveq	r3, #0
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8134 	beq.w	8005e3a <dcd_event_handler+0x4a6>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8005bd2:	f107 0308 	add.w	r3, r7, #8
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	605a      	str	r2, [r3, #4]
 8005bdc:	609a      	str	r2, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	723b      	strb	r3, [r7, #8]
 8005be4:	2303      	movs	r3, #3
 8005be6:	727b      	strb	r3, [r7, #9]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005bfa:	4b27      	ldr	r3, [pc, #156]	@ (8005c98 <dcd_event_handler+0x304>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c04:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005c08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  if (!in_isr) {
 8005c0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005c10:	f083 0301 	eor.w	r3, r3, #1
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <dcd_event_handler+0x28e>
    qhdl->interrupt_set(false);
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2000      	movs	r0, #0
 8005c20:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8005c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c24:	3304      	adds	r3, #4
 8005c26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fe fd34 	bl	8004696 <tu_fifo_write>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  if (!in_isr) {
 8005c34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005c38:	f083 0301 	eor.w	r3, r3, #1
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <dcd_event_handler+0x2b6>
    qhdl->interrupt_set(true);
 8005c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2001      	movs	r0, #1
 8005c48:	4798      	blx	r3
  return success;
 8005c4a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005c4e:	f083 0301 	eor.w	r3, r3, #1
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d009      	beq.n	8005c6c <dcd_event_handler+0x2d8>
 8005c58:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <dcd_event_handler+0x308>)
 8005c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00c      	beq.n	8005c82 <dcd_event_handler+0x2ee>
 8005c68:	be00      	bkpt	0x0000
 8005c6a:	e00a      	b.n	8005c82 <dcd_event_handler+0x2ee>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6e:	7818      	ldrb	r0, [r3, #0]
 8005c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	4619      	mov	r1, r3
 8005c76:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fe fda0 	bl	80047c0 <tud_event_hook_cb>
  return true;
 8005c80:	e000      	b.n	8005c84 <dcd_event_handler+0x2f0>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005c82:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8005c84:	e0d9      	b.n	8005e3a <dcd_event_handler+0x4a6>
 8005c86:	bf00      	nop
 8005c88:	20000750 	.word	0x20000750
 8005c8c:	20000784 	.word	0x20000784
 8005c90:	20000780 	.word	0x20000780
 8005c94:	08008cac 	.word	0x08008cac
 8005c98:	20000848 	.word	0x20000848
 8005c9c:	e000edf0 	.word	0xe000edf0

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8005ca0:	4b90      	ldr	r3, [pc, #576]	@ (8005ee4 <dcd_event_handler+0x550>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4b8e      	ldr	r3, [pc, #568]	@ (8005ee4 <dcd_event_handler+0x550>)
 8005cac:	701a      	strb	r2, [r3, #0]
      send = true;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
      break;
 8005cb4:	e0c4      	b.n	8005e40 <dcd_event_handler+0x4ac>

    case DCD_EVENT_XFER_COMPLETE: {
      // Invoke the class callback associated with the endpoint address
      uint8_t const ep_addr = event->xfer_complete.ep_addr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	791b      	ldrb	r3, [r3, #4]
 8005cba:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8005cbe:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8005cc2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005cc6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cce:	b2db      	uxtb	r3, r3
      uint8_t const epnum = tu_edpt_number(ep_addr);
 8005cd0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 8005cd4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8005cd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005cdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005ce0:	09db      	lsrs	r3, r3, #7
 8005ce2:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8005ce4:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

      send = true;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
      if(epnum > 0) {
 8005cee:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80a3 	beq.w	8005e3e <dcd_event_handler+0x4aa>
        usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8005cf8:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8005cfc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8005d00:	4979      	ldr	r1, [pc, #484]	@ (8005ee8 <dcd_event_handler+0x554>)
 8005d02:	0052      	lsls	r2, r2, #1
 8005d04:	440a      	add	r2, r1
 8005d06:	4413      	add	r3, r2
 8005d08:	3314      	adds	r3, #20
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  usbd_class_driver_t const *driver = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (drvid < _app_driver_count) {
 8005d14:	4b75      	ldr	r3, [pc, #468]	@ (8005eec <dcd_event_handler+0x558>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d20a      	bcs.n	8005d36 <dcd_event_handler+0x3a2>
    driver = &_app_driver[drvid];
 8005d20:	4b73      	ldr	r3, [pc, #460]	@ (8005ef0 <dcd_event_handler+0x55c>)
 8005d22:	6819      	ldr	r1, [r3, #0]
 8005d24:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d34:	e013      	b.n	8005d5e <dcd_event_handler+0x3ca>
  } else if (drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 8005d36:	4b6d      	ldr	r3, [pc, #436]	@ (8005eec <dcd_event_handler+0x558>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	3302      	adds	r3, #2
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d20b      	bcs.n	8005d5e <dcd_event_handler+0x3ca>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005d46:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005d4a:	4a68      	ldr	r2, [pc, #416]	@ (8005eec <dcd_event_handler+0x558>)
 8005d4c:	7812      	ldrb	r2, [r2, #0]
 8005d4e:	1a9a      	subs	r2, r3, r2
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4a66      	ldr	r2, [pc, #408]	@ (8005ef4 <dcd_event_handler+0x560>)
 8005d5a:	4413      	add	r3, r2
 8005d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return driver;
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8005d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        if (driver && driver->xfer_isr) {
 8005d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d068      	beq.n	8005e3e <dcd_event_handler+0x4aa>
 8005d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d063      	beq.n	8005e3e <dcd_event_handler+0x4aa>
          _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8005d76:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8005d7a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8005d7e:	495a      	ldr	r1, [pc, #360]	@ (8005ee8 <dcd_event_handler+0x554>)
 8005d80:	0052      	lsls	r2, r2, #1
 8005d82:	440a      	add	r2, r1
 8005d84:	4413      	add	r3, r2
 8005d86:	f103 0220 	add.w	r2, r3, #32
 8005d8a:	7813      	ldrb	r3, [r2, #0]
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	7013      	strb	r3, [r2, #0]
          _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8005d92:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8005d96:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8005d9a:	4953      	ldr	r1, [pc, #332]	@ (8005ee8 <dcd_event_handler+0x554>)
 8005d9c:	0052      	lsls	r2, r2, #1
 8005d9e:	440a      	add	r2, r1
 8005da0:	4413      	add	r3, r2
 8005da2:	f103 0220 	add.w	r2, r3, #32
 8005da6:	7813      	ldrb	r3, [r2, #0]
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	7013      	strb	r3, [r2, #0]

          send = !driver->xfer_isr(event->rhport, ep_addr, (xfer_result_t) event->xfer_complete.result, event->xfer_complete.len);
 8005dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005db2:	69dc      	ldr	r4, [r3, #28]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	7818      	ldrb	r0, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	795a      	ldrb	r2, [r3, #5]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 8005dc4:	47a0      	blx	r4
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bf14      	ite	ne
 8005dcc:	2301      	movne	r3, #1
 8005dce:	2300      	moveq	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f083 0301 	eor.w	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8005ddc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

          // xfer_isr() is deferred to xfer_cb(), revert busy/claimed status
          if (send) {
 8005de8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d026      	beq.n	8005e3e <dcd_event_handler+0x4aa>
            _usbd_dev.ep_status[epnum][ep_dir].busy = 1;
 8005df0:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8005df4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8005df8:	493b      	ldr	r1, [pc, #236]	@ (8005ee8 <dcd_event_handler+0x554>)
 8005dfa:	0052      	lsls	r2, r2, #1
 8005dfc:	440a      	add	r2, r1
 8005dfe:	4413      	add	r3, r2
 8005e00:	f103 0220 	add.w	r2, r3, #32
 8005e04:	7813      	ldrb	r3, [r2, #0]
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	7013      	strb	r3, [r2, #0]
            _usbd_dev.ep_status[epnum][ep_dir].claimed = 1;
 8005e0c:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8005e10:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8005e14:	4934      	ldr	r1, [pc, #208]	@ (8005ee8 <dcd_event_handler+0x554>)
 8005e16:	0052      	lsls	r2, r2, #1
 8005e18:	440a      	add	r2, r1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f103 0220 	add.w	r2, r3, #32
 8005e20:	7813      	ldrb	r3, [r2, #0]
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	7013      	strb	r3, [r2, #0]
          }
        }
      }
      break;
 8005e28:	e009      	b.n	8005e3e <dcd_event_handler+0x4aa>
    }

    default:
      send = true;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
      break;
 8005e30:	e006      	b.n	8005e40 <dcd_event_handler+0x4ac>
      break;
 8005e32:	bf00      	nop
 8005e34:	e004      	b.n	8005e40 <dcd_event_handler+0x4ac>
      break;
 8005e36:	bf00      	nop
 8005e38:	e002      	b.n	8005e40 <dcd_event_handler+0x4ac>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <dcd_event_handler+0x4ac>
      break;
 8005e3e:	bf00      	nop
  }

  if (send) {
 8005e40:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d049      	beq.n	8005edc <dcd_event_handler+0x548>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005e52:	4b29      	ldr	r3, [pc, #164]	@ (8005ef8 <dcd_event_handler+0x564>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8005e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e68:	f083 0301 	eor.w	r3, r3, #1
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <dcd_event_handler+0x4e6>
    qhdl->interrupt_set(false);
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2000      	movs	r0, #0
 8005e78:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fe fc08 	bl	8004696 <tu_fifo_write>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8005e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e90:	f083 0301 	eor.w	r3, r3, #1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <dcd_event_handler+0x50e>
    qhdl->interrupt_set(true);
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	4798      	blx	r3
  return success;
 8005ea2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ea6:	f083 0301 	eor.w	r3, r3, #1
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <dcd_event_handler+0x530>
 8005eb0:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <dcd_event_handler+0x568>)
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00c      	beq.n	8005eda <dcd_event_handler+0x546>
 8005ec0:	be00      	bkpt	0x0000
 8005ec2:	e00a      	b.n	8005eda <dcd_event_handler+0x546>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec6:	7818      	ldrb	r0, [r3, #0]
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f7fe fc74 	bl	80047c0 <tud_event_hook_cb>
  return true;
 8005ed8:	e000      	b.n	8005edc <dcd_event_handler+0x548>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005eda:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8005edc:	bf00      	nop
 8005ede:	3794      	adds	r7, #148	@ 0x94
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd90      	pop	{r4, r7, pc}
 8005ee4:	2000077c 	.word	0x2000077c
 8005ee8:	20000750 	.word	0x20000750
 8005eec:	20000784 	.word	0x20000784
 8005ef0:	20000780 	.word	0x20000780
 8005ef4:	08008cac 	.word	0x08008cac
 8005ef8:	20000848 	.word	0x20000848
 8005efc:	e000edf0 	.word	0xe000edf0

08005f00 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8005f10:	4b07      	ldr	r3, [pc, #28]	@ (8005f30 <usbd_int_set+0x30>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 f929 	bl	800716c <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8005f1a:	e004      	b.n	8005f26 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8005f1c:	4b04      	ldr	r3, [pc, #16]	@ (8005f30 <usbd_int_set+0x30>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 f94b 	bl	80071bc <dcd_int_disable>
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000069 	.word	0x20000069

08005f34 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	71fb      	strb	r3, [r7, #7]
 8005f3e:	4b09      	ldr	r3, [pc, #36]	@ (8005f64 <usbd_spin_lock+0x30>)
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	f083 0301 	eor.w	r3, r3, #1
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2000      	movs	r0, #0
 8005f58:	4798      	blx	r3
}
 8005f5a:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	2000006c 	.word	0x2000006c

08005f68 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	71fb      	strb	r3, [r7, #7]
 8005f72:	4b09      	ldr	r3, [pc, #36]	@ (8005f98 <usbd_spin_unlock+0x30>)
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	f083 0301 	eor.w	r3, r3, #1
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	4798      	blx	r3
}
 8005f8e:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	2000006c 	.word	0x2000006c

08005f9c <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	@ 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6039      	str	r1, [r7, #0]
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4603      	mov	r3, r0
 8005faa:	71fb      	strb	r3, [r7, #7]
 8005fac:	460b      	mov	r3, r1
 8005fae:	71bb      	strb	r3, [r7, #6]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb8:	e04d      	b.n	8006056 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d108      	bne.n	8005fd8 <usbd_open_edpt_pair+0x3c>
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	78db      	ldrb	r3, [r3, #3]
 8005fca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	797b      	ldrb	r3, [r7, #5]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00a      	beq.n	8005fee <usbd_open_edpt_pair+0x52>
 8005fd8:	4b23      	ldr	r3, [pc, #140]	@ (8006068 <usbd_open_edpt_pair+0xcc>)
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d000      	beq.n	8005fea <usbd_open_edpt_pair+0x4e>
 8005fe8:	be00      	bkpt	0x0000
 8005fea:	2300      	movs	r3, #0
 8005fec:	e038      	b.n	8006060 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	6a39      	ldr	r1, [r7, #32]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f83a 	bl	800606c <usbd_edpt_open>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f083 0301 	eor.w	r3, r3, #1
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <usbd_open_edpt_pair+0x7e>
 8006004:	4b18      	ldr	r3, [pc, #96]	@ (8006068 <usbd_open_edpt_pair+0xcc>)
 8006006:	61fb      	str	r3, [r7, #28]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d000      	beq.n	8006016 <usbd_open_edpt_pair+0x7a>
 8006014:	be00      	bkpt	0x0000
 8006016:	2300      	movs	r3, #0
 8006018:	e022      	b.n	8006060 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	789b      	ldrb	r3, [r3, #2]
 800601e:	75fb      	strb	r3, [r7, #23]
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	09db      	lsrs	r3, r3, #7
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b01      	cmp	r3, #1
 8006028:	d104      	bne.n	8006034 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	789a      	ldrb	r2, [r3, #2]
 800602e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e003      	b.n	800603c <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	789a      	ldrb	r2, [r3, #2]
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800604e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	3301      	adds	r3, #1
 8006054:	627b      	str	r3, [r7, #36]	@ 0x24
 8006056:	79bb      	ldrb	r3, [r7, #6]
 8006058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605a:	429a      	cmp	r2, r3
 800605c:	dbad      	blt.n	8005fba <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800605e:	2301      	movs	r3, #1
}
 8006060:	4618      	mov	r0, r3
 8006062:	3728      	adds	r7, #40	@ 0x28
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000edf0 	.word	0xe000edf0

0800606c <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	4603      	mov	r3, r0
 8006074:	6039      	str	r1, [r7, #0]
 8006076:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8006078:	4b1c      	ldr	r3, [pc, #112]	@ (80060ec <usbd_edpt_open+0x80>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	789b      	ldrb	r3, [r3, #2]
 8006082:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b05      	cmp	r3, #5
 800608e:	d90a      	bls.n	80060a6 <usbd_edpt_open+0x3a>
 8006090:	4b17      	ldr	r3, [pc, #92]	@ (80060f0 <usbd_edpt_open+0x84>)
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d000      	beq.n	80060a2 <usbd_edpt_open+0x36>
 80060a0:	be00      	bkpt	0x0000
 80060a2:	2300      	movs	r3, #0
 80060a4:	e01d      	b.n	80060e2 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 80060a6:	4b13      	ldr	r3, [pc, #76]	@ (80060f4 <usbd_edpt_open+0x88>)
 80060a8:	789b      	ldrb	r3, [r3, #2]
 80060aa:	2200      	movs	r2, #0
 80060ac:	4619      	mov	r1, r3
 80060ae:	6838      	ldr	r0, [r7, #0]
 80060b0:	f002 fbcc 	bl	800884c <tu_edpt_validate>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f083 0301 	eor.w	r3, r3, #1
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <usbd_edpt_open+0x6a>
 80060c0:	4b0b      	ldr	r3, [pc, #44]	@ (80060f0 <usbd_edpt_open+0x84>)
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d000      	beq.n	80060d2 <usbd_edpt_open+0x66>
 80060d0:	be00      	bkpt	0x0000
 80060d2:	2300      	movs	r3, #0
 80060d4:	e005      	b.n	80060e2 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 f992 	bl	8007404 <dcd_edpt_open>
 80060e0:	4603      	mov	r3, r0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000069 	.word	0x20000069
 80060f0:	e000edf0 	.word	0xe000edf0
 80060f4:	20000750 	.word	0x20000750

080060f8 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	460a      	mov	r2, r1
 8006102:	71fb      	strb	r3, [r7, #7]
 8006104:	4613      	mov	r3, r2
 8006106:	71bb      	strb	r3, [r7, #6]
 8006108:	79bb      	ldrb	r3, [r7, #6]
 800610a:	73bb      	strb	r3, [r7, #14]
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006112:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006114:	75fb      	strb	r3, [r7, #23]
 8006116:	79bb      	ldrb	r3, [r7, #6]
 8006118:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	09db      	lsrs	r3, r3, #7
 800611e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8006120:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8006122:	7dfa      	ldrb	r2, [r7, #23]
 8006124:	7dbb      	ldrb	r3, [r7, #22]
 8006126:	0052      	lsls	r2, r2, #1
 8006128:	4413      	add	r3, r2
 800612a:	3320      	adds	r3, #32
 800612c:	4a05      	ldr	r2, [pc, #20]	@ (8006144 <usbd_edpt_claim+0x4c>)
 800612e:	4413      	add	r3, r2
 8006130:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8006132:	2100      	movs	r1, #0
 8006134:	6938      	ldr	r0, [r7, #16]
 8006136:	f002 fb25 	bl	8008784 <tu_edpt_claim>
 800613a:	4603      	mov	r3, r0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20000750 	.word	0x20000750

08006148 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	460a      	mov	r2, r1
 8006152:	71fb      	strb	r3, [r7, #7]
 8006154:	4613      	mov	r3, r2
 8006156:	71bb      	strb	r3, [r7, #6]
 8006158:	79bb      	ldrb	r3, [r7, #6]
 800615a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006162:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006164:	75fb      	strb	r3, [r7, #23]
 8006166:	79bb      	ldrb	r3, [r7, #6]
 8006168:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	09db      	lsrs	r3, r3, #7
 800616e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8006170:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8006172:	7dfa      	ldrb	r2, [r7, #23]
 8006174:	7dbb      	ldrb	r3, [r7, #22]
 8006176:	0052      	lsls	r2, r2, #1
 8006178:	4413      	add	r3, r2
 800617a:	3320      	adds	r3, #32
 800617c:	4a05      	ldr	r2, [pc, #20]	@ (8006194 <usbd_edpt_release+0x4c>)
 800617e:	4413      	add	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8006182:	2100      	movs	r1, #0
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f002 fb37 	bl	80087f8 <tu_edpt_release>
 800618a:	4603      	mov	r3, r0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20000750 	.word	0x20000750

08006198 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	603a      	str	r2, [r7, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	71fb      	strb	r3, [r7, #7]
 80061a6:	460b      	mov	r3, r1
 80061a8:	71bb      	strb	r3, [r7, #6]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80061ae:	4b32      	ldr	r3, [pc, #200]	@ (8006278 <usbd_edpt_xfer+0xe0>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	71fb      	strb	r3, [r7, #7]
 80061b4:	79bb      	ldrb	r3, [r7, #6]
 80061b6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80061b8:	7abb      	ldrb	r3, [r7, #10]
 80061ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061be:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80061c0:	75fb      	strb	r3, [r7, #23]
 80061c2:	79bb      	ldrb	r3, [r7, #6]
 80061c4:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80061c6:	7afb      	ldrb	r3, [r7, #11]
 80061c8:	09db      	lsrs	r3, r3, #7
 80061ca:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80061cc:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80061ce:	7dfa      	ldrb	r2, [r7, #23]
 80061d0:	7dbb      	ldrb	r3, [r7, #22]
 80061d2:	492a      	ldr	r1, [pc, #168]	@ (800627c <usbd_edpt_xfer+0xe4>)
 80061d4:	0052      	lsls	r2, r2, #1
 80061d6:	440a      	add	r2, r1
 80061d8:	4413      	add	r3, r2
 80061da:	3320      	adds	r3, #32
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <usbd_edpt_xfer+0x66>
 80061e8:	4b25      	ldr	r3, [pc, #148]	@ (8006280 <usbd_edpt_xfer+0xe8>)
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d000      	beq.n	80061fa <usbd_edpt_xfer+0x62>
 80061f8:	be00      	bkpt	0x0000
 80061fa:	2300      	movs	r3, #0
 80061fc:	e038      	b.n	8006270 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80061fe:	7dfa      	ldrb	r2, [r7, #23]
 8006200:	7dbb      	ldrb	r3, [r7, #22]
 8006202:	491e      	ldr	r1, [pc, #120]	@ (800627c <usbd_edpt_xfer+0xe4>)
 8006204:	0052      	lsls	r2, r2, #1
 8006206:	440a      	add	r2, r1
 8006208:	4413      	add	r3, r2
 800620a:	f103 0220 	add.w	r2, r3, #32
 800620e:	7813      	ldrb	r3, [r2, #0]
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8006216:	88bb      	ldrh	r3, [r7, #4]
 8006218:	79b9      	ldrb	r1, [r7, #6]
 800621a:	79f8      	ldrb	r0, [r7, #7]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	f001 f9b5 	bl	800758c <dcd_edpt_xfer>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <usbd_edpt_xfer+0x94>
    return true;
 8006228:	2301      	movs	r3, #1
 800622a:	e021      	b.n	8006270 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800622c:	7dfa      	ldrb	r2, [r7, #23]
 800622e:	7dbb      	ldrb	r3, [r7, #22]
 8006230:	4912      	ldr	r1, [pc, #72]	@ (800627c <usbd_edpt_xfer+0xe4>)
 8006232:	0052      	lsls	r2, r2, #1
 8006234:	440a      	add	r2, r1
 8006236:	4413      	add	r3, r2
 8006238:	f103 0220 	add.w	r2, r3, #32
 800623c:	7813      	ldrb	r3, [r2, #0]
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8006244:	7dfa      	ldrb	r2, [r7, #23]
 8006246:	7dbb      	ldrb	r3, [r7, #22]
 8006248:	490c      	ldr	r1, [pc, #48]	@ (800627c <usbd_edpt_xfer+0xe4>)
 800624a:	0052      	lsls	r2, r2, #1
 800624c:	440a      	add	r2, r1
 800624e:	4413      	add	r3, r2
 8006250:	f103 0220 	add.w	r2, r3, #32
 8006254:	7813      	ldrb	r3, [r2, #0]
 8006256:	f023 0304 	bic.w	r3, r3, #4
 800625a:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 800625c:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <usbd_edpt_xfer+0xe8>)
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d000      	beq.n	800626e <usbd_edpt_xfer+0xd6>
 800626c:	be00      	bkpt	0x0000
    return false;
 800626e:	2300      	movs	r3, #0
  }
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000069 	.word	0x20000069
 800627c:	20000750 	.word	0x20000750
 8006280:	e000edf0 	.word	0xe000edf0

08006284 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	460a      	mov	r2, r1
 800628e:	71fb      	strb	r3, [r7, #7]
 8006290:	4613      	mov	r3, r2
 8006292:	71bb      	strb	r3, [r7, #6]
 8006294:	79bb      	ldrb	r3, [r7, #6]
 8006296:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006298:	7b3b      	ldrb	r3, [r7, #12]
 800629a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800629e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	79bb      	ldrb	r3, [r7, #6]
 80062a4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80062a6:	7b7b      	ldrb	r3, [r7, #13]
 80062a8:	09db      	lsrs	r3, r3, #7
 80062aa:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80062ac:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80062ae:	7bfa      	ldrb	r2, [r7, #15]
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	490a      	ldr	r1, [pc, #40]	@ (80062dc <usbd_edpt_busy+0x58>)
 80062b4:	0052      	lsls	r2, r2, #1
 80062b6:	440a      	add	r2, r1
 80062b8:	4413      	add	r3, r2
 80062ba:	3320      	adds	r3, #32
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bf14      	ite	ne
 80062c8:	2301      	movne	r3, #1
 80062ca:	2300      	moveq	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000750 	.word	0x20000750

080062e0 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	460a      	mov	r2, r1
 80062ea:	71fb      	strb	r3, [r7, #7]
 80062ec:	4613      	mov	r3, r2
 80062ee:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80062f0:	4b18      	ldr	r3, [pc, #96]	@ (8006354 <usbd_edpt_stall+0x74>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	71fb      	strb	r3, [r7, #7]
 80062f6:	79bb      	ldrb	r3, [r7, #6]
 80062f8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80062fa:	7b3b      	ldrb	r3, [r7, #12]
 80062fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006300:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006302:	73fb      	strb	r3, [r7, #15]
 8006304:	79bb      	ldrb	r3, [r7, #6]
 8006306:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006308:	7b7b      	ldrb	r3, [r7, #13]
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800630e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8006310:	79ba      	ldrb	r2, [r7, #6]
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 f988 	bl	800762c <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800631c:	7bfa      	ldrb	r2, [r7, #15]
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	490d      	ldr	r1, [pc, #52]	@ (8006358 <usbd_edpt_stall+0x78>)
 8006322:	0052      	lsls	r2, r2, #1
 8006324:	440a      	add	r2, r1
 8006326:	4413      	add	r3, r2
 8006328:	f103 0220 	add.w	r2, r3, #32
 800632c:	7813      	ldrb	r3, [r2, #0]
 800632e:	f043 0302 	orr.w	r3, r3, #2
 8006332:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8006334:	7bfa      	ldrb	r2, [r7, #15]
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	4907      	ldr	r1, [pc, #28]	@ (8006358 <usbd_edpt_stall+0x78>)
 800633a:	0052      	lsls	r2, r2, #1
 800633c:	440a      	add	r2, r1
 800633e:	4413      	add	r3, r2
 8006340:	f103 0220 	add.w	r2, r3, #32
 8006344:	7813      	ldrb	r3, [r2, #0]
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	7013      	strb	r3, [r2, #0]
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000069 	.word	0x20000069
 8006358:	20000750 	.word	0x20000750

0800635c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	460a      	mov	r2, r1
 8006366:	71fb      	strb	r3, [r7, #7]
 8006368:	4613      	mov	r3, r2
 800636a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800636c:	4b18      	ldr	r3, [pc, #96]	@ (80063d0 <usbd_edpt_clear_stall+0x74>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	71fb      	strb	r3, [r7, #7]
 8006372:	79bb      	ldrb	r3, [r7, #6]
 8006374:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006376:	7b3b      	ldrb	r3, [r7, #12]
 8006378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800637e:	73fb      	strb	r3, [r7, #15]
 8006380:	79bb      	ldrb	r3, [r7, #6]
 8006382:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006384:	7b7b      	ldrb	r3, [r7, #13]
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800638a:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800638c:	79ba      	ldrb	r2, [r7, #6]
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	4611      	mov	r1, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f001 f980 	bl	8007698 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8006398:	7bfa      	ldrb	r2, [r7, #15]
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	490d      	ldr	r1, [pc, #52]	@ (80063d4 <usbd_edpt_clear_stall+0x78>)
 800639e:	0052      	lsls	r2, r2, #1
 80063a0:	440a      	add	r2, r1
 80063a2:	4413      	add	r3, r2
 80063a4:	f103 0220 	add.w	r2, r3, #32
 80063a8:	7813      	ldrb	r3, [r2, #0]
 80063aa:	f023 0302 	bic.w	r3, r3, #2
 80063ae:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	4907      	ldr	r1, [pc, #28]	@ (80063d4 <usbd_edpt_clear_stall+0x78>)
 80063b6:	0052      	lsls	r2, r2, #1
 80063b8:	440a      	add	r2, r1
 80063ba:	4413      	add	r3, r2
 80063bc:	f103 0220 	add.w	r2, r3, #32
 80063c0:	7813      	ldrb	r3, [r2, #0]
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	7013      	strb	r3, [r2, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000069 	.word	0x20000069
 80063d4:	20000750 	.word	0x20000750

080063d8 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	460a      	mov	r2, r1
 80063e2:	71fb      	strb	r3, [r7, #7]
 80063e4:	4613      	mov	r3, r2
 80063e6:	71bb      	strb	r3, [r7, #6]
 80063e8:	79bb      	ldrb	r3, [r7, #6]
 80063ea:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80063ec:	7b3b      	ldrb	r3, [r7, #12]
 80063ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80063f4:	73fb      	strb	r3, [r7, #15]
 80063f6:	79bb      	ldrb	r3, [r7, #6]
 80063f8:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80063fa:	7b7b      	ldrb	r3, [r7, #13]
 80063fc:	09db      	lsrs	r3, r3, #7
 80063fe:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8006400:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8006402:	7bfa      	ldrb	r2, [r7, #15]
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	490a      	ldr	r1, [pc, #40]	@ (8006430 <usbd_edpt_stalled+0x58>)
 8006408:	0052      	lsls	r2, r2, #1
 800640a:	440a      	add	r2, r1
 800640c:	4413      	add	r3, r2
 800640e:	3320      	adds	r3, #32
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	20000750 	.word	0x20000750

08006434 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	6039      	str	r1, [r7, #0]
 800643e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	6039      	str	r1, [r7, #0]
 8006456:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <status_stage_xact+0x1e>
 8006466:	2300      	movs	r3, #0
 8006468:	e000      	b.n	800646c <status_stage_xact+0x20>
 800646a:	2380      	movs	r3, #128	@ 0x80
 800646c:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800646e:	7bf9      	ldrb	r1, [r7, #15]
 8006470:	79f8      	ldrb	r0, [r7, #7]
 8006472:	2300      	movs	r3, #0
 8006474:	2200      	movs	r2, #0
 8006476:	f7ff fe8f 	bl	8006198 <usbd_edpt_xfer>
 800647a:	4603      	mov	r3, r0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	6039      	str	r1, [r7, #0]
 800648e:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8006490:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <tud_control_status+0x3c>)
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	6810      	ldr	r0, [r2, #0]
 8006496:	6851      	ldr	r1, [r2, #4]
 8006498:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800649a:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <tud_control_status+0x3c>)
 800649c:	2200      	movs	r2, #0
 800649e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <tud_control_status+0x3c>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80064a6:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <tud_control_status+0x3c>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff ffcb 	bl	800644c <status_stage_xact>
 80064b6:	4603      	mov	r3, r0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	2000084c 	.word	0x2000084c

080064c4 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80064ce:	4b24      	ldr	r3, [pc, #144]	@ (8006560 <data_stage_xact+0x9c>)
 80064d0:	899a      	ldrh	r2, [r3, #12]
 80064d2:	4b23      	ldr	r3, [pc, #140]	@ (8006560 <data_stage_xact+0x9c>)
 80064d4:	89db      	ldrh	r3, [r3, #14]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	b29b      	uxth	r3, r3
 80064da:	837b      	strh	r3, [r7, #26]
 80064dc:	2340      	movs	r3, #64	@ 0x40
 80064de:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80064e0:	8b7a      	ldrh	r2, [r7, #26]
 80064e2:	8b3b      	ldrh	r3, [r7, #24]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	bf28      	it	cs
 80064e8:	4613      	movcs	r3, r2
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80064ee:	2300      	movs	r3, #0
 80064f0:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 80064f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006560 <data_stage_xact+0x9c>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01e      	beq.n	800653e <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8006500:	2380      	movs	r3, #128	@ 0x80
 8006502:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8006504:	8bbb      	ldrh	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d019      	beq.n	800653e <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800650a:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <data_stage_xact+0x9c>)
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	8bbb      	ldrh	r3, [r7, #28]
 8006510:	4914      	ldr	r1, [pc, #80]	@ (8006564 <data_stage_xact+0xa0>)
 8006512:	6179      	str	r1, [r7, #20]
 8006514:	2140      	movs	r1, #64	@ 0x40
 8006516:	6139      	str	r1, [r7, #16]
 8006518:	60fa      	str	r2, [r7, #12]
 800651a:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	429a      	cmp	r2, r3
 8006522:	d202      	bcs.n	800652a <data_stage_xact+0x66>
    return -1;
 8006524:	f04f 33ff 	mov.w	r3, #4294967295
 8006528:	e005      	b.n	8006536 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	68f9      	ldr	r1, [r7, #12]
 800652e:	6978      	ldr	r0, [r7, #20]
 8006530:	f002 fa98 	bl	8008a64 <memcpy>
  return 0;
 8006534:	2300      	movs	r3, #0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <data_stage_xact+0x7a>
 800653a:	2300      	movs	r3, #0
 800653c:	e00b      	b.n	8006556 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800653e:	8bbb      	ldrh	r3, [r7, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <data_stage_xact+0x84>
 8006544:	4a07      	ldr	r2, [pc, #28]	@ (8006564 <data_stage_xact+0xa0>)
 8006546:	e000      	b.n	800654a <data_stage_xact+0x86>
 8006548:	2200      	movs	r2, #0
 800654a:	8bbb      	ldrh	r3, [r7, #28]
 800654c:	7ff9      	ldrb	r1, [r7, #31]
 800654e:	79f8      	ldrb	r0, [r7, #7]
 8006550:	f7ff fe22 	bl	8006198 <usbd_edpt_xfer>
 8006554:	4603      	mov	r3, r0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	2000084c 	.word	0x2000084c
 8006564:	20000860 	.word	0x20000860

08006568 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	461a      	mov	r2, r3
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	4613      	mov	r3, r2
 800657a:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800657c:	4b30      	ldr	r3, [pc, #192]	@ (8006640 <tud_control_xfer+0xd8>)
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	6810      	ldr	r0, [r2, #0]
 8006582:	6851      	ldr	r1, [r2, #4]
 8006584:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8006586:	4a2e      	ldr	r2, [pc, #184]	@ (8006640 <tud_control_xfer+0xd8>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800658c:	4b2c      	ldr	r3, [pc, #176]	@ (8006640 <tud_control_xfer+0xd8>)
 800658e:	2200      	movs	r2, #0
 8006590:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	88db      	ldrh	r3, [r3, #6]
 8006596:	b29a      	uxth	r2, r3
 8006598:	89bb      	ldrh	r3, [r7, #12]
 800659a:	827b      	strh	r3, [r7, #18]
 800659c:	4613      	mov	r3, r2
 800659e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80065a0:	8a7a      	ldrh	r2, [r7, #18]
 80065a2:	8a3b      	ldrh	r3, [r7, #16]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bf28      	it	cs
 80065a8:	4613      	movcs	r3, r2
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	4b24      	ldr	r3, [pc, #144]	@ (8006640 <tud_control_xfer+0xd8>)
 80065ae:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	88db      	ldrh	r3, [r3, #6]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d026      	beq.n	8006608 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 80065ba:	4b21      	ldr	r3, [pc, #132]	@ (8006640 <tud_control_xfer+0xd8>)
 80065bc:	899b      	ldrh	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <tud_control_xfer+0x76>
 80065c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006644 <tud_control_xfer+0xdc>)
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d000      	beq.n	80065da <tud_control_xfer+0x72>
 80065d8:	be00      	bkpt	0x0000
 80065da:	2300      	movs	r3, #0
 80065dc:	e02b      	b.n	8006636 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff ff6f 	bl	80064c4 <data_stage_xact>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f083 0301 	eor.w	r3, r3, #1
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d020      	beq.n	8006634 <tud_control_xfer+0xcc>
 80065f2:	4b14      	ldr	r3, [pc, #80]	@ (8006644 <tud_control_xfer+0xdc>)
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d000      	beq.n	8006604 <tud_control_xfer+0x9c>
 8006602:	be00      	bkpt	0x0000
 8006604:	2300      	movs	r3, #0
 8006606:	e016      	b.n	8006636 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff ff1d 	bl	800644c <status_stage_xact>
 8006612:	4603      	mov	r3, r0
 8006614:	f083 0301 	eor.w	r3, r3, #1
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <tud_control_xfer+0xcc>
 800661e:	4b09      	ldr	r3, [pc, #36]	@ (8006644 <tud_control_xfer+0xdc>)
 8006620:	61fb      	str	r3, [r7, #28]
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d000      	beq.n	8006630 <tud_control_xfer+0xc8>
 800662e:	be00      	bkpt	0x0000
 8006630:	2300      	movs	r3, #0
 8006632:	e000      	b.n	8006636 <tud_control_xfer+0xce>
  }

  return true;
 8006634:	2301      	movs	r3, #1
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	2000084c 	.word	0x2000084c
 8006644:	e000edf0 	.word	0xe000edf0

08006648 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800664c:	2214      	movs	r2, #20
 800664e:	2100      	movs	r1, #0
 8006650:	4802      	ldr	r0, [pc, #8]	@ (800665c <usbd_control_reset+0x14>)
 8006652:	f002 f9da 	bl	8008a0a <memset>
}
 8006656:	bf00      	nop
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	2000084c 	.word	0x2000084c

08006660 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8006668:	4a04      	ldr	r2, [pc, #16]	@ (800667c <usbd_control_set_complete_callback+0x1c>)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6113      	str	r3, [r2, #16]
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	2000084c 	.word	0x2000084c

08006680 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8006688:	4b09      	ldr	r3, [pc, #36]	@ (80066b0 <usbd_control_set_request+0x30>)
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6810      	ldr	r0, [r2, #0]
 800668e:	6851      	ldr	r1, [r2, #4]
 8006690:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8006692:	4b07      	ldr	r3, [pc, #28]	@ (80066b0 <usbd_control_set_request+0x30>)
 8006694:	2200      	movs	r2, #0
 8006696:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <usbd_control_set_request+0x30>)
 800669a:	2200      	movs	r2, #0
 800669c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800669e:	4b04      	ldr	r3, [pc, #16]	@ (80066b0 <usbd_control_set_request+0x30>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	819a      	strh	r2, [r3, #12]
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	2000084c 	.word	0x2000084c

080066b4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	4603      	mov	r3, r0
 80066be:	71fb      	strb	r3, [r7, #7]
 80066c0:	460b      	mov	r3, r1
 80066c2:	71bb      	strb	r3, [r7, #6]
 80066c4:	4613      	mov	r3, r2
 80066c6:	717b      	strb	r3, [r7, #5]
 80066c8:	79bb      	ldrb	r3, [r7, #6]
 80066ca:	73fb      	strb	r3, [r7, #15]
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	09db      	lsrs	r3, r3, #7
 80066d0:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 80066d2:	4a4f      	ldr	r2, [pc, #316]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	4293      	cmp	r3, r2
 80066de:	d01e      	beq.n	800671e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <usbd_control_xfer_cb+0x48>
 80066e6:	4b4b      	ldr	r3, [pc, #300]	@ (8006814 <usbd_control_xfer_cb+0x160>)
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d000      	beq.n	80066f8 <usbd_control_xfer_cb+0x44>
 80066f6:	be00      	bkpt	0x0000
 80066f8:	2300      	movs	r3, #0
 80066fa:	e084      	b.n	8006806 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	4944      	ldr	r1, [pc, #272]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fe97 	bl	8006434 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8006706:	4b42      	ldr	r3, [pc, #264]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800670e:	4b40      	ldr	r3, [pc, #256]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	79f8      	ldrb	r0, [r7, #7]
 8006714:	4a3e      	ldr	r2, [pc, #248]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006716:	2103      	movs	r1, #3
 8006718:	4798      	blx	r3
    }

    return true;
 800671a:	2301      	movs	r3, #1
 800671c:	e073      	b.n	8006806 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800671e:	4b3c      	ldr	r3, [pc, #240]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10c      	bne.n	8006746 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800672c:	4b38      	ldr	r3, [pc, #224]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <usbd_control_xfer_cb+0x84>
 8006734:	2300      	movs	r3, #0
 8006736:	e066      	b.n	8006806 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8006738:	4b35      	ldr	r3, [pc, #212]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	4936      	ldr	r1, [pc, #216]	@ (8006818 <usbd_control_xfer_cb+0x164>)
 8006740:	4618      	mov	r0, r3
 8006742:	f002 f98f 	bl	8008a64 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8006746:	4b32      	ldr	r3, [pc, #200]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006748:	89da      	ldrh	r2, [r3, #14]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	4413      	add	r3, r2
 8006750:	b29a      	uxth	r2, r3
 8006752:	4b2f      	ldr	r3, [pc, #188]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006754:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8006756:	4b2e      	ldr	r3, [pc, #184]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	4413      	add	r3, r2
 800675e:	4a2c      	ldr	r2, [pc, #176]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006760:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8006762:	4b2b      	ldr	r3, [pc, #172]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006764:	88da      	ldrh	r2, [r3, #6]
 8006766:	4b2a      	ldr	r3, [pc, #168]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006768:	89db      	ldrh	r3, [r3, #14]
 800676a:	429a      	cmp	r2, r3
 800676c:	d002      	beq.n	8006774 <usbd_control_xfer_cb+0xc0>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b3f      	cmp	r3, #63	@ 0x3f
 8006772:	d831      	bhi.n	80067d8 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8006774:	2301      	movs	r3, #1
 8006776:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8006778:	4b25      	ldr	r3, [pc, #148]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d007      	beq.n	8006790 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8006780:	4b23      	ldr	r3, [pc, #140]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	79f8      	ldrb	r0, [r7, #7]
 8006786:	4a22      	ldr	r2, [pc, #136]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 8006788:	2102      	movs	r1, #2
 800678a:	4798      	blx	r3
 800678c:	4603      	mov	r3, r0
 800678e:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8006790:	7ffb      	ldrb	r3, [r7, #31]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d015      	beq.n	80067c2 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	491d      	ldr	r1, [pc, #116]	@ (8006810 <usbd_control_xfer_cb+0x15c>)
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fe56 	bl	800644c <status_stage_xact>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f083 0301 	eor.w	r3, r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d02a      	beq.n	8006802 <usbd_control_xfer_cb+0x14e>
 80067ac:	4b19      	ldr	r3, [pc, #100]	@ (8006814 <usbd_control_xfer_cb+0x160>)
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d000      	beq.n	80067be <usbd_control_xfer_cb+0x10a>
 80067bc:	be00      	bkpt	0x0000
 80067be:	2300      	movs	r3, #0
 80067c0:	e021      	b.n	8006806 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 ff30 	bl	800762c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	2180      	movs	r1, #128	@ 0x80
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 ff2b 	bl	800762c <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 80067d6:	e014      	b.n	8006802 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fe72 	bl	80064c4 <data_stage_xact>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f083 0301 	eor.w	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <usbd_control_xfer_cb+0x150>
 80067ec:	4b09      	ldr	r3, [pc, #36]	@ (8006814 <usbd_control_xfer_cb+0x160>)
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d000      	beq.n	80067fe <usbd_control_xfer_cb+0x14a>
 80067fc:	be00      	bkpt	0x0000
 80067fe:	2300      	movs	r3, #0
 8006800:	e001      	b.n	8006806 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8006802:	bf00      	nop
  }

  return true;
 8006804:	2301      	movs	r3, #1
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2000084c 	.word	0x2000084c
 8006814:	e000edf0 	.word	0xe000edf0
 8006818:	20000860 	.word	0x20000860

0800681c <__NVIC_EnableIRQ>:
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	2b00      	cmp	r3, #0
 800682c:	db0b      	blt.n	8006846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	f003 021f 	and.w	r2, r3, #31
 8006834:	4907      	ldr	r1, [pc, #28]	@ (8006854 <__NVIC_EnableIRQ+0x38>)
 8006836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	2001      	movs	r0, #1
 800683e:	fa00 f202 	lsl.w	r2, r0, r2
 8006842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	e000e100 	.word	0xe000e100

08006858 <__NVIC_DisableIRQ>:
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006866:	2b00      	cmp	r3, #0
 8006868:	db12      	blt.n	8006890 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	f003 021f 	and.w	r2, r3, #31
 8006870:	490a      	ldr	r1, [pc, #40]	@ (800689c <__NVIC_DisableIRQ+0x44>)
 8006872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	2001      	movs	r0, #1
 800687a:	fa00 f202 	lsl.w	r2, r0, r2
 800687e:	3320      	adds	r3, #32
 8006880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006884:	f3bf 8f4f 	dsb	sy
}
 8006888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800688a:	f3bf 8f6f 	isb	sy
}
 800688e:	bf00      	nop
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	e000e100 	.word	0xe000e100

080068a0 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	71fb      	strb	r3, [r7, #7]
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80068ae:	7afb      	ldrb	r3, [r7, #11]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d901      	bls.n	80068b8 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	4a13      	ldr	r2, [pc, #76]	@ (8006908 <dma_setup_prepare+0x68>)
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4413      	add	r3, r2
 80068c0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80068c2:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c8:	4a10      	ldr	r2, [pc, #64]	@ (800690c <dma_setup_prepare+0x6c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d904      	bls.n	80068d8 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	db10      	blt.n	80068fa <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4a0d      	ldr	r2, [pc, #52]	@ (8006910 <dma_setup_prepare+0x70>)
 80068dc:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 80068e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006914 <dma_setup_prepare+0x74>)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80068ee:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80068f8:	e000      	b.n	80068fc <dma_setup_prepare+0x5c>
      return;
 80068fa:	bf00      	nop
}
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	08008cf4 	.word	0x08008cf4
 800690c:	4f543009 	.word	0x4f543009
 8006910:	20080008 	.word	0x20080008
 8006914:	20000968 	.word	0x20000968

08006918 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8006918:	b480      	push	{r7}
 800691a:	b091      	sub	sp, #68	@ 0x44
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	71fb      	strb	r3, [r7, #7]
 8006922:	460b      	mov	r3, r1
 8006924:	71bb      	strb	r3, [r7, #6]
 8006926:	4613      	mov	r3, r2
 8006928:	80bb      	strh	r3, [r7, #4]
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800692e:	7e7b      	ldrb	r3, [r7, #25]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d901      	bls.n	8006938 <dfifo_alloc+0x20>
    rhport = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006938:	7e7b      	ldrb	r3, [r7, #25]
 800693a:	4a65      	ldr	r2, [pc, #404]	@ (8006ad0 <dfifo_alloc+0x1b8>)
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	4413      	add	r3, r2
 8006940:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006942:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	4a61      	ldr	r2, [pc, #388]	@ (8006ad0 <dfifo_alloc+0x1b8>)
 800694a:	4413      	add	r3, r2
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800694e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006950:	7a1b      	ldrb	r3, [r3, #8]
 8006952:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8006956:	79bb      	ldrb	r3, [r7, #6]
 8006958:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800695a:	7ebb      	ldrb	r3, [r7, #26]
 800695c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006960:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8006962:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8006966:	79bb      	ldrb	r3, [r7, #6]
 8006968:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800696a:	7efb      	ldrb	r3, [r7, #27]
 800696c:	09db      	lsrs	r3, r3, #7
 800696e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8006970:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8006974:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8006978:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800697c:	429a      	cmp	r2, r3
 800697e:	d30a      	bcc.n	8006996 <dfifo_alloc+0x7e>
 8006980:	4b54      	ldr	r3, [pc, #336]	@ (8006ad4 <dfifo_alloc+0x1bc>)
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d000      	beq.n	8006992 <dfifo_alloc+0x7a>
 8006990:	be00      	bkpt	0x0000
 8006992:	2300      	movs	r3, #0
 8006994:	e095      	b.n	8006ac2 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8006996:	88bb      	ldrh	r3, [r7, #4]
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	2304      	movs	r3, #4
 800699c:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	1e5a      	subs	r2, r3, #1
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 80069ae:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d12a      	bne.n	8006a0c <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 80069b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	81fb      	strh	r3, [r7, #14]
 80069be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069c2:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 80069c4:	89fb      	ldrh	r3, [r7, #14]
 80069c6:	089b      	lsrs	r3, r3, #2
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f103 0208 	add.w	r2, r3, #8
 80069ce:	7b7b      	ldrb	r3, [r7, #13]
 80069d0:	4413      	add	r3, r2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 80069d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 80069da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d26d      	bcs.n	8006ac0 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 80069e4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 80069e6:	889b      	ldrh	r3, [r3, #4]
 80069e8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d90a      	bls.n	8006a04 <dfifo_alloc+0xec>
 80069ee:	4b39      	ldr	r3, [pc, #228]	@ (8006ad4 <dfifo_alloc+0x1bc>)
 80069f0:	623b      	str	r3, [r7, #32]
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d000      	beq.n	8006a00 <dfifo_alloc+0xe8>
 80069fe:	be00      	bkpt	0x0000
 8006a00:	2300      	movs	r3, #0
 8006a02:	e05e      	b.n	8006ac2 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8006a04:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a0a:	e059      	b.n	8006ac0 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0e:	7a5b      	ldrb	r3, [r3, #9]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d016      	beq.n	8006a42 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8006a14:	4b30      	ldr	r3, [pc, #192]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 8006a16:	799a      	ldrb	r2, [r3, #6]
 8006a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1a:	7a5b      	ldrb	r3, [r3, #9]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d30a      	bcc.n	8006a36 <dfifo_alloc+0x11e>
 8006a20:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad4 <dfifo_alloc+0x1bc>)
 8006a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d000      	beq.n	8006a32 <dfifo_alloc+0x11a>
 8006a30:	be00      	bkpt	0x0000
 8006a32:	2300      	movs	r3, #0
 8006a34:	e045      	b.n	8006ac2 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8006a36:	4b28      	ldr	r3, [pc, #160]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 8006a38:	799b      	ldrb	r3, [r3, #6]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	4b26      	ldr	r3, [pc, #152]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 8006a40:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8006a4e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8006a54:	4b20      	ldr	r3, [pc, #128]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 8006a56:	889b      	ldrh	r3, [r3, #4]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	4413      	add	r3, r2
 8006a62:	4299      	cmp	r1, r3
 8006a64:	d20a      	bcs.n	8006a7c <dfifo_alloc+0x164>
 8006a66:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad4 <dfifo_alloc+0x1bc>)
 8006a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d000      	beq.n	8006a78 <dfifo_alloc+0x160>
 8006a76:	be00      	bkpt	0x0000
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e022      	b.n	8006ac2 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8006a7c:	4b16      	ldr	r3, [pc, #88]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 8006a7e:	889a      	ldrh	r2, [r3, #4]
 8006a80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	4b14      	ldr	r3, [pc, #80]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 8006a88:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8006a8a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d108      	bne.n	8006aa4 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8006a92:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	4a10      	ldr	r2, [pc, #64]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 8006a98:	8892      	ldrh	r2, [r2, #4]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006aa2:	e00d      	b.n	8006ac0 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8006aa4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad8 <dfifo_alloc+0x1c0>)
 8006aaa:	8892      	ldrh	r2, [r2, #4]
 8006aac:	431a      	orrs	r2, r3
 8006aae:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ab8:	3340      	adds	r3, #64	@ 0x40
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8006ac0:	2301      	movs	r3, #1
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3744      	adds	r7, #68	@ 0x44
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	08008cf4 	.word	0x08008cf4
 8006ad4:	e000edf0 	.word	0xe000edf0
 8006ad8:	20000960 	.word	0x20000960

08006adc <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	4a27      	ldr	r2, [pc, #156]	@ (8006b88 <dfifo_device_init+0xac>)
 8006aec:	4413      	add	r3, r2
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006af4:	7b3b      	ldrb	r3, [r7, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d901      	bls.n	8006afe <dfifo_device_init+0x22>
    rhport = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006afe:	7b3b      	ldrb	r3, [r7, #12]
 8006b00:	4a21      	ldr	r2, [pc, #132]	@ (8006b88 <dfifo_device_init+0xac>)
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	4413      	add	r3, r2
 8006b06:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006b08:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	7a1b      	ldrb	r3, [r3, #8]
 8006b0e:	2240      	movs	r2, #64	@ 0x40
 8006b10:	81fa      	strh	r2, [r7, #14]
 8006b12:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8006b14:	89fb      	ldrh	r3, [r7, #14]
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f103 0208 	add.w	r2, r3, #8
 8006b1e:	7b7b      	ldrb	r3, [r7, #13]
 8006b20:	4413      	add	r3, r2
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8006b28:	461a      	mov	r2, r3
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b36:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8006b38:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8006b3a:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	089b      	lsrs	r3, r3, #2
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	4b11      	ldr	r3, [pc, #68]	@ (8006b8c <dfifo_device_init+0xb0>)
 8006b46:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b8c <dfifo_device_init+0xb0>)
 8006b50:	889a      	ldrh	r2, [r3, #4]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	7a1b      	ldrb	r3, [r3, #8]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b8c <dfifo_device_init+0xb0>)
 8006b60:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <dfifo_device_init+0xb0>)
 8006b64:	889b      	ldrh	r3, [r3, #4]
 8006b66:	461a      	mov	r2, r3
 8006b68:	4613      	mov	r3, r2
 8006b6a:	041b      	lsls	r3, r3, #16
 8006b6c:	441a      	add	r2, r3
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	2240      	movs	r2, #64	@ 0x40
 8006b76:	2180      	movs	r1, #128	@ 0x80
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fecd 	bl	8006918 <dfifo_alloc>
}
 8006b7e:	bf00      	nop
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	08008cf4 	.word	0x08008cf4
 8006b8c:	20000960 	.word	0x20000960

08006b90 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8006b90:	b480      	push	{r7}
 8006b92:	b08b      	sub	sp, #44	@ 0x2c
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	6039      	str	r1, [r7, #0]
 8006b9a:	71fb      	strb	r3, [r7, #7]
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006ba0:	7c7b      	ldrb	r3, [r7, #17]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d901      	bls.n	8006baa <edpt_activate+0x1a>
    rhport = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006baa:	7c7b      	ldrb	r3, [r7, #17]
 8006bac:	4a45      	ldr	r2, [pc, #276]	@ (8006cc4 <edpt_activate+0x134>)
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	4413      	add	r3, r2
 8006bb2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	789b      	ldrb	r3, [r3, #2]
 8006bba:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006bbc:	7cbb      	ldrb	r3, [r7, #18]
 8006bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	789b      	ldrb	r3, [r3, #2]
 8006bcc:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006bce:	7cfb      	ldrb	r3, [r7, #19]
 8006bd0:	09db      	lsrs	r3, r3, #7
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8006bd8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006be0:	0052      	lsls	r2, r2, #1
 8006be2:	4413      	add	r3, r2
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	4a38      	ldr	r2, [pc, #224]	@ (8006cc8 <edpt_activate+0x138>)
 8006be8:	4413      	add	r3, r2
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	889b      	ldrh	r3, [r3, #4]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bfa:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	799a      	ldrb	r2, [r3, #6]
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	895b      	ldrh	r3, [r3, #10]
 8006c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	89bb      	ldrh	r3, [r7, #12]
 8006c18:	f362 030a 	bfi	r3, r2, #0, #11
 8006c1c:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 8006c1e:	7b7b      	ldrb	r3, [r7, #13]
 8006c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c24:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	78db      	ldrb	r3, [r3, #3]
 8006c2a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	f362 0383 	bfi	r3, r2, #2, #2
 8006c36:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d003      	beq.n	8006c4e <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
 8006c48:	f043 0310 	orr.w	r3, r3, #16
 8006c4c:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8006c4e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d108      	bne.n	8006c68 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 8006c56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	89fb      	ldrh	r3, [r7, #14]
 8006c62:	f362 1389 	bfi	r3, r2, #6, #4
 8006c66:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8006c68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c7c:	0112      	lsls	r2, r2, #4
 8006c7e:	4413      	add	r3, r2
 8006c80:	3348      	adds	r3, #72	@ 0x48
 8006c82:	015b      	lsls	r3, r3, #5
 8006c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c86:	4413      	add	r3, r2
 8006c88:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8006c96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c9a:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8006c9e:	2901      	cmp	r1, #1
 8006ca0:	d101      	bne.n	8006ca6 <edpt_activate+0x116>
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	e000      	b.n	8006ca8 <edpt_activate+0x118>
 8006ca6:	2110      	movs	r1, #16
 8006ca8:	440b      	add	r3, r1
 8006caa:	2101      	movs	r1, #1
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8006cb8:	bf00      	nop
 8006cba:	372c      	adds	r7, #44	@ 0x2c
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	08008cf4 	.word	0x08008cf4
 8006cc8:	200008a0 	.word	0x200008a0

08006ccc <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8006ccc:	b480      	push	{r7}
 8006cce:	b089      	sub	sp, #36	@ 0x24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	71fb      	strb	r3, [r7, #7]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	71bb      	strb	r3, [r7, #6]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	717b      	strb	r3, [r7, #5]
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006ce2:	7c7b      	ldrb	r3, [r7, #17]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d901      	bls.n	8006cec <edpt_disable+0x20>
    rhport = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006cec:	7c7b      	ldrb	r3, [r7, #17]
 8006cee:	4a5b      	ldr	r2, [pc, #364]	@ (8006e5c <edpt_disable+0x190>)
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	4413      	add	r3, r2
 8006cf4:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	79bb      	ldrb	r3, [r7, #6]
 8006cfa:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006cfc:	7cbb      	ldrb	r3, [r7, #18]
 8006cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d02:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8006d04:	76fb      	strb	r3, [r7, #27]
 8006d06:	79bb      	ldrb	r3, [r7, #6]
 8006d08:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006d0a:	7cfb      	ldrb	r3, [r7, #19]
 8006d0c:	09db      	lsrs	r3, r3, #7
 8006d0e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8006d10:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8006d12:	7ebb      	ldrb	r3, [r7, #26]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	7efb      	ldrb	r3, [r7, #27]
 8006d22:	0112      	lsls	r2, r2, #4
 8006d24:	4413      	add	r3, r2
 8006d26:	3348      	adds	r3, #72	@ 0x48
 8006d28:	015b      	lsls	r3, r3, #5
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8006d30:	7ebb      	ldrb	r3, [r7, #26]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d149      	bne.n	8006dca <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8006d36:	7efb      	ldrb	r3, [r7, #27]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <edpt_disable+0x78>
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	db0d      	blt.n	8006d60 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	797a      	ldrb	r2, [r7, #5]
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	d002      	beq.n	8006d54 <edpt_disable+0x88>
 8006d4e:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8006d52:	e001      	b.n	8006d58 <edpt_disable+0x8c>
 8006d54:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e022      	b.n	8006da6 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8006d6c:	bf00      	nop
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f9      	beq.n	8006d6e <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	797a      	ldrb	r2, [r7, #5]
 8006d80:	2a00      	cmp	r2, #0
 8006d82:	d001      	beq.n	8006d88 <edpt_disable+0xbc>
 8006d84:	4a36      	ldr	r2, [pc, #216]	@ (8006e60 <edpt_disable+0x194>)
 8006d86:	e001      	b.n	8006d8c <edpt_disable+0xc0>
 8006d88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8006d92:	bf00      	nop
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0f9      	beq.n	8006d94 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2202      	movs	r2, #2
 8006da4:	609a      	str	r2, [r3, #8]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	7efb      	ldrb	r3, [r7, #27]
 8006dac:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	f043 0220 	orr.w	r2, r3, #32
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8006dba:	bf00      	nop
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f9      	bne.n	8006dbc <edpt_disable+0xf0>
}
 8006dc8:	e041      	b.n	8006e4e <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8006dca:	7efb      	ldrb	r3, [r7, #27]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <edpt_disable+0x10c>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	db0c      	blt.n	8006df2 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	797a      	ldrb	r2, [r7, #5]
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	d002      	beq.n	8006de8 <edpt_disable+0x11c>
 8006de2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006de6:	e000      	b.n	8006dea <edpt_disable+0x11e>
 8006de8:	2200      	movs	r2, #0
 8006dea:	431a      	orrs	r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	e02d      	b.n	8006e4e <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8006df8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8006e02:	bf00      	nop
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0f9      	beq.n	8006e04 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	797a      	ldrb	r2, [r7, #5]
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d001      	beq.n	8006e1e <edpt_disable+0x152>
 8006e1a:	4a11      	ldr	r2, [pc, #68]	@ (8006e60 <edpt_disable+0x194>)
 8006e1c:	e001      	b.n	8006e22 <edpt_disable+0x156>
 8006e1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006e22:	431a      	orrs	r2, r3
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8006e28:	bf00      	nop
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0f9      	beq.n	8006e2a <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8006e42:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	3724      	adds	r7, #36	@ 0x24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	08008cf4 	.word	0x08008cf4
 8006e60:	40200000 	.word	0x40200000

08006e64 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b090      	sub	sp, #64	@ 0x40
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	71bb      	strb	r3, [r7, #6]
 8006e72:	4613      	mov	r3, r2
 8006e74:	717b      	strb	r3, [r7, #5]
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006e7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d902      	bls.n	8006e8a <edpt_schedule_packets+0x26>
    rhport = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006e8a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e8e:	4a65      	ldr	r2, [pc, #404]	@ (8007024 <edpt_schedule_packets+0x1c0>)
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	4413      	add	r3, r2
 8006e94:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8006e98:	79ba      	ldrb	r2, [r7, #6]
 8006e9a:	797b      	ldrb	r3, [r7, #5]
 8006e9c:	0052      	lsls	r2, r2, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	4a61      	ldr	r2, [pc, #388]	@ (8007028 <edpt_schedule_packets+0x1c4>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8006ea8:	797b      	ldrb	r3, [r7, #5]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	bf14      	ite	ne
 8006eae:	2301      	movne	r3, #1
 8006eb0:	2300      	moveq	r3, #0
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	79bb      	ldrb	r3, [r7, #6]
 8006eb8:	0112      	lsls	r2, r2, #4
 8006eba:	4413      	add	r3, r2
 8006ebc:	3348      	adds	r3, #72	@ 0x48
 8006ebe:	015b      	lsls	r3, r3, #5
 8006ec0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ec2:	4413      	add	r3, r2
 8006ec4:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8006ec6:	79bb      	ldrb	r3, [r7, #6]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d11c      	bne.n	8006f06 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8006ecc:	797b      	ldrb	r3, [r7, #5]
 8006ece:	4a57      	ldr	r2, [pc, #348]	@ (800702c <edpt_schedule_packets+0x1c8>)
 8006ed0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed6:	895b      	ldrh	r3, [r3, #10]
 8006ed8:	853a      	strh	r2, [r7, #40]	@ 0x28
 8006eda:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006edc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006ede:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	bf28      	it	cs
 8006ee4:	4613      	movcs	r3, r2
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8006eea:	797b      	ldrb	r3, [r7, #5]
 8006eec:	4a4f      	ldr	r2, [pc, #316]	@ (800702c <edpt_schedule_packets+0x1c8>)
 8006eee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006ef2:	797b      	ldrb	r3, [r7, #5]
 8006ef4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8006ef6:	1a8a      	subs	r2, r1, r2
 8006ef8:	b291      	uxth	r1, r2
 8006efa:	4a4c      	ldr	r2, [pc, #304]	@ (800702c <edpt_schedule_packets+0x1c8>)
 8006efc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8006f00:	2301      	movs	r3, #1
 8006f02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006f04:	e014      	b.n	8006f30 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8006f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f08:	891b      	ldrh	r3, [r3, #8]
 8006f0a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8006f0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006f0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f10:	8952      	ldrh	r2, [r2, #10]
 8006f12:	623b      	str	r3, [r7, #32]
 8006f14:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8006f16:	6a3a      	ldr	r2, [r7, #32]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	1e5a      	subs	r2, r3, #1
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f24:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 8006f26:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 8006f34:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8006f36:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f362 0312 	bfi	r3, r2, #0, #19
 8006f40:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 8006f42:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	8afb      	ldrh	r3, [r7, #22]
 8006f4c:	f362 03cc 	bfi	r3, r2, #3, #10
 8006f50:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 8006f5e:	7cfb      	ldrb	r3, [r7, #19]
 8006f60:	f043 0304 	orr.w	r3, r3, #4
 8006f64:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 8006f66:	7cfb      	ldrb	r3, [r7, #19]
 8006f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f6c:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 8006f6e:	7cbb      	ldrb	r3, [r7, #18]
 8006f70:	f003 030c 	and.w	r3, r3, #12
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d11a      	bne.n	8006fb0 <edpt_schedule_packets+0x14c>
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7c:	7b1b      	ldrb	r3, [r3, #12]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d116      	bne.n	8006fb0 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8006f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f84:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8006f88:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 8006f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 8006f9e:	7cfb      	ldrb	r3, [r7, #19]
 8006fa0:	f043 0310 	orr.w	r3, r3, #16
 8006fa4:	74fb      	strb	r3, [r7, #19]
 8006fa6:	e003      	b.n	8006fb0 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 8006fa8:	7cfb      	ldrb	r3, [r7, #19]
 8006faa:	f043 0320 	orr.w	r3, r3, #32
 8006fae:	74fb      	strb	r3, [r7, #19]
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb8:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8006fba:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 8006fbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 8006fc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d015      	beq.n	8006ff4 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8006fc8:	797b      	ldrb	r3, [r7, #5]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d109      	bne.n	8006fe2 <edpt_schedule_packets+0x17e>
 8006fce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d006      	beq.n	8006fe2 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fd fc44 	bl	800486a <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8006ff2:	e013      	b.n	800701c <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8006ffa:	797b      	ldrb	r3, [r7, #5]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d10d      	bne.n	800701c <edpt_schedule_packets+0x1b8>
 8007000:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800700c:	79ba      	ldrb	r2, [r7, #6]
 800700e:	2101      	movs	r1, #1
 8007010:	fa01 f202 	lsl.w	r2, r1, r2
 8007014:	431a      	orrs	r2, r3
 8007016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007018:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800701c:	bf00      	nop
 800701e:	3740      	adds	r7, #64	@ 0x40
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	08008cf4 	.word	0x08008cf4
 8007028:	200008a0 	.word	0x200008a0
 800702c:	20000960 	.word	0x20000960

08007030 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b08c      	sub	sp, #48	@ 0x30
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d901      	bls.n	800704a <dcd_init+0x1a>
    rhport = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	4a43      	ldr	r2, [pc, #268]	@ (800715c <dcd_init+0x12c>)
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	4413      	add	r3, r2
 8007052:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 8007056:	2208      	movs	r2, #8
 8007058:	2100      	movs	r1, #0
 800705a:	4841      	ldr	r0, [pc, #260]	@ (8007160 <dcd_init+0x130>)
 800705c:	f001 fcd5 	bl	8008a0a <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 8007060:	2101      	movs	r1, #1
 8007062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007064:	f001 f9ee 	bl	8008444 <dwc2_core_is_highspeed>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007076:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007078:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800707a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800707e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007082:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	4618      	mov	r0, r3
 800708a:	f001 f9f9 	bl	8008480 <dwc2_core_init>
 800708e:	4603      	mov	r3, r0
 8007090:	f083 0301 	eor.w	r3, r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <dcd_init+0x80>
 800709a:	4b32      	ldr	r3, [pc, #200]	@ (8007164 <dcd_init+0x134>)
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d000      	beq.n	80070ac <dcd_init+0x7c>
 80070aa:	be00      	bkpt	0x0000
 80070ac:	2300      	movs	r3, #0
 80070ae:	e050      	b.n	8007152 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80070b6:	f023 0303 	bic.w	r3, r3, #3
 80070ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 80070bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80070c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c8:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 80070ca:	7b3b      	ldrb	r3, [r7, #12]
 80070cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b80      	cmp	r3, #128	@ 0x80
 80070d4:	d108      	bne.n	80070e8 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 80070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070de:	e003      	b.n	80070e8 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 80070e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e2:	f043 0303 	orr.w	r3, r3, #3
 80070e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	f043 0304 	orr.w	r3, r3, #4
 80070ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 f92a 	bl	8007354 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8007100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007108:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800710c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710e:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8007118:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800711c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711e:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	4b10      	ldr	r3, [pc, #64]	@ (8007168 <dcd_init+0x138>)
 8007126:	4313      	orrs	r3, r2
 8007128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800712a:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007138:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	f043 0301 	orr.w	r3, r3, #1
 8007140:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 8007142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007144:	6a3a      	ldr	r2, [r7, #32]
 8007146:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f8e0 	bl	8007310 <dcd_connect>
  return true;
 8007150:	2301      	movs	r3, #1
}
 8007152:	4618      	mov	r0, r3
 8007154:	3730      	adds	r7, #48	@ 0x30
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	08008cf4 	.word	0x08008cf4
 8007160:	20000960 	.word	0x20000960
 8007164:	e000edf0 	.word	0xe000edf0
 8007168:	80003004 	.word	0x80003004

0800716c <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	71fb      	strb	r3, [r7, #7]
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	73fb      	strb	r3, [r7, #15]
 800717a:	2301      	movs	r3, #1
 800717c:	73bb      	strb	r3, [r7, #14]
 800717e:	2301      	movs	r3, #1
 8007180:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	4a0c      	ldr	r2, [pc, #48]	@ (80071b8 <dcd_int_enable+0x4c>)
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	4413      	add	r3, r2
 800718a:	3304      	adds	r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8007190:	7b7b      	ldrb	r3, [r7, #13]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 8007196:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fb3e 	bl	800681c <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 80071a0:	e004      	b.n	80071ac <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 80071a2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fb56 	bl	8006858 <__NVIC_DisableIRQ>
}
 80071ac:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	08008cf4 	.word	0x08008cf4

080071bc <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	71fb      	strb	r3, [r7, #7]
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	73fb      	strb	r3, [r7, #15]
 80071ca:	2301      	movs	r3, #1
 80071cc:	73bb      	strb	r3, [r7, #14]
 80071ce:	2300      	movs	r3, #0
 80071d0:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007208 <dcd_int_disable+0x4c>)
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	4413      	add	r3, r2
 80071da:	3304      	adds	r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 80071e0:	7b7b      	ldrb	r3, [r7, #13]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 80071e6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fb16 	bl	800681c <__NVIC_EnableIRQ>
}
 80071f0:	e004      	b.n	80071fc <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 80071f2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fb2e 	bl	8006858 <__NVIC_DisableIRQ>
}
 80071fc:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	08008cf4 	.word	0x08008cf4

0800720c <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	460a      	mov	r2, r1
 8007216:	71fb      	strb	r3, [r7, #7]
 8007218:	4613      	mov	r3, r2
 800721a:	71bb      	strb	r3, [r7, #6]
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007220:	7a7b      	ldrb	r3, [r7, #9]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d901      	bls.n	800722a <dcd_set_address+0x1e>
    rhport = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800722a:	7a7b      	ldrb	r3, [r7, #9]
 800722c:	4a14      	ldr	r2, [pc, #80]	@ (8007280 <dcd_set_address+0x74>)
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007234:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800723c:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 8007240:	79bb      	ldrb	r3, [r7, #6]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	431a      	orrs	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800724c:	2300      	movs	r3, #0
 800724e:	72fb      	strb	r3, [r7, #11]
 8007250:	2301      	movs	r3, #1
 8007252:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8007254:	7abb      	ldrb	r3, [r7, #10]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <dcd_set_address+0x54>
 800725a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800725e:	e000      	b.n	8007262 <dcd_set_address+0x56>
 8007260:	2300      	movs	r3, #0
 8007262:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007266:	4313      	orrs	r3, r2
 8007268:	b25b      	sxtb	r3, r3
 800726a:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800726c:	79f8      	ldrb	r0, [r7, #7]
 800726e:	2300      	movs	r3, #0
 8007270:	2200      	movs	r2, #0
 8007272:	f000 f98b 	bl	800758c <dcd_edpt_xfer>
}
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	08008cf4 	.word	0x08008cf4

08007284 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	71fb      	strb	r3, [r7, #7]
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d901      	bls.n	800729c <dcd_remote_wakeup+0x18>
    rhport = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	4a19      	ldr	r2, [pc, #100]	@ (8007304 <dcd_remote_wakeup+0x80>)
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	4413      	add	r3, r2
 80072a4:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80072a6:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80072ae:	f043 0201 	orr.w	r2, r3, #1
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2208      	movs	r2, #8
 80072bc:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f043 0208 	orr.w	r2, r3, #8
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 80072ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007308 <dcd_remote_wakeup+0x84>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a0f      	ldr	r2, [pc, #60]	@ (800730c <dcd_remote_wakeup+0x88>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	099b      	lsrs	r3, r3, #6
 80072d6:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 80072d8:	e000      	b.n	80072dc <dcd_remote_wakeup+0x58>
 80072da:	bf00      	nop
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1e5a      	subs	r2, r3, #1
 80072e0:	613a      	str	r2, [r7, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f9      	bne.n	80072da <dcd_remote_wakeup+0x56>
}
 80072e6:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80072f8:	bf00      	nop
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	08008cf4 	.word	0x08008cf4
 8007308:	20000044 	.word	0x20000044
 800730c:	10624dd3 	.word	0x10624dd3

08007310 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	71fb      	strb	r3, [r7, #7]
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800731e:	7afb      	ldrb	r3, [r7, #11]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d901      	bls.n	8007328 <dcd_connect+0x18>
    rhport = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	4a09      	ldr	r2, [pc, #36]	@ (8007350 <dcd_connect+0x40>)
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	4413      	add	r3, r2
 8007330:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007332:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800733a:	f023 0202 	bic.w	r2, r3, #2
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	08008cf4 	.word	0x08008cf4

08007354 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	71fb      	strb	r3, [r7, #7]
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d901      	bls.n	800736c <dcd_disconnect+0x18>
    rhport = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	4a09      	ldr	r2, [pc, #36]	@ (8007394 <dcd_disconnect+0x40>)
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	4413      	add	r3, r2
 8007374:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007376:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800737e:	f043 0202 	orr.w	r2, r3, #2
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	08008cf4 	.word	0x08008cf4

08007398 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	460a      	mov	r2, r1
 80073a2:	71fb      	strb	r3, [r7, #7]
 80073a4:	4613      	mov	r3, r2
 80073a6:	71bb      	strb	r3, [r7, #6]
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d901      	bls.n	80073b6 <dcd_sof_enable+0x1e>
    rhport = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	4a10      	ldr	r2, [pc, #64]	@ (80073fc <dcd_sof_enable+0x64>)
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	4413      	add	r3, r2
 80073be:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80073c0:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 80073c2:	4a0f      	ldr	r2, [pc, #60]	@ (8007400 <dcd_sof_enable+0x68>)
 80073c4:	79bb      	ldrb	r3, [r7, #6]
 80073c6:	71d3      	strb	r3, [r2, #7]

  if (en) {
 80073c8:	79bb      	ldrb	r3, [r7, #6]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2208      	movs	r2, #8
 80073d2:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f043 0208 	orr.w	r2, r3, #8
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 80073e0:	e005      	b.n	80073ee <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f023 0208 	bic.w	r2, r3, #8
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	619a      	str	r2, [r3, #24]
}
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	08008cf4 	.word	0x08008cf4
 8007400:	20000960 	.word	0x20000960

08007404 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	6039      	str	r1, [r7, #0]
 800740e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	7899      	ldrb	r1, [r3, #2]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	889b      	ldrh	r3, [r3, #4]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007422:	b29a      	uxth	r2, r3
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff fa76 	bl	8006918 <dfifo_alloc>
 800742c:	4603      	mov	r3, r0
 800742e:	f083 0301 	eor.w	r3, r3, #1
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <dcd_edpt_open+0x4a>
 8007438:	4b0a      	ldr	r3, [pc, #40]	@ (8007464 <dcd_edpt_open+0x60>)
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	d000      	beq.n	800744a <dcd_edpt_open+0x46>
 8007448:	be00      	bkpt	0x0000
 800744a:	2300      	movs	r3, #0
 800744c:	e005      	b.n	800745a <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fb9c 	bl	8006b90 <edpt_activate>
  return true;
 8007458:	2301      	movs	r3, #1
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	e000edf0 	.word	0xe000edf0

08007468 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	@ 0x28
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d901      	bls.n	8007480 <dcd_edpt_close_all+0x18>
    rhport = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	4a3f      	ldr	r2, [pc, #252]	@ (8007580 <dcd_edpt_close_all+0x118>)
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4413      	add	r3, r2
 8007488:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800748a:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	4a3c      	ldr	r2, [pc, #240]	@ (8007580 <dcd_edpt_close_all+0x118>)
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	4413      	add	r3, r2
 8007494:	3308      	adds	r3, #8
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800749a:	2000      	movs	r0, #0
 800749c:	f7fe fd4a 	bl	8005f34 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 80074a0:	4b38      	ldr	r3, [pc, #224]	@ (8007584 <dcd_edpt_close_all+0x11c>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80074ac:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80074b6:	e034      	b.n	8007522 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 80074b8:	2300      	movs	r3, #0
 80074ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80074be:	e027      	b.n	8007510 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 80074c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80074c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074c8:	0112      	lsls	r2, r2, #4
 80074ca:	4413      	add	r3, r2
 80074cc:	3348      	adds	r3, #72	@ 0x48
 80074ce:	015b      	lsls	r3, r3, #5
 80074d0:	6a3a      	ldr	r2, [r7, #32]
 80074d2:	4413      	add	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da05      	bge.n	80074ea <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 80074ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80074ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074f2:	f1c3 0301 	rsb	r3, r3, #1
 80074f6:	4924      	ldr	r1, [pc, #144]	@ (8007588 <dcd_edpt_close_all+0x120>)
 80074f8:	0052      	lsls	r2, r2, #1
 80074fa:	4413      	add	r3, r2
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	440b      	add	r3, r1
 8007500:	330a      	adds	r3, #10
 8007502:	2200      	movs	r2, #0
 8007504:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 8007506:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800750a:	3301      	adds	r3, #1
 800750c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007510:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007514:	2b01      	cmp	r3, #1
 8007516:	d9d3      	bls.n	80074c0 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 8007518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800751c:	3301      	adds	r3, #1
 800751e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007522:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007526:	7ffb      	ldrb	r3, [r7, #31]
 8007528:	429a      	cmp	r2, r3
 800752a:	d3c5      	bcc.n	80074b8 <dcd_edpt_close_all+0x50>
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	2310      	movs	r3, #16
 8007532:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	019b      	lsls	r3, r3, #6
 8007538:	f043 0220 	orr.w	r2, r3, #32
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8007540:	bf00      	nop
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f9      	bne.n	8007542 <dcd_edpt_close_all+0xda>
}
 800754e:	bf00      	nop
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2210      	movs	r2, #16
 8007558:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800755a:	bf00      	nop
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1f9      	bne.n	800755c <dcd_edpt_close_all+0xf4>
}
 8007568:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fab5 	bl	8006adc <dfifo_device_init>

  usbd_spin_unlock(false);
 8007572:	2000      	movs	r0, #0
 8007574:	f7fe fcf8 	bl	8005f68 <usbd_spin_unlock>
}
 8007578:	bf00      	nop
 800757a:	3728      	adds	r7, #40	@ 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	08008cf4 	.word	0x08008cf4
 8007584:	20000960 	.word	0x20000960
 8007588:	200008a0 	.word	0x200008a0

0800758c <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	603a      	str	r2, [r7, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	4603      	mov	r3, r0
 8007598:	71fb      	strb	r3, [r7, #7]
 800759a:	460b      	mov	r3, r1
 800759c:	71bb      	strb	r3, [r7, #6]
 800759e:	4613      	mov	r3, r2
 80075a0:	80bb      	strh	r3, [r7, #4]
 80075a2:	79bb      	ldrb	r3, [r7, #6]
 80075a4:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ac:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80075ae:	75bb      	strb	r3, [r7, #22]
 80075b0:	79bb      	ldrb	r3, [r7, #6]
 80075b2:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	09db      	lsrs	r3, r3, #7
 80075b8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80075ba:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80075bc:	7dba      	ldrb	r2, [r7, #22]
 80075be:	7d7b      	ldrb	r3, [r7, #21]
 80075c0:	0052      	lsls	r2, r2, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	4a17      	ldr	r2, [pc, #92]	@ (8007624 <dcd_edpt_xfer+0x98>)
 80075c8:	4413      	add	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 80075cc:	2000      	movs	r0, #0
 80075ce:	f7fe fcb1 	bl	8005f34 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	895b      	ldrh	r3, [r3, #10]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]
 80075de:	e018      	b.n	8007612 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2200      	movs	r2, #0
 80075ea:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	88ba      	ldrh	r2, [r7, #4]
 80075f0:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 80075f2:	7dbb      	ldrb	r3, [r7, #22]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 80075f8:	7d7b      	ldrb	r3, [r7, #21]
 80075fa:	490b      	ldr	r1, [pc, #44]	@ (8007628 <dcd_edpt_xfer+0x9c>)
 80075fc:	88ba      	ldrh	r2, [r7, #4]
 80075fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 8007602:	7d7a      	ldrb	r2, [r7, #21]
 8007604:	7db9      	ldrb	r1, [r7, #22]
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff fc2b 	bl	8006e64 <edpt_schedule_packets>
    ret = true;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 8007612:	2000      	movs	r0, #0
 8007614:	f7fe fca8 	bl	8005f68 <usbd_spin_unlock>

  return ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	200008a0 	.word	0x200008a0
 8007628:	20000960 	.word	0x20000960

0800762c <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	460a      	mov	r2, r1
 8007636:	71fb      	strb	r3, [r7, #7]
 8007638:	4613      	mov	r3, r2
 800763a:	71bb      	strb	r3, [r7, #6]
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007640:	7cbb      	ldrb	r3, [r7, #18]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d901      	bls.n	800764a <dcd_edpt_stall+0x1e>
    rhport = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800764a:	7cbb      	ldrb	r3, [r7, #18]
 800764c:	4a11      	ldr	r2, [pc, #68]	@ (8007694 <dcd_edpt_stall+0x68>)
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	4413      	add	r3, r2
 8007652:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007654:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 8007656:	79b9      	ldrb	r1, [r7, #6]
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2201      	movs	r2, #1
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff fb35 	bl	8006ccc <edpt_disable>
 8007662:	79bb      	ldrb	r3, [r7, #6]
 8007664:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007666:	7cfb      	ldrb	r3, [r7, #19]
 8007668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800766c:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <dcd_edpt_stall+0x5e>
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800767a:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800767c:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff f90b 	bl	80068a0 <dma_setup_prepare>
  }
}
 800768a:	bf00      	nop
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	08008cf4 	.word	0x08008cf4

08007698 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	460a      	mov	r2, r1
 80076a2:	71fb      	strb	r3, [r7, #7]
 80076a4:	4613      	mov	r3, r2
 80076a6:	71bb      	strb	r3, [r7, #6]
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80076ac:	7a7b      	ldrb	r3, [r7, #9]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d901      	bls.n	80076b6 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80076b6:	7a7b      	ldrb	r3, [r7, #9]
 80076b8:	4a19      	ldr	r2, [pc, #100]	@ (8007720 <dcd_edpt_clear_stall+0x88>)
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	4413      	add	r3, r2
 80076be:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	79bb      	ldrb	r3, [r7, #6]
 80076c4:	72bb      	strb	r3, [r7, #10]
 80076c6:	7abb      	ldrb	r3, [r7, #10]
 80076c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076cc:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80076ce:	74fb      	strb	r3, [r7, #19]
 80076d0:	79bb      	ldrb	r3, [r7, #6]
 80076d2:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	09db      	lsrs	r3, r3, #7
 80076d8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80076da:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80076dc:	7cbb      	ldrb	r3, [r7, #18]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	bf14      	ite	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	2300      	moveq	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	7cfb      	ldrb	r3, [r7, #19]
 80076ec:	0112      	lsls	r2, r2, #4
 80076ee:	4413      	add	r3, r2
 80076f0:	3348      	adds	r3, #72	@ 0x48
 80076f2:	015b      	lsls	r3, r3, #5
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4413      	add	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	601a      	str	r2, [r3, #0]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	08008cf4 	.word	0x08008cf4

08007724 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b08e      	sub	sp, #56	@ 0x38
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	71fb      	strb	r3, [r7, #7]
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007738:	2b01      	cmp	r3, #1
 800773a:	d902      	bls.n	8007742 <handle_bus_reset+0x1e>
    rhport = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007746:	4a6a      	ldr	r2, [pc, #424]	@ (80078f0 <handle_bus_reset+0x1cc>)
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	4413      	add	r3, r2
 800774c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800774e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007758:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800775a:	7a7b      	ldrb	r3, [r7, #9]
 800775c:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8007760:	b2db      	uxtb	r3, r3
 8007762:	3301      	adds	r3, #1
 8007764:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 8007766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800776a:	22c0      	movs	r2, #192	@ 0xc0
 800776c:	2100      	movs	r1, #0
 800776e:	4861      	ldr	r0, [pc, #388]	@ (80078f4 <handle_bus_reset+0x1d0>)
 8007770:	f001 f94b 	bl	8008a0a <memset>

  _dcd_data.sof_en = false;
 8007774:	4b60      	ldr	r3, [pc, #384]	@ (80078f8 <handle_bus_reset+0x1d4>)
 8007776:	2200      	movs	r2, #0
 8007778:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800777a:	4b5f      	ldr	r3, [pc, #380]	@ (80078f8 <handle_bus_reset+0x1d4>)
 800777c:	2200      	movs	r2, #0
 800777e:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8007780:	2300      	movs	r3, #0
 8007782:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007786:	e014      	b.n	80077b2 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8007788:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800778c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778e:	3358      	adds	r3, #88	@ 0x58
 8007790:	015b      	lsls	r3, r3, #5
 8007792:	4413      	add	r3, r2
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800779a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800779e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077a0:	3358      	adds	r3, #88	@ 0x58
 80077a2:	015b      	lsls	r3, r3, #5
 80077a4:	440b      	add	r3, r1
 80077a6:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80077a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80077ac:	3301      	adds	r3, #1
 80077ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80077b2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80077b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d3e4      	bcc.n	8007788 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 80077be:	2300      	movs	r3, #0
 80077c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80077c4:	e01d      	b.n	8007802 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 80077c6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80077ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077cc:	3348      	adds	r3, #72	@ 0x48
 80077ce:	015b      	lsls	r3, r3, #5
 80077d0:	4413      	add	r3, r2
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da0f      	bge.n	80077f8 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 80077d8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80077dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077de:	3348      	adds	r3, #72	@ 0x48
 80077e0:	015b      	lsls	r3, r3, #5
 80077e2:	4413      	add	r3, r2
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80077ea:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 80077ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077f0:	3348      	adds	r3, #72	@ 0x48
 80077f2:	015b      	lsls	r3, r3, #5
 80077f4:	440b      	add	r3, r1
 80077f6:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80077f8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80077fc:	3301      	adds	r3, #1
 80077fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8007802:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8007806:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800780a:	429a      	cmp	r2, r3
 800780c:	d3db      	bcc.n	80077c6 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8007814:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	2209      	movs	r2, #9
 800781c:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	2209      	movs	r2, #9
 8007824:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	61bb      	str	r3, [r7, #24]
 800782c:	2310      	movs	r3, #16
 800782e:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	019b      	lsls	r3, r3, #6
 8007834:	f043 0220 	orr.w	r2, r3, #32
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800783c:	bf00      	nop
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f9      	bne.n	800783e <handle_bus_reset+0x11a>
}
 800784a:	bf00      	nop
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	2210      	movs	r2, #16
 8007854:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8007856:	bf00      	nop
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1f9      	bne.n	8007858 <handle_bus_reset+0x134>
}
 8007864:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff f937 	bl	8006adc <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8007874:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 8007876:	8a3b      	ldrh	r3, [r7, #16]
 8007878:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800787c:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800788c:	f023 0203 	bic.w	r2, r3, #3
 8007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007892:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800789c:	f023 0203 	bic.w	r2, r3, #3
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 80078a6:	4b13      	ldr	r3, [pc, #76]	@ (80078f4 <handle_bus_reset+0x1d0>)
 80078a8:	2240      	movs	r2, #64	@ 0x40
 80078aa:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 80078ac:	4b11      	ldr	r3, [pc, #68]	@ (80078f4 <handle_bus_reset+0x1d0>)
 80078ae:	2240      	movs	r2, #64	@ 0x40
 80078b0:	835a      	strh	r2, [r3, #26]
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ba:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80078bc:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe ffeb 	bl	80068a0 <dma_setup_prepare>
 80078ca:	e007      	b.n	80078dc <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 80078d2:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 80078e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e6:	619a      	str	r2, [r3, #24]
}
 80078e8:	bf00      	nop
 80078ea:	3738      	adds	r7, #56	@ 0x38
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	08008cf4 	.word	0x08008cf4
 80078f4:	200008a0 	.word	0x200008a0
 80078f8:	20000960 	.word	0x20000960

080078fc <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	@ 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	71fb      	strb	r3, [r7, #7]
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800790a:	7ffb      	ldrb	r3, [r7, #31]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d901      	bls.n	8007914 <handle_enum_done+0x18>
    rhport = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007914:	7ffb      	ldrb	r3, [r7, #31]
 8007916:	4a1b      	ldr	r2, [pc, #108]	@ (8007984 <handle_enum_done+0x88>)
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	4413      	add	r3, r2
 800791c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800791e:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8007926:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 8007928:	7e3b      	ldrb	r3, [r7, #24]
 800792a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <handle_enum_done+0x3e>
 8007934:	2b02      	cmp	r3, #2
 8007936:	d004      	beq.n	8007942 <handle_enum_done+0x46>
 8007938:	e007      	b.n	800794a <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800793a:	2302      	movs	r3, #2
 800793c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8007940:	e007      	b.n	8007952 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8007948:	e003      	b.n	8007952 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800794a:	2300      	movs	r3, #0
 800794c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8007950:	bf00      	nop
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	77bb      	strb	r3, [r7, #30]
 8007956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800795a:	777b      	strb	r3, [r7, #29]
 800795c:	2301      	movs	r3, #1
 800795e:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8007960:	7fbb      	ldrb	r3, [r7, #30]
 8007962:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 8007964:	2301      	movs	r3, #1
 8007966:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8007968:	7f7b      	ldrb	r3, [r7, #29]
 800796a:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800796c:	7f3a      	ldrb	r2, [r7, #28]
 800796e:	f107 030c 	add.w	r3, r7, #12
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe f80d 	bl	8005994 <dcd_event_handler>
}
 800797a:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800797c:	bf00      	nop
 800797e:	3728      	adds	r7, #40	@ 0x28
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	08008cf4 	.word	0x08008cf4

08007988 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b08c      	sub	sp, #48	@ 0x30
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	71fb      	strb	r3, [r7, #7]
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007996:	7cfb      	ldrb	r3, [r7, #19]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d901      	bls.n	80079a0 <handle_rxflvl_irq+0x18>
    rhport = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80079a0:	7cfb      	ldrb	r3, [r7, #19]
 80079a2:	4a49      	ldr	r2, [pc, #292]	@ (8007ac8 <handle_rxflvl_irq+0x140>)
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	4413      	add	r3, r2
 80079a8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80079aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 80079b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 80079ba:	7b3b      	ldrb	r3, [r7, #12]
 80079bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 80079c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079ca:	3358      	adds	r3, #88	@ 0x58
 80079cc:	015b      	lsls	r3, r3, #5
 80079ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079d0:	4413      	add	r3, r2
 80079d2:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	2b05      	cmp	r3, #5
 80079e0:	d86a      	bhi.n	8007ab8 <handle_rxflvl_irq+0x130>
 80079e2:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <handle_rxflvl_irq+0x60>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007ab9 	.word	0x08007ab9
 80079ec:	08007a27 	.word	0x08007a27
 80079f0:	08007ab9 	.word	0x08007ab9
 80079f4:	08007a19 	.word	0x08007a19
 80079f8:	08007ab9 	.word	0x08007ab9
 80079fc:	08007a01 	.word	0x08007a01
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8007a00:	4b32      	ldr	r3, [pc, #200]	@ (8007acc <handle_rxflvl_irq+0x144>)
 8007a02:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	601a      	str	r2, [r3, #0]
      break;
 8007a16:	e052      	b.n	8007abe <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	611a      	str	r2, [r3, #16]
      break;
 8007a24:	e04b      	b.n	8007abe <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 8007a26:	89bb      	ldrh	r3, [r7, #12]
 8007a28:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8007a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a34:	015b      	lsls	r3, r3, #5
 8007a36:	4a26      	ldr	r2, [pc, #152]	@ (8007ad0 <handle_rxflvl_irq+0x148>)
 8007a38:	4413      	add	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8007a3c:	8b7b      	ldrh	r3, [r7, #26]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d03c      	beq.n	8007abc <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	8b7a      	ldrh	r2, [r7, #26]
 8007a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fc fe74 	bl	8004740 <tu_fifo_write_n_const_addr_full_words>
 8007a58:	e00c      	b.n	8007a74 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	8b7a      	ldrh	r2, [r7, #26]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a64:	f000 fd98 	bl	8008598 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	8b7b      	ldrh	r3, [r7, #26]
 8007a6e:	441a      	add	r2, r3
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	895b      	ldrh	r3, [r3, #10]
 8007a78:	8b7a      	ldrh	r2, [r7, #26]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d21e      	bcs.n	8007abc <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	891a      	ldrh	r2, [r3, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8007a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10d      	bne.n	8007abc <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	891a      	ldrh	r2, [r3, #8]
 8007aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad4 <handle_rxflvl_irq+0x14c>)
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8007ab0:	4b08      	ldr	r3, [pc, #32]	@ (8007ad4 <handle_rxflvl_irq+0x14c>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8007ab6:	e001      	b.n	8007abc <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8007ab8:	bf00      	nop
 8007aba:	e000      	b.n	8007abe <handle_rxflvl_irq+0x136>
      break;
 8007abc:	bf00      	nop
  }
}
 8007abe:	bf00      	nop
 8007ac0:	3730      	adds	r7, #48	@ 0x30
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	08008cf4 	.word	0x08008cf4
 8007acc:	20000968 	.word	0x20000968
 8007ad0:	200008a0 	.word	0x200008a0
 8007ad4:	20000960 	.word	0x20000960

08007ad8 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08e      	sub	sp, #56	@ 0x38
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	603a      	str	r2, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8007ae8:	783b      	ldrb	r3, [r7, #0]
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d01c      	beq.n	8007b2e <handle_epout_slave+0x56>
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007afa:	4b34      	ldr	r3, [pc, #208]	@ (8007bcc <handle_epout_slave+0xf4>)
 8007afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8007b04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b08:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8007b0a:	2306      	movs	r3, #6
 8007b0c:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8007b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b10:	f107 0318 	add.w	r3, r7, #24
 8007b14:	6810      	ldr	r0, [r2, #0]
 8007b16:	6851      	ldr	r1, [r2, #4]
 8007b18:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8007b1a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8007b1e:	f107 0314 	add.w	r3, r7, #20
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fd ff35 	bl	8005994 <dcd_event_handler>
}
 8007b2a:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8007b2c:	e04a      	b.n	8007bc4 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8007b2e:	783b      	ldrb	r3, [r7, #0]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d044      	beq.n	8007bc4 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8007b3a:	783b      	ldrb	r3, [r7, #0]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d13e      	bne.n	8007bc4 <handle_epout_slave+0xec>
 8007b46:	787b      	ldrb	r3, [r7, #1]
 8007b48:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d138      	bne.n	8007bc4 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8007b52:	79bb      	ldrb	r3, [r7, #6]
 8007b54:	015b      	lsls	r3, r3, #5
 8007b56:	4a1e      	ldr	r2, [pc, #120]	@ (8007bd0 <handle_epout_slave+0xf8>)
 8007b58:	4413      	add	r3, r2
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8007b5c:	79bb      	ldrb	r3, [r7, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <handle_epout_slave+0xa0>
 8007b62:	4b1c      	ldr	r3, [pc, #112]	@ (8007bd4 <handle_epout_slave+0xfc>)
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8007b6a:	79b9      	ldrb	r1, [r7, #6]
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff f977 	bl	8006e64 <edpt_schedule_packets>
 8007b76:	e025      	b.n	8007bc4 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	891b      	ldrh	r3, [r3, #8]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b84:	79bb      	ldrb	r3, [r7, #6]
 8007b86:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8007b8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8007b98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b9c:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8007b9e:	2307      	movs	r3, #7
 8007ba0:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8007ba2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007ba6:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8007bac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bb0:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8007bb2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8007bb6:	f107 0308 	add.w	r3, r7, #8
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fd fee9 	bl	8005994 <dcd_event_handler>
}
 8007bc2:	bf00      	nop
      }
    }
  }
}
 8007bc4:	3738      	adds	r7, #56	@ 0x38
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000968 	.word	0x20000968
 8007bd0:	200008a0 	.word	0x200008a0
 8007bd4:	20000960 	.word	0x20000960

08007bd8 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b092      	sub	sp, #72	@ 0x48
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	603a      	str	r2, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
 8007be4:	460b      	mov	r3, r1
 8007be6:	71bb      	strb	r3, [r7, #6]
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007bee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d902      	bls.n	8007bfc <handle_epin_slave+0x24>
    rhport = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007bfc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c00:	4a64      	ldr	r2, [pc, #400]	@ (8007d94 <handle_epin_slave+0x1bc>)
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	4413      	add	r3, r2
 8007c06:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007c08:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 8007c0a:	79bb      	ldrb	r3, [r7, #6]
 8007c0c:	3348      	adds	r3, #72	@ 0x48
 8007c0e:	015b      	lsls	r3, r3, #5
 8007c10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c12:	4413      	add	r3, r2
 8007c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8007c16:	79bb      	ldrb	r3, [r7, #6]
 8007c18:	015b      	lsls	r3, r3, #5
 8007c1a:	3310      	adds	r3, #16
 8007c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8007d98 <handle_epin_slave+0x1c0>)
 8007c1e:	4413      	add	r3, r2
 8007c20:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 8007c22:	783b      	ldrb	r3, [r7, #0]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d037      	beq.n	8007c9e <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8007c2e:	79bb      	ldrb	r3, [r7, #6]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <handle_epin_slave+0x72>
 8007c34:	4b59      	ldr	r3, [pc, #356]	@ (8007d9c <handle_epin_slave+0x1c4>)
 8007c36:	885b      	ldrh	r3, [r3, #2]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8007c3c:	79b9      	ldrb	r1, [r7, #6]
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	2201      	movs	r2, #1
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff f90e 	bl	8006e64 <edpt_schedule_packets>
 8007c48:	e029      	b.n	8007c9e <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007c4a:	79bb      	ldrb	r3, [r7, #6]
 8007c4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c50:	b2d9      	uxtb	r1, r3
 8007c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c54:	891b      	ldrh	r3, [r3, #8]
 8007c56:	461a      	mov	r2, r3
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c5e:	460b      	mov	r3, r1
 8007c60:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8007c64:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c66:	2300      	movs	r3, #0
 8007c68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 8007c72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c76:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8007c78:	2307      	movs	r3, #7
 8007c7a:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8007c7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007c80:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8007c86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c8a:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8007c8c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8007c90:	f107 0310 	add.w	r3, r7, #16
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd fe7c 	bl	8005994 <dcd_event_handler>
}
 8007c9c:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8007c9e:	783b      	ldrb	r3, [r7, #0]
 8007ca0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d070      	beq.n	8007d8c <handle_epin_slave+0x1b4>
 8007caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cac:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8007cb0:	79ba      	ldrb	r2, [r7, #6]
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d066      	beq.n	8007d8c <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 8007cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 8007cc4:	89fb      	ldrh	r3, [r7, #14]
 8007cc6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007cd4:	e03f      	b.n	8007d56 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 8007cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ce2:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	895a      	ldrh	r2, [r3, #10]
 8007ce8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007cea:	843b      	strh	r3, [r7, #32]
 8007cec:	4613      	mov	r3, r2
 8007cee:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007cf0:	8c3a      	ldrh	r2, [r7, #32]
 8007cf2:	8bfb      	ldrh	r3, [r7, #30]
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	bf28      	it	cs
 8007cf8:	4613      	movcs	r3, r2
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8007cfe:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8007d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	0099      	lsls	r1, r3, #2
 8007d06:	4b26      	ldr	r3, [pc, #152]	@ (8007da0 <handle_epin_slave+0x1c8>)
 8007d08:	400b      	ands	r3, r1
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d829      	bhi.n	8007d62 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8007d16:	79bb      	ldrb	r3, [r7, #6]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	031b      	lsls	r3, r3, #12
 8007d1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d1e:	4413      	add	r3, r2
 8007d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8007d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8007d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fc fca1 	bl	8004672 <tu_fifo_read_n_const_addr_full_words>
 8007d30:	e00c      	b.n	8007d4c <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d38:	79b9      	ldrb	r1, [r7, #6]
 8007d3a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007d3c:	f000 fc7d 	bl	800863a <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d46:	441a      	add	r2, r3
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8007d4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007d50:	3301      	adds	r3, #1
 8007d52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007d56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007d5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d3ba      	bcc.n	8007cd6 <handle_epin_slave+0xfe>
 8007d60:	e000      	b.n	8007d64 <handle_epin_slave+0x18c>
        break;
 8007d62:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 8007d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 8007d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d76:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8007d7a:	79ba      	ldrb	r2, [r7, #6]
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d82:	43d2      	mvns	r2, r2
 8007d84:	401a      	ands	r2, r3
 8007d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d88:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	3748      	adds	r7, #72	@ 0x48
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	08008cf4 	.word	0x08008cf4
 8007d98:	200008a0 	.word	0x200008a0
 8007d9c:	20000960 	.word	0x20000960
 8007da0:	0003fffc 	.word	0x0003fffc

08007da4 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08e      	sub	sp, #56	@ 0x38
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	460a      	mov	r2, r1
 8007dae:	71fb      	strb	r3, [r7, #7]
 8007db0:	4613      	mov	r3, r2
 8007db2:	71bb      	strb	r3, [r7, #6]
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007db8:	7efb      	ldrb	r3, [r7, #27]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d901      	bls.n	8007dc2 <handle_ep_irq+0x1e>
    rhport = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007dc2:	7efb      	ldrb	r3, [r7, #27]
 8007dc4:	4a38      	ldr	r2, [pc, #224]	@ (8007ea8 <handle_ep_irq+0x104>)
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	4413      	add	r3, r2
 8007dca:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd6:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007dd8:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8007dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de6:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 8007de8:	7c7b      	ldrb	r3, [r7, #17]
 8007dea:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	3301      	adds	r3, #1
 8007df2:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 8007df4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8007df8:	79bb      	ldrb	r3, [r7, #6]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d101      	bne.n	8007e02 <handle_ep_irq+0x5e>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e000      	b.n	8007e04 <handle_ep_irq+0x60>
 8007e02:	2310      	movs	r3, #16
 8007e04:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8007e08:	79bb      	ldrb	r3, [r7, #6]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	bf14      	ite	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	2300      	moveq	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	025b      	lsls	r3, r3, #9
 8007e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e1c:	4413      	add	r3, r2
 8007e1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007e26:	e034      	b.n	8007e92 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8007e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8007e2e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8007e32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e36:	440b      	add	r3, r1
 8007e38:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d021      	beq.n	8007e88 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 8007e44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e48:	015b      	lsls	r3, r3, #5
 8007e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e4c:	4413      	add	r3, r2
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 8007e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d111      	bne.n	8007e88 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 8007e64:	79bb      	ldrb	r3, [r7, #6]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d107      	bne.n	8007e7a <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 8007e6a:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff feb0 	bl	8007bd8 <handle_epin_slave>
 8007e78:	e006      	b.n	8007e88 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 8007e7a:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff fe28 	bl	8007ad8 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8007e88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007e92:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8007e96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d3c4      	bcc.n	8007e28 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	3738      	adds	r7, #56	@ 0x38
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	08008cf4 	.word	0x08008cf4

08007eac <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b098      	sub	sp, #96	@ 0x60
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007ebc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d902      	bls.n	8007eca <dcd_int_handler+0x1e>
    rhport = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007eca:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007ece:	4a8c      	ldr	r2, [pc, #560]	@ (8008100 <dcd_int_handler+0x254>)
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	4413      	add	r3, r2
 8007ed4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 8007ed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8007ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8007ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00d      	beq.n	8007f0e <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8007ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ef4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007ef8:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 8007efa:	2001      	movs	r0, #1
 8007efc:	f7fe f81a 	bl	8005f34 <usbd_spin_lock>
    handle_bus_reset(rhport);
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fc0e 	bl	8007724 <handle_bus_reset>
    usbd_spin_unlock(true);
 8007f08:	2001      	movs	r0, #1
 8007f0a:	f7fe f82d 	bl	8005f68 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 8007f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00d      	beq.n	8007f34 <dcd_int_handler+0x88>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8007f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007f1e:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_USBSUSPM;
 8007f20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8007f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f2a:	619a      	str	r2, [r3, #24]
    handle_enum_done(rhport);
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff fce4 	bl	80078fc <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8007f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d023      	beq.n	8007f86 <dcd_int_handler+0xda>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8007f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f44:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk &= ~GINTMSK_USBSUSPM;
 8007f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f50:	619a      	str	r2, [r3, #24]
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8007f58:	2304      	movs	r3, #4
 8007f5a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 8007f64:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007f68:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 8007f6c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8007f70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8007f74:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8007f78:	f107 0320 	add.w	r3, r7, #32
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fd fd08 	bl	8005994 <dcd_event_handler>
}
 8007f84:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 8007f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	da23      	bge.n	8007fd4 <dcd_int_handler+0x128>
    dwc2->gintsts = GINTSTS_WKUINT;
 8007f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f92:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_USBSUSPM;
 8007f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8007f9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f9e:	619a      	str	r2, [r3, #24]
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007fa6:	2305      	movs	r3, #5
 8007fa8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 8007fb2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007fb6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8007fba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007fbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8007fc2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fd fce1 	bl	8005994 <dcd_event_handler>
}
 8007fd2:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 8007fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d022      	beq.n	8008024 <dcd_int_handler+0x178>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 8007fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 8007fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d017      	beq.n	800801e <dcd_int_handler+0x172>
 8007fee:	79fb      	ldrb	r3, [r7, #7]
 8007ff0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 8008000:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008004:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 8008006:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800800a:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800800c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8008010:	f107 0314 	add.w	r3, r7, #20
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7fd fcbc 	bl	8005994 <dcd_event_handler>
}
 800801c:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800801e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008020:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008022:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 8008024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d034      	beq.n	8008098 <dcd_int_handler+0x1ec>
    dwc2->gintsts = GINTSTS_SOF;
 800802e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008030:	2208      	movs	r2, #8
 8008032:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_USBSUSPM;
 8008034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800803c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800803e:	619a      	str	r2, [r3, #24]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 8008040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008042:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800804c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800804e:	4b2d      	ldr	r3, [pc, #180]	@ (8008104 <dcd_int_handler+0x258>)
 8008050:	79db      	ldrb	r3, [r3, #7]
 8008052:	f083 0301 	eor.w	r3, r3, #1
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <dcd_int_handler+0x1bc>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800805c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f023 0208 	bic.w	r2, r3, #8
 8008064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008066:	619a      	str	r2, [r3, #24]
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800806e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008072:	2301      	movs	r3, #1
 8008074:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008078:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800807c:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800807e:	2303      	movs	r3, #3
 8008080:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8008082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008084:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8008086:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f7fd fc7f 	bl	8005994 <dcd_event_handler>
}
 8008096:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 8008098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d015      	beq.n	80080ce <dcd_int_handler+0x222>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 80080a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f023 0210 	bic.w	r2, r3, #16
 80080aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080ac:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fc69 	bl	8007988 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 80080b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1f5      	bne.n	80080ae <dcd_int_handler+0x202>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 80080c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f043 0210 	orr.w	r2, r3, #16
 80080ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080cc:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 80080ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d004      	beq.n	80080e2 <dcd_int_handler+0x236>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	2100      	movs	r1, #0
 80080dc:	4618      	mov	r0, r3
 80080de:	f7ff fe61 	bl	8007da4 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 80080e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <dcd_int_handler+0x24a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	2101      	movs	r1, #1
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fe57 	bl	8007da4 <handle_ep_irq>
  }
}
 80080f6:	bf00      	nop
 80080f8:	3760      	adds	r7, #96	@ 0x60
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	08008cf4 	.word	0x08008cf4
 8008104:	20000960 	.word	0x20000960

08008108 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d110      	bne.n	800813c <dwc2_phy_init+0x34>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a0a      	ldr	r2, [pc, #40]	@ (8008154 <dwc2_phy_init+0x4c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d10c      	bne.n	8008148 <dwc2_phy_init+0x40>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_OTGHSULPILPEN;
 800812e:	4b0a      	ldr	r3, [pc, #40]	@ (8008158 <dwc2_phy_init+0x50>)
 8008130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008132:	4a09      	ldr	r2, [pc, #36]	@ (8008158 <dwc2_phy_init+0x50>)
 8008134:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008138:	6513      	str	r3, [r2, #80]	@ 0x50
      #else

      #endif
    }
  }
}
 800813a:	e005      	b.n	8008148 <dwc2_phy_init+0x40>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008140:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	40040000 	.word	0x40040000
 8008158:	40023800 	.word	0x40023800

0800815c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d152      	bne.n	8008214 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800816e:	4b2c      	ldr	r3, [pc, #176]	@ (8008220 <dwc2_phy_update+0xc4>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a2c      	ldr	r2, [pc, #176]	@ (8008224 <dwc2_phy_update+0xc8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d302      	bcc.n	800817e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8008178:	2306      	movs	r3, #6
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e041      	b.n	8008202 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800817e:	4b28      	ldr	r3, [pc, #160]	@ (8008220 <dwc2_phy_update+0xc4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a29      	ldr	r2, [pc, #164]	@ (8008228 <dwc2_phy_update+0xcc>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d902      	bls.n	800818e <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8008188:	2307      	movs	r3, #7
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	e039      	b.n	8008202 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800818e:	4b24      	ldr	r3, [pc, #144]	@ (8008220 <dwc2_phy_update+0xc4>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a26      	ldr	r2, [pc, #152]	@ (800822c <dwc2_phy_update+0xd0>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d302      	bcc.n	800819e <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8008198:	2308      	movs	r3, #8
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	e031      	b.n	8008202 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800819e:	4b20      	ldr	r3, [pc, #128]	@ (8008220 <dwc2_phy_update+0xc4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a23      	ldr	r2, [pc, #140]	@ (8008230 <dwc2_phy_update+0xd4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d902      	bls.n	80081ae <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 80081a8:	2309      	movs	r3, #9
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	e029      	b.n	8008202 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 80081ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008220 <dwc2_phy_update+0xc4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a20      	ldr	r2, [pc, #128]	@ (8008234 <dwc2_phy_update+0xd8>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d902      	bls.n	80081be <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 80081b8:	230a      	movs	r3, #10
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	e021      	b.n	8008202 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 80081be:	4b18      	ldr	r3, [pc, #96]	@ (8008220 <dwc2_phy_update+0xc4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008238 <dwc2_phy_update+0xdc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d902      	bls.n	80081ce <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 80081c8:	230b      	movs	r3, #11
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e019      	b.n	8008202 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 80081ce:	4b14      	ldr	r3, [pc, #80]	@ (8008220 <dwc2_phy_update+0xc4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1a      	ldr	r2, [pc, #104]	@ (800823c <dwc2_phy_update+0xe0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d302      	bcc.n	80081de <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 80081d8:	230c      	movs	r3, #12
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	e011      	b.n	8008202 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 80081de:	4b10      	ldr	r3, [pc, #64]	@ (8008220 <dwc2_phy_update+0xc4>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a17      	ldr	r2, [pc, #92]	@ (8008240 <dwc2_phy_update+0xe4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d302      	bcc.n	80081ee <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 80081e8:	230d      	movs	r3, #13
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	e009      	b.n	8008202 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 80081ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <dwc2_phy_update+0xc4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a14      	ldr	r2, [pc, #80]	@ (8008244 <dwc2_phy_update+0xe8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d302      	bcc.n	80081fe <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 80081f8:	230e      	movs	r3, #14
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e001      	b.n	8008202 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 80081fe:	230f      	movs	r3, #15
 8008200:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	029b      	lsls	r3, r3, #10
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	60da      	str	r2, [r3, #12]
  }
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	20000044 	.word	0x20000044
 8008224:	01e84800 	.word	0x01e84800
 8008228:	01a39ddf 	.word	0x01a39ddf
 800822c:	016e3600 	.word	0x016e3600
 8008230:	014ca43f 	.word	0x014ca43f
 8008234:	01312cff 	.word	0x01312cff
 8008238:	011a499f 	.word	0x011a499f
 800823c:	01067380 	.word	0x01067380
 8008240:	00f42400 	.word	0x00f42400
 8008244:	00e4e1c0 	.word	0x00e4e1c0

08008248 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	f043 0201 	orr.w	r2, r3, #1
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008260:	b29b      	uxth	r3, r3
 8008262:	f244 2209 	movw	r2, #16905	@ 0x4209
 8008266:	4293      	cmp	r3, r2
 8008268:	d807      	bhi.n	800827a <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800826a:	bf00      	nop
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1f9      	bne.n	800826c <reset_core+0x24>
 8008278:	e010      	b.n	800829c <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800827a:	bf00      	nop
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0f9      	beq.n	800827c <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800829c:	bf00      	nop
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dafb      	bge.n	800829e <reset_core+0x56>
}
 80082a6:	bf00      	nop
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082c8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 80082d0:	2100      	movs	r1, #0
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff ff18 	bl	8008108 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff ffb5 	bl	8008248 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80082e4:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80082ec:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 80082f4:	2100      	movs	r1, #0
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff ff30 	bl	800815c <dwc2_phy_update>
}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008316:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800831c:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008324:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8008326:	7c3b      	ldrb	r3, [r7, #16]
 8008328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b80      	cmp	r3, #128	@ 0x80
 8008330:	d114      	bne.n	800835c <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f043 0310 	orr.w	r3, r3, #16
 8008338:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f023 0308 	bic.w	r3, r3, #8
 8008340:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008348:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008350:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	e012      	b.n	8008382 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f023 0310 	bic.w	r3, r3, #16
 8008362:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 8008364:	7b7b      	ldrb	r3, [r7, #13]
 8008366:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <phy_hs_init+0x76>
      #if CFG_TUSB_MCU != OPT_MCU_AT32F402_405 // at32f402_405 does not actually support 16-bit
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f043 0308 	orr.w	r3, r3, #8
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e003      	b.n	8008382 <phy_hs_init+0x7e>
      #endif
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f023 0308 	bic.w	r3, r3, #8
 8008380:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 8008388:	7c3b      	ldrb	r3, [r7, #16]
 800838a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800838e:	b2db      	uxtb	r3, r3
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff feb8 	bl	8008108 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7ff ff55 	bl	8008248 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80083a4:	617b      	str	r3, [r7, #20]

#if CFG_TUSB_MCU == OPT_MCU_AT32F402_405 // at32f402_405 does not actually support 16-bit
  gusbcfg |= 9u << GUSBCFG_TRDT_Pos;
#else
  gusbcfg |= (dwc2->ghwcfg4_bm.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083aa:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <phy_hs_init+0xb6>
 80083b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80083b8:	e001      	b.n	80083be <phy_hs_init+0xba>
 80083ba:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]
#endif

  dwc2->gusbcfg = gusbcfg;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 80083ca:	7c3b      	ldrb	r3, [r7, #16]
 80083cc:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff fec1 	bl	800815c <dwc2_phy_update>
}
 80083da:	bf00      	nop
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f0:	0c1b      	lsrs	r3, r3, #16
 80083f2:	041b      	lsls	r3, r3, #16
 80083f4:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008434 <check_dwc2+0x50>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d012      	beq.n	8008424 <check_dwc2+0x40>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4a0d      	ldr	r2, [pc, #52]	@ (8008438 <check_dwc2+0x54>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00e      	beq.n	8008424 <check_dwc2+0x40>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4a0c      	ldr	r2, [pc, #48]	@ (800843c <check_dwc2+0x58>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00a      	beq.n	8008424 <check_dwc2+0x40>
 800840e:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <check_dwc2+0x5c>)
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d000      	beq.n	8008420 <check_dwc2+0x3c>
 800841e:	be00      	bkpt	0x0000
 8008420:	2300      	movs	r3, #0
 8008422:	e000      	b.n	8008426 <check_dwc2+0x42>
#endif

  return true;
 8008424:	2301      	movs	r3, #1
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	4f540000 	.word	0x4f540000
 8008438:	55310000 	.word	0x55310000
 800843c:	55320000 	.word	0x55320000
 8008440:	e000edf0 	.word	0xe000edf0

08008444 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d101      	bne.n	800845a <dwc2_core_is_highspeed+0x16>
    return false;
 8008456:	2300      	movs	r3, #0
 8008458:	e00b      	b.n	8008472 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800845e:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 8008460:	7b3b      	ldrb	r3, [r7, #12]
 8008462:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	bf14      	ite	ne
 800846c:	2301      	movne	r3, #1
 800846e:	2300      	moveq	r3, #0
 8008470:	b2db      	uxtb	r3, r3
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
	...

08008480 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	71fb      	strb	r3, [r7, #7]
 800848a:	460b      	mov	r3, r1
 800848c:	71bb      	strb	r3, [r7, #6]
 800848e:	4613      	mov	r3, r2
 8008490:	717b      	strb	r3, [r7, #5]
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d901      	bls.n	80084a0 <dwc2_core_init+0x20>
    rhport = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	4a3b      	ldr	r2, [pc, #236]	@ (8008590 <dwc2_core_init+0x110>)
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	4413      	add	r3, r2
 80084a8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80084aa:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 80084ac:	69f8      	ldr	r0, [r7, #28]
 80084ae:	f7ff ff99 	bl	80083e4 <check_dwc2>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f083 0301 	eor.w	r3, r3, #1
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <dwc2_core_init+0x54>
 80084be:	4b35      	ldr	r3, [pc, #212]	@ (8008594 <dwc2_core_init+0x114>)
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d000      	beq.n	80084d0 <dwc2_core_init+0x50>
 80084ce:	be00      	bkpt	0x0000
 80084d0:	2300      	movs	r3, #0
 80084d2:	e058      	b.n	8008586 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f023 0201 	bic.w	r2, r3, #1
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 80084e0:	79bb      	ldrb	r3, [r7, #6]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 80084e6:	69f8      	ldr	r0, [r7, #28]
 80084e8:	f7ff ff0c 	bl	8008304 <phy_hs_init>
 80084ec:	e002      	b.n	80084f4 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 80084ee:	69f8      	ldr	r0, [r7, #28]
 80084f0:	f7ff fee0 	bl	80082b4 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f043 0207 	orr.w	r2, r3, #7
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8008506:	f023 020f 	bic.w	r2, r3, #15
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	2310      	movs	r3, #16
 8008516:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	019b      	lsls	r3, r3, #6
 800851c:	f043 0220 	orr.w	r2, r3, #32
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008524:	bf00      	nop
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f9      	bne.n	8008526 <dwc2_core_init+0xa6>
}
 8008532:	bf00      	nop
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2210      	movs	r2, #16
 800853c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800853e:	bf00      	nop
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f9      	bne.n	8008540 <dwc2_core_init+0xc0>
}
 800854c:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f04f 32ff 	mov.w	r2, #4294967295
 8008554:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	f04f 32ff 	mov.w	r2, #4294967295
 800855c:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	2200      	movs	r2, #0
 8008562:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 8008564:	797b      	ldrb	r3, [r7, #5]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d006      	beq.n	8008578 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	609a      	str	r2, [r3, #8]
 8008576:	e005      	b.n	8008584 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f043 0210 	orr.w	r2, r3, #16
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	619a      	str	r2, [r3, #24]
  }

  return true;
 8008584:	2301      	movs	r3, #1
}
 8008586:	4618      	mov	r0, r3
 8008588:	3720      	adds	r7, #32
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	08008d14 	.word	0x08008d14
 8008594:	e000edf0 	.word	0xe000edf0

08008598 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 8008598:	b480      	push	{r7}
 800859a:	b08f      	sub	sp, #60	@ 0x3c
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ac:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	089b      	lsrs	r3, r3, #2
 80085b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 80085b4:	e00b      	b.n	80085ce <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80085be:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	6a3a      	ldr	r2, [r7, #32]
 80085c4:	601a      	str	r2, [r3, #0]
}
 80085c6:	bf00      	nop
    dst += 4;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3304      	adds	r3, #4
 80085cc:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 80085ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80085d0:	1e5a      	subs	r2, r3, #1
 80085d2:	86fa      	strh	r2, [r7, #54]	@ 0x36
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1ee      	bne.n	80085b6 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 80085d8:	88fb      	ldrh	r3, [r7, #6]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 80085e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d020      	beq.n	800862e <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 80085ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f4:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 80085fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008602:	2b01      	cmp	r3, #1
 8008604:	d907      	bls.n	8008616 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	3301      	adds	r3, #1
 800860a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800860c:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	0a12      	lsrs	r2, r2, #8
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 8008616:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800861a:	2b02      	cmp	r3, #2
 800861c:	d907      	bls.n	800862e <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	3302      	adds	r3, #2
 8008622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008624:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	0c12      	lsrs	r2, r2, #16
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800862e:	bf00      	nop
 8008630:	373c      	adds	r7, #60	@ 0x3c
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800863a:	b480      	push	{r7}
 800863c:	b08b      	sub	sp, #44	@ 0x2c
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	461a      	mov	r2, r3
 8008646:	460b      	mov	r3, r1
 8008648:	72fb      	strb	r3, [r7, #11]
 800864a:	4613      	mov	r3, r2
 800864c:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	3301      	adds	r3, #1
 8008652:	031b      	lsls	r3, r3, #12
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800865a:	893b      	ldrh	r3, [r7, #8]
 800865c:	089b      	lsrs	r3, r3, #2
 800865e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 8008660:	e008      	b.n	8008674 <dfifo_write_packet+0x3a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	601a      	str	r2, [r3, #0]
    src += 4;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3304      	adds	r3, #4
 8008672:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 8008674:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008676:	1e5a      	subs	r2, r3, #1
 8008678:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f1      	bne.n	8008662 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800867e:	893b      	ldrh	r3, [r7, #8]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 8008688:	7efb      	ldrb	r3, [r7, #27]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d019      	beq.n	80086c2 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 8008694:	7efb      	ldrb	r3, [r7, #27]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d906      	bls.n	80086a8 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3301      	adds	r3, #1
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	021b      	lsls	r3, r3, #8
 80086a2:	6a3a      	ldr	r2, [r7, #32]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 80086a8:	7efb      	ldrb	r3, [r7, #27]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d906      	bls.n	80086bc <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3302      	adds	r3, #2
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	041b      	lsls	r3, r3, #16
 80086b6:	6a3a      	ldr	r2, [r7, #32]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	6a3a      	ldr	r2, [r7, #32]
 80086c0:	601a      	str	r2, [r3, #0]
  }
}
 80086c2:	bf00      	nop
 80086c4:	372c      	adds	r7, #44	@ 0x2c
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	6039      	str	r1, [r7, #0]
 80086da:	71fb      	strb	r3, [r7, #7]
    return true;
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d803      	bhi.n	80086ea <tusb_rhport_init+0x1a>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <tusb_rhport_init+0x30>
 80086ea:	4b17      	ldr	r3, [pc, #92]	@ (8008748 <tusb_rhport_init+0x78>)
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d000      	beq.n	80086fc <tusb_rhport_init+0x2c>
 80086fa:	be00      	bkpt	0x0000
 80086fc:	2300      	movs	r3, #0
 80086fe:	e01f      	b.n	8008740 <tusb_rhport_init+0x70>
  _tusb_rhport_role[rhport] = rh_init->role;
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	7811      	ldrb	r1, [r2, #0]
 8008706:	4a11      	ldr	r2, [pc, #68]	@ (800874c <tusb_rhport_init+0x7c>)
 8008708:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d115      	bne.n	800873e <tusb_rhport_init+0x6e>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f7fc f910 	bl	800493c <tud_rhport_init>
 800871c:	4603      	mov	r3, r0
 800871e:	f083 0301 	eor.w	r3, r3, #1
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <tusb_rhport_init+0x6e>
 8008728:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <tusb_rhport_init+0x78>)
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d000      	beq.n	800873a <tusb_rhport_init+0x6a>
 8008738:	be00      	bkpt	0x0000
 800873a:	2300      	movs	r3, #0
 800873c:	e000      	b.n	8008740 <tusb_rhport_init+0x70>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800873e:	2301      	movs	r3, #1
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	e000edf0 	.word	0xe000edf0
 800874c:	20000970 	.word	0x20000970

08008750 <tusb_int_handler>:
  #endif

  return ret;
}

void tusb_int_handler(uint8_t rhport, bool in_isr) {
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	460a      	mov	r2, r1
 800875a:	71fb      	strb	r3, [r7, #7]
 800875c:	4613      	mov	r3, r2
 800875e:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(rhport < TUP_USBIP_CONTROLLER_NUM,);
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d808      	bhi.n	8008778 <tusb_int_handler+0x28>

  #if CFG_TUD_ENABLED
  if (_tusb_rhport_role[rhport] == TUSB_ROLE_DEVICE) {
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	4a05      	ldr	r2, [pc, #20]	@ (8008780 <tusb_int_handler+0x30>)
 800876a:	5cd3      	ldrb	r3, [r2, r3]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d103      	bne.n	8008778 <tusb_int_handler+0x28>
    (void) in_isr;
    dcd_int_handler(rhport);
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff fb9a 	bl	8007eac <dcd_int_handler>
  #if CFG_TUH_ENABLED
  if (_tusb_rhport_role[rhport] == TUSB_ROLE_HOST) {
    hcd_int_handler(rhport, in_isr);
  }
  #endif
}
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000970 	.word	0x20000970

08008784 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <tu_edpt_claim+0x26>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <tu_edpt_claim+0x2a>
 80087aa:	2300      	movs	r3, #0
 80087ac:	e01e      	b.n	80087ec <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d108      	bne.n	80087ce <tu_edpt_claim+0x4a>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <tu_edpt_claim+0x4a>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <tu_edpt_claim+0x4c>
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	73fb      	strb	r3, [r7, #15]
  if (available) {
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d004      	beq.n	80087ea <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	7813      	ldrb	r3, [r2, #0]
 80087e4:	f043 0304 	orr.w	r3, r3, #4
 80087e8:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d108      	bne.n	8008822 <tu_edpt_release+0x2a>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <tu_edpt_release+0x2a>
 800881e:	2301      	movs	r3, #1
 8008820:	e000      	b.n	8008824 <tu_edpt_release+0x2c>
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7813      	ldrb	r3, [r2, #0]
 8008838:	f023 0304 	bic.w	r3, r3, #4
 800883c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800884c:	b480      	push	{r7}
 800884e:	b08b      	sub	sp, #44	@ 0x2c
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
 8008858:	4613      	mov	r3, r2
 800885a:	70bb      	strb	r3, [r7, #2]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	889b      	ldrh	r3, [r3, #4]
 8008864:	b29b      	uxth	r3, r3
 8008866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800886a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800886c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	78db      	ldrb	r3, [r3, #3]
 8008872:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b03      	cmp	r3, #3
 800887a:	d059      	beq.n	8008930 <tu_edpt_validate+0xe4>
 800887c:	2b03      	cmp	r3, #3
 800887e:	dc6e      	bgt.n	800895e <tu_edpt_validate+0x112>
 8008880:	2b01      	cmp	r3, #1
 8008882:	d002      	beq.n	800888a <tu_edpt_validate+0x3e>
 8008884:	2b02      	cmp	r3, #2
 8008886:	d018      	beq.n	80088ba <tu_edpt_validate+0x6e>
 8008888:	e069      	b.n	800895e <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800888a:	78fb      	ldrb	r3, [r7, #3]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d102      	bne.n	8008896 <tu_edpt_validate+0x4a>
 8008890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008894:	e001      	b.n	800889a <tu_edpt_validate+0x4e>
 8008896:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800889a:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800889c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800889e:	8a7b      	ldrh	r3, [r7, #18]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d95e      	bls.n	8008962 <tu_edpt_validate+0x116>
 80088a4:	4b35      	ldr	r3, [pc, #212]	@ (800897c <tu_edpt_validate+0x130>)
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d000      	beq.n	80088b6 <tu_edpt_validate+0x6a>
 80088b4:	be00      	bkpt	0x0000
 80088b6:	2300      	movs	r3, #0
 80088b8:	e059      	b.n	800896e <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d10e      	bne.n	80088de <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 80088c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c6:	d04e      	beq.n	8008966 <tu_edpt_validate+0x11a>
 80088c8:	4b2c      	ldr	r3, [pc, #176]	@ (800897c <tu_edpt_validate+0x130>)
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d000      	beq.n	80088da <tu_edpt_validate+0x8e>
 80088d8:	be00      	bkpt	0x0000
 80088da:	2300      	movs	r3, #0
 80088dc:	e047      	b.n	800896e <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 80088de:	78bb      	ldrb	r3, [r7, #2]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00e      	beq.n	8008902 <tu_edpt_validate+0xb6>
 80088e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ea:	d10a      	bne.n	8008902 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088f8:	711a      	strb	r2, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 80088fe:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 8008900:	e031      	b.n	8008966 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 8008902:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008904:	2b08      	cmp	r3, #8
 8008906:	d02e      	beq.n	8008966 <tu_edpt_validate+0x11a>
 8008908:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800890a:	2b10      	cmp	r3, #16
 800890c:	d02b      	beq.n	8008966 <tu_edpt_validate+0x11a>
 800890e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008910:	2b20      	cmp	r3, #32
 8008912:	d028      	beq.n	8008966 <tu_edpt_validate+0x11a>
 8008914:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008916:	2b40      	cmp	r3, #64	@ 0x40
 8008918:	d025      	beq.n	8008966 <tu_edpt_validate+0x11a>
 800891a:	4b18      	ldr	r3, [pc, #96]	@ (800897c <tu_edpt_validate+0x130>)
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d000      	beq.n	800892c <tu_edpt_validate+0xe0>
 800892a:	be00      	bkpt	0x0000
 800892c:	2300      	movs	r3, #0
 800892e:	e01e      	b.n	800896e <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d102      	bne.n	800893c <tu_edpt_validate+0xf0>
 8008936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800893a:	e000      	b.n	800893e <tu_edpt_validate+0xf2>
 800893c:	2340      	movs	r3, #64	@ 0x40
 800893e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8008940:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008944:	429a      	cmp	r2, r3
 8008946:	d910      	bls.n	800896a <tu_edpt_validate+0x11e>
 8008948:	4b0c      	ldr	r3, [pc, #48]	@ (800897c <tu_edpt_validate+0x130>)
 800894a:	623b      	str	r3, [r7, #32]
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d000      	beq.n	800895a <tu_edpt_validate+0x10e>
 8008958:	be00      	bkpt	0x0000
 800895a:	2300      	movs	r3, #0
 800895c:	e007      	b.n	800896e <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800895e:	2300      	movs	r3, #0
 8008960:	e005      	b.n	800896e <tu_edpt_validate+0x122>
      break;
 8008962:	bf00      	nop
 8008964:	e002      	b.n	800896c <tu_edpt_validate+0x120>
      break;
 8008966:	bf00      	nop
 8008968:	e000      	b.n	800896c <tu_edpt_validate+0x120>
      break;
 800896a:	bf00      	nop
  }

  return true;
 800896c:	2301      	movs	r3, #1
}
 800896e:	4618      	mov	r0, r3
 8008970:	372c      	adds	r7, #44	@ 0x2c
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	e000edf0 	.word	0xe000edf0

08008980 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 8008980:	b480      	push	{r7}
 8008982:	b08d      	sub	sp, #52	@ 0x34
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4611      	mov	r1, r2
 800898c:	461a      	mov	r2, r3
 800898e:	460b      	mov	r3, r1
 8008990:	80fb      	strh	r3, [r7, #6]
 8008992:	4613      	mov	r3, r2
 8008994:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800899e:	4413      	add	r3, r2
 80089a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 80089a2:	e027      	b.n	80089f4 <tu_edpt_bind_driver+0x74>
 80089a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a6:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	3301      	adds	r3, #1
 80089ac:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80089ae:	2b05      	cmp	r3, #5
 80089b0:	d116      	bne.n	80089e0 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80089b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b4:	789b      	ldrb	r3, [r3, #2]
 80089b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80089ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089be:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80089c0:	7fbb      	ldrb	r3, [r7, #30]
 80089c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089c6:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80089d2:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80089d4:	7ffa      	ldrb	r2, [r7, #31]
 80089d6:	09d2      	lsrs	r2, r2, #7
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	4611      	mov	r1, r2
 80089dc:	797a      	ldrb	r2, [r7, #5]
 80089de:	545a      	strb	r2, [r3, r1]
 80089e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 80089f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 80089f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d3d3      	bcc.n	80089a4 <tu_edpt_bind_driver+0x24>
  }
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	3734      	adds	r7, #52	@ 0x34
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <memset>:
 8008a0a:	4402      	add	r2, r0
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d100      	bne.n	8008a14 <memset+0xa>
 8008a12:	4770      	bx	lr
 8008a14:	f803 1b01 	strb.w	r1, [r3], #1
 8008a18:	e7f9      	b.n	8008a0e <memset+0x4>
	...

08008a1c <__libc_init_array>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a54 <__libc_init_array+0x38>)
 8008a20:	4c0d      	ldr	r4, [pc, #52]	@ (8008a58 <__libc_init_array+0x3c>)
 8008a22:	1b64      	subs	r4, r4, r5
 8008a24:	10a4      	asrs	r4, r4, #2
 8008a26:	2600      	movs	r6, #0
 8008a28:	42a6      	cmp	r6, r4
 8008a2a:	d109      	bne.n	8008a40 <__libc_init_array+0x24>
 8008a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a5c <__libc_init_array+0x40>)
 8008a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8008a60 <__libc_init_array+0x44>)
 8008a30:	f000 f826 	bl	8008a80 <_init>
 8008a34:	1b64      	subs	r4, r4, r5
 8008a36:	10a4      	asrs	r4, r4, #2
 8008a38:	2600      	movs	r6, #0
 8008a3a:	42a6      	cmp	r6, r4
 8008a3c:	d105      	bne.n	8008a4a <__libc_init_array+0x2e>
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a44:	4798      	blx	r3
 8008a46:	3601      	adds	r6, #1
 8008a48:	e7ee      	b.n	8008a28 <__libc_init_array+0xc>
 8008a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4e:	4798      	blx	r3
 8008a50:	3601      	adds	r6, #1
 8008a52:	e7f2      	b.n	8008a3a <__libc_init_array+0x1e>
 8008a54:	08008e40 	.word	0x08008e40
 8008a58:	08008e40 	.word	0x08008e40
 8008a5c:	08008e40 	.word	0x08008e40
 8008a60:	08008e44 	.word	0x08008e44

08008a64 <memcpy>:
 8008a64:	440a      	add	r2, r1
 8008a66:	4291      	cmp	r1, r2
 8008a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a6c:	d100      	bne.n	8008a70 <memcpy+0xc>
 8008a6e:	4770      	bx	lr
 8008a70:	b510      	push	{r4, lr}
 8008a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7a:	4291      	cmp	r1, r2
 8008a7c:	d1f9      	bne.n	8008a72 <memcpy+0xe>
 8008a7e:	bd10      	pop	{r4, pc}

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
